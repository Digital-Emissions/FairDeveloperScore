repo,sha,author,date,message,additions,deletions,total_changes
golang/go,6ebb5f56d9ed35588970ce69cbad63508403bb8d,Tobias Klauser,2025-07-11T20:51:46Z,runtime: gofmt after CL 643897 and CL 662455  Change-Id: I3103325ebe29509c00b129a317b5708aece575a0 Reviewed-on: https://go-review.googlesource.com/c/go/+/687715 Reviewed-by: Michael Pratt <mpratt@google.com> Reviewed-by: Carlos Amedee <carlos@golang.org> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Auto-Submit: Tobias Klauser <tobias.klauser@gmail.com>,10,2,12
golang/go,1e48ca7020adf13e0fa4a6c2053f210b869bfa24,Joe Tsai,2025-07-10T00:08:49Z,"encoding/json: remove legacy option to EscapeInvalidUTF8  In the presence of invalid UTF-8, the AllowInvalidUTF8 option allows such bytes to be present, but silently mangles them using the Unicode replacement character.  The v2 default is to emit the replacement character verbatim (which is valid UTF-8 and exactly what it is for).  However, the v1 behavior has historically been to emit the escaped form of the replacement character. This behavior was introduced in https://go.dev/cl/11211045 where the documentation says that it is:      replacing invalid bytes with the Unicode replacement rune U+FFFD  but the implementation actually replaces it with the escaped form of the Unicode replacement rune. Given that the documentation differs from the implementation, the actual behavior is likely an oversight.  Given how esoteric of behavior this is, we change the v1in2 behavior to avoid the unnecesary escaping and drop support for EscapeInvalidUTF8.  This does not violate the Go compatibility agreement since we do not document what the exact syntactic output is. Also, there has already been prior precedence for changing the output:  * [encoding/json: encode \b and \f as '\b' and '\f' in JSON strings](https://go.dev/cl/521675) * [encoding/json: encode \n in strings as ""\n"", not ""\u000A""](https://go.dev/cl/4678046) * [encoding/json: encode \t as \t instead of \u0009](https://go.dev/cl/162340043) * [encoding/json: use standard ES6 formatting for numbers during marshal](https://go.dev/cl/30371)  Fixes #74551  Change-Id: Ib59a873c44713d302f1f6ab103ffba2520d63276 Reviewed-on: https://go-review.googlesource.com/c/go/+/687116 Auto-Submit: Joseph Tsai <joetsai@digital-static.net> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Reviewed-by: Damien Neil <dneil@google.com> Reviewed-by: Johan Brandhorst-Satzkorn <johan.brandhorst@gmail.com> Reviewed-by: Carlos Amedee <carlos@golang.org>",9,33,42
golang/go,a0a99cb22b2045b15509d1002a655db407a44a50,Joe Tsai,2025-07-09T23:55:14Z,"encoding/json/v2: report wrapped io.ErrUnexpectedEOF  In the event that the input is just JSON whitespace, the underlying jsontext.Decoder treats this as an empty stream and reports io.EOF.  The logic in unmarshalFull simply casted io.EOF as io.ErrUnexpectedEOF, which is inconsistent with how all other io.ErrUnexpectedEOF are reported, which are wrapped within a jsontext.SyntacticError. Do the same thing for consistency.  We add a v1 test (without goexperiment.jsonv2) to verify that the behavior is identical to how v1 has always behaved.  We add a v1in2 test (with goexperiment.jsonv2) to verify that the v1in2 behavior correctly replicates historical v1 behavior.  We also fix a faulty check in v1 Decoder.Decode, where it tried to detect errUnexpectedEnd and return an unwrapped io.ErrUnexpectedEOF error. This is the exact semantic that v1 has always done in streaming Decoder.Decode (but not non-streaming Unmarshal). There is a prior bug reported in #25956 about this inconsistency, but we aim to preserve historical v1 behavior to reduce the probability of churn when v1 is re-implemented in terms of v2.  Fixes #74548  Change-Id: Ibca52c3699ff3c09141e081c85f853781a86ec8e Reviewed-on: https://go-review.googlesource.com/c/go/+/687115 Auto-Submit: Joseph Tsai <joetsai@digital-static.net> Reviewed-by: Carlos Amedee <carlos@golang.org> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Reviewed-by: Damien Neil <dneil@google.com>",40,7,47
golang/go,9d04122d240db4de36bf9ef4f5627e0025201bd9,Filippo Valsorda,2025-07-10T15:24:26Z,"crypto/rsa: drop contradictory promise to keep PublicKey modulus secret  We claim to treat N as secret (and indeed bigmod is constant time in relation to the modulus) but at the same time we warn that all inputs to VerifyPKCS1v15 and Verify are public:  > The inputs are not considered confidential, and may leak through > timing side channels, or if an attacker has control of part of the > inputs.  See #67043 (which focuses on the inverse, recovering signatures by controlling the public key input to Verify), and in particular https://github.com/golang/go/issues/67043#issuecomment-2079335804.  Stopping the Verify adaptive attack would require significantly more complexity, the kind that has caused vulnerabilities in the past (e.g. CVE-2016-2107). On the other hand, assuming that a public key is confidential is unlikely to work in practice, since it can be recovered from just two valid (message, signature) pairs. See for example https://keymaterial.net/2024/06/15/reconstructing-public-keys-from-signatures/.  This comment was introduced in CL 552935, not really due to a need to specify that N was secret, but rather to clarify that E is not (so it could be used in variable-time exponentiation).  Change-Id: I6a6a6964f3f8d2dc2fcc13ce938b271c9de9666b Reviewed-on: https://go-review.googlesource.com/c/go/+/687616 Reviewed-by: Roland Shoemaker <roland@golang.org> Auto-Submit: Filippo Valsorda <filippo@golang.org> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Reviewed-by: Carlos Amedee <carlos@golang.org>",2,3,5
golang/go,1ca23682dd7b2706daa94e428b3b82cc85a752c0,Filippo Valsorda,2025-07-10T15:06:05Z,crypto/rsa: fix documentation formatting  Change-Id: I6a6a696422f9ab73b9ddee131b17d3c177fefc4e Reviewed-on: https://go-review.googlesource.com/c/go/+/687615 LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Reviewed-by: Roland Shoemaker <roland@golang.org> Reviewed-by: Carlos Amedee <carlos@golang.org> Auto-Submit: Filippo Valsorda <filippo@golang.org>,7,6,13
golang/go,4bc3373c8e2cad24a779698477704306548949cb,Keith Randall,2025-07-11T16:10:53Z,runtime: turn off large memmove tests under asan/msan  Just like we do for race mode. They are just too slow when running with the sanitizers.  Fixes #59448  Change-Id: I86e3e3488ec5c4c29e410955e9dc4cbc99d39b84 Reviewed-on: https://go-review.googlesource.com/c/go/+/687535 Reviewed-by: Keith Randall <khr@google.com> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Reviewed-by: Dmitri Shuralyov <dmitshur@golang.org> Reviewed-by: Dmitri Shuralyov <dmitshur@google.com> Reviewed-by: Cherry Mui <cherryyz@google.com> Auto-Submit: Keith Randall <khr@golang.org>,6,4,10
golang/go,88cf0c5d55a8c18da515485f4a3fcf008b96cb07,Cherry Mui,2025-07-10T04:46:00Z,"cmd/link: do size fixups after symbol references are loaded  When we do a size fixup, we need to clone the symbol to an external symbol so we can modify it. This includes cloning the relocations, which includes resolving the relocations. If the symbol being fixed has a relocation referencing a non-Go symbol, that symbol has not yet been created, it will be resolved to an empty symbol. Load the references first, so the referenced symbol, even if it is a non-Go symbol, exists.  Fixes #74537.  Change-Id: I81525bd7c3e232b80eefeb0f18e13ba5331e1510 Reviewed-on: https://go-review.googlesource.com/c/go/+/687315 LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Reviewed-by: David Chase <drchase@google.com>",4,4,8
golang/go,7a38975a48ac735e62b389957bfc898437d628dc,Jakob Borg,2025-06-22T17:16:36Z,"os: trivial comment fix  ""Geese"" here looks like an autocorrect-o of ""oses"", I think writing it out makes more sense.  Change-Id: Iba89a6c0b94657e2e93937cc153f07aea1d04e04 GitHub-Last-Rev: 4f3a780f327d6c807e9b154d781ee69a10d391e4 GitHub-Pull-Request: golang/go#74332 Reviewed-on: https://go-review.googlesource.com/c/go/+/682776 LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Reviewed-by: Keith Randall <khr@golang.org> Auto-Submit: Keith Randall <khr@golang.org> Reviewed-by: Keith Randall <khr@google.com> Reviewed-by: Dmitri Shuralyov <dmitshur@google.com>",1,1,2
golang/go,aa5de9ebb55bbd5e0a38304f8f8e603b2ec03238,Christian Hoeppner,2025-07-04T18:40:42Z,synctest: fix comments for time.Now() in synctests  Also add a test case to make sure that time.Now() results in the documented date.  Change-Id: Ic4cc577eba485b7c6e1a64122da06d7075bbe12e Reviewed-on: https://go-review.googlesource.com/c/go/+/685677 LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Auto-Submit: Christian HÃ¶ppner <hoeppi@google.com> Reviewed-by: Damien Neil <dneil@google.com>,11,2,13
golang/go,63ec70d4e1350f44caf950cf3f675ae2cb7ea453,Markus Kusano,2025-07-09T19:52:09Z,crypto/cipher: Fix comment punctuation  Change-Id: I7dc086a87d28ab847288eed13f719421420cd004 Reviewed-on: https://go-review.googlesource.com/c/go/+/686997 Reviewed-by: Alan Donovan <adonovan@google.com> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com>,1,1,2
golang/go,8131635e5a9c7ae2fd2c083bed9e841d27226500,Michael Anthony Knyszek,2025-07-09T15:50:06Z,"runtime: run TestSignalDuringExec in its own process group  TestSignalDuringExec sends a SIGWINCH to the whole process group. However, it may execute concurrently with other copies of the runtime tests, especially through `go tool dist`, and gdb version <12.1 has a bug in non-interactive mode where recieving a SIGWINCH causes a crash.  This change modifies SignalDuringExec in the testprog to first fork itself into a new process group. To avoid issues with Ctrl+C and the new process group hanging, the new process blocks on a pipe that is passed down to it. This pipe is automatically closed when its parent exits, which should ensure that the subprocess also exits.  Fixes #58932.  Change-Id: I3906afa28cf8b15d22ae612d071bce7f30fc3e6c Cq-Include-Trybots: luci.golang.try:gotip-linux-amd64-longtest-noswissmap,gotip-linux-amd64-longtest-aliastypeparams,gotip-linux-amd64-longtest,gotip-linux-386-longtest Reviewed-on: https://go-review.googlesource.com/c/go/+/686875 LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Reviewed-by: Michael Pratt <mpratt@google.com>",46,0,46
golang/go,67c1704444ba9661699a80d0ea0a2df20b4107e2,Daniel McCarney,2025-06-28T18:29:48Z,"crypto/tls: empty server_name conf. ext. from server  When a TLS server uses the information from the server_name extension in a client hello, and the connection isn't resuming, it should return an empty server_name extension in its server hello (or encrypted extensions for TLS 1.3).  For TLS <1.3 we we do this in doFullHandshake(), by setting the pre-existing serverHelloMsg.serverNameAck bool. We know that the connection isn't resuming based on the context where this function is called.  For TLS 1.3, a new encryptedExtensionsMsg.serverNameAck bool is added, and populated as appropriate in sendServerParameters() based on whether the conn was resumed or not. The encryptedExtensionsMsg marshalling is updated to emit the encrypted extension based on that field.  These changes allow enabling the ServerNameExtensionServer-* bogo tests that verify both the presence and absence of the server_name extension based on the relevant specifications.  Resolves #74282 Updates #72006  Change-Id: I703bc2ec916b50906bdece7b7483a7faed7aa8e4 Reviewed-on: https://go-review.googlesource.com/c/go/+/684795 TryBot-Bypass: Daniel McCarney <daniel@binaryparadox.net> Reviewed-by: Carlos Amedee <carlos@golang.org> Reviewed-by: Roland Shoemaker <roland@golang.org> Auto-Submit: Daniel McCarney <daniel@binaryparadox.net>",222,206,428
golang/go,54c9d776302d53ab1907645cb67fa4a948e1500c,Roland Shoemaker,2025-06-09T18:23:46Z,"cmd/go: disable support for multiple vcs in one module  Removes the somewhat redundant vcs.FromDir, ""allowNesting"" argument, which was always enabled, and disallow multiple VCS metadata folders being present in a single directory. This makes VCS injection attacks much more difficult.  Also adds a GODEBUG, allowmultiplevcs, which re-enables this behavior.  Thanks to RyotaK (https://ryotak.net) of GMO Flatt Security Inc for reporting this issue.  Fixes #74380 Fixes CVE-2025-4674  Change-Id: I5787d90cdca8deb3aca6f154efb627df1e7d2789 Reviewed-on: https://go-review.googlesource.com/c/go/+/686515 LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Reviewed-by: David Chase <drchase@google.com> Commit-Queue: Carlos Amedee <carlos@golang.org> Reviewed-by: Carlos Amedee <carlos@golang.org>",108,23,131
golang/go,fca43a8436f2dbec981fb002c6ba31fe9ff89dd6,cuishuang,2025-07-08T06:53:13Z,internal: make struct comment match struct name  Change-Id: I85a4051bd3413bd843b17d22cf9120f615cfe8db Reviewed-on: https://go-review.googlesource.com/c/go/+/686295 Reviewed-by: Cherry Mui <cherryyz@google.com> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Auto-Submit: Carlos Amedee <carlos@golang.org> Reviewed-by: Carlos Amedee <carlos@golang.org>,2,2,4
golang/go,bb917bb0303843467e809a3a373e4bb2d359fcfa,Ian Lance Taylor,2025-07-07T20:01:34Z,cmd/compile: document that nosplit directive is unsafe  For #74478  Change-Id: I902e9a92cdacb5ad6dafa9896640f8196ba1d56a Reviewed-on: https://go-review.googlesource.com/c/go/+/686115 LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Reviewed-by: Keith Randall <khr@golang.org> Auto-Submit: Keith Randall <khr@golang.org> Reviewed-by: Keith Randall <khr@google.com> Reviewed-by: Carlos Amedee <carlos@golang.org>,3,0,3
golang/go,a5bda585d5912b291aa247c8aa6519d2cc3125d7,Jorropo,2025-07-04T07:07:27Z,cmd/compile: run fmt on ssa  prove.go used to make my editor and precomit checks very unhappy.  Change-Id: I25f7ffa2191480bc1b4f91fa91ccf3e4768045fa Reviewed-on: https://go-review.googlesource.com/c/go/+/685818 Reviewed-by: Carlos Amedee <carlos@golang.org> Reviewed-by: Keith Randall <khr@google.com> Reviewed-by: Keith Randall <khr@golang.org> Auto-Submit: Keith Randall <khr@golang.org> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com>,12,5,17
golang/go,86b5ba731044dcbb0400f03293989796ed5807fe,Michael Anthony Knyszek,2025-07-07T17:19:17Z,"internal/trace: only test for sync preemption if async preemption is off  Currently, the test change made for the fix to #68090 is flaky. This is because the sync-point-only goroutine that we expect to be sync preempted might only ever get async preempted in some circumstances.  This change adds a variant to all trace tests to run with asyncpreemptoff=1, and the stacks test, the flaky one, only actually checks for the sync-point in the trace when async preemption is disabled.  Fixes #74417.  Change-Id: Ib6341bbc26921574b8f0fff6dd521ce83f85499c Reviewed-on: https://go-review.googlesource.com/c/go/+/686055 LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Reviewed-by: Cherry Mui <cherryyz@google.com>",20,9,29
golang/go,ef46e1b164e4a530c278434a9aaa2b23ce9a9d12,Michael Matloob,2025-07-01T21:16:53Z,"cmd/internal/doc: fix GOROOT skew and path joining bugs  Use the goCmd() function to get the go command to invoke, so that when GOROOT is set, the go command that's invoked uses the same GOROOT. Otherwise there will be skew between the go command and the tools and runtime. Also use the environment when determining GOPROXY and GOMODCACHE, and use url.Join so the slashes in 'http://' aren't collapsed into one.  Change-Id: Ie36ca2fffdb015a7f5f9bd7f514850e41fad2c1a Reviewed-on: https://go-review.googlesource.com/c/go/+/685319 Reviewed-by: Michael Matloob <matloob@google.com> Reviewed-by: Michael Pratt <mpratt@google.com> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com>",7,3,10
golang/go,75b43f9a97ada1f0fce7a5775d4ab373bd0dad9c,Michael Anthony Knyszek,2025-06-27T16:40:43Z,runtime: make traceStack testable and add a benchmark  Change-Id: Ide4daa5eee3fd4f3007d6ef23aa84b8916562c39 Reviewed-on: https://go-review.googlesource.com/c/go/+/684457 Reviewed-by: Cherry Mui <cherryyz@google.com> Auto-Submit: Michael Knyszek <mknyszek@google.com> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com>,65,8,73
golang/go,20978f46fdf097cf3d9164918441dd296ee274f2,Filippo Valsorda,2025-05-05T11:35:36Z,"crypto/rsa: remove another forgotten note to future self  In CL 226937 I refactored the RSA-PSS implementation, and apparently left behind a note to think a bit harder about whether this bytes.Equal check should be constant time or not. It snuck through code review, so it's 2018 again, no one is worried about pandemics, I have just joined Google, and I am mailing CL 147637 again.  Anyway, as discussed in #67043 and documented in CL 587277, the inputs to signature verification functions are not secret, and are allowed to leak through timing side channels. This means an attacker can already compute h (from signature and public key) and h0 (from message hash and public key). What the attacker can't do is produce a signature that yields the correct h (since that requires the private key).  Change-Id: I6a6a4656d6255bdad628a94f48f7ea878a304263 Reviewed-on: https://go-review.googlesource.com/c/go/+/685255 LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Reviewed-by: Dmitri Shuralyov <dmitshur@google.com> Reviewed-by: Carlos Amedee <carlos@golang.org> Reviewed-by: Daniel McCarney <daniel@binaryparadox.net> Auto-Submit: Filippo Valsorda <filippo@golang.org>",1,1,2
golang/go,33fb4819f59d16c483be6cf2016f79eef3543691,qmuntal,2025-07-04T10:45:42Z,"cmd/compile/internal/ssa: skip EndSequence entries in TestStmtLines  The TestStmtLines test has been accessing a nil pointer when it tries to look up LineEntry.File.Name on a line entry with EndSequence set to true. The doc for EndSequence specifies that if EndSequence is set, only it and the Address field are meaningful. Skip the entries with EndSequence set when building the set of files.  I've reproduced this issue locally. Probably also fixes #49372, but will leave that for a follow-up CL.  Fixes #74475 Updates #49372  Change-Id: Ic0664f7652b52a0a20239d13fe16454622740821 Reviewed-on: https://go-review.googlesource.com/c/go/+/685835 Reviewed-by: Than McIntosh <thanm@golang.org> Reviewed-by: Carlos Amedee <carlos@golang.org> Reviewed-by: Dmitri Shuralyov <dmitshur@google.com> TryBot-Bypass: Dmitri Shuralyov <dmitshur@golang.org> Auto-Submit: Quim Muntal <quimmuntal@gmail.com>",5,0,5
golang/go,a995269a9383d90a3bdd029989bafc8fc3b19dc3,John Giorshev,2025-07-06T18:41:28Z,sort: clarify Less doc  clarifies the requirements for Less  Fixes https://github.com/golang/go/issues/73420  Change-Id: I7d49b10fad78c618d946b3bb161ce19680ede47a GitHub-Last-Rev: 7a49ad81923048bfc99b265dd89f012eefcf5699 GitHub-Pull-Request: golang/go#74333 Reviewed-on: https://go-review.googlesource.com/c/go/+/683275 Reviewed-by: Keith Randall <khr@golang.org> Reviewed-by: Keith Randall <khr@google.com> Auto-Submit: Keith Randall <khr@google.com> Reviewed-by: Carlos Amedee <carlos@golang.org> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com>,4,2,6
golang/go,6c3b5a2798c83d583cb37dba9f39c47300d19f1f,Cherry Mui,2025-07-03T03:26:44Z,"runtime: correct vdsoSP on S390X  It should get the caller's SP. The current code gets the address of the first parameter, which is one word above the caller's SP. There is a slot for saving the LR at 0(SP) in the caller's frame.  Fixes #62086 (for s390x).  Change-Id: Ie8cbfabc8161b98658c884a32e0af72df189ea56 Reviewed-on: https://go-review.googlesource.com/c/go/+/685715 Reviewed-by: David Chase <drchase@google.com> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com>",2,2,4
golang/go,dd687c386016445b2f4abc2a958963dd2056d95f,Filippo Valsorda,2025-07-01T09:51:37Z,hash: document that Clone may only return ErrUnsupported or a nil error  Updates #69521  Change-Id: I6a6a6964ce384a80c4c89efe67c260dc6e9ed6c8 Reviewed-on: https://go-review.googlesource.com/c/go/+/685235 Auto-Submit: Filippo Valsorda <filippo@golang.org> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Reviewed-by: Austin Clements <austin@google.com> Reviewed-by: Dmitri Shuralyov <dmitshur@google.com> Auto-Submit: Austin Clements <austin@google.com>,2,1,3
golang/go,b3251514531123d7fd007682389bce7428d159a0,qmuntal,2025-07-02T14:11:37Z,"cmd/cgo/internal/testsanitizers: skip asan tests when FIPS140 mode is on  Executing ""GODEBUG=fips140=on go test -run TestASAN ./cmd/cgo/internal/testsanitizers"" fails because FIPS 140 mode is incompatible with ASAN.  Change-Id: I1a489f3398bbabf597fe7ffc0982c86c3b86e07e Reviewed-on: https://go-review.googlesource.com/c/go/+/685495 Reviewed-by: Cherry Mui <cherryyz@google.com> Reviewed-by: Dmitri Shuralyov <dmitshur@google.com> Auto-Submit: Quim Muntal <quimmuntal@gmail.com> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com>",5,0,5
golang/go,15d9fe43d648764d41a88c75889c84df5e580930,Deleplace,2025-06-30T14:26:43Z,testing/synctest: explicitly state Run will be removed in Go 1.26  Updates #74012  Change-Id: I0407d9e87e9de6e02d3de0a462bc6a32c0faba4c Reviewed-on: https://go-review.googlesource.com/c/go/+/684875 Reviewed-by: Damien Neil <dneil@google.com> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Reviewed-by: qiu laidongfeng2 <2645477756@qq.com>,1,1,2
golang/go,de646d94f76237e10c932e361d0b89d0e8036902,Michael Matloob,2025-07-01T20:28:24Z,"cmd/go/internal/modindex: apply changes in CL 502615 to modindex package  CL 502615 modified go/build to check for invalid import paths, but did not make those changes to the corresponding code in the modindex package. Apply those changes here.  We should try to deduplicate the code to prevent this from happening again.  For #73976 For #74446  Change-Id: I69fc5e2c829efb818c9974ec8126807a1c8f7913 Reviewed-on: https://go-review.googlesource.com/c/go/+/685317 TryBot-Bypass: Michael Matloob <matloob@google.com> Auto-Submit: Michael Matloob <matloob@golang.org> Reviewed-by: Michael Pratt <mpratt@google.com> Reviewed-by: Michael Matloob <matloob@google.com>",22,0,22
golang/go,2f653a5a9e9112ff64f1392ff6e1d404aaf23e8c,Filippo Valsorda,2025-05-23T18:28:36Z,crypto/tls: ensure the ECDSA curve matches the signature algorithm  Change-Id: I6a6a4656c1b47ba6bd652d4da18922cb6b80a8ab Reviewed-on: https://go-review.googlesource.com/c/go/+/675836 Reviewed-by: Roland Shoemaker <roland@golang.org> Auto-Submit: Filippo Valsorda <filippo@golang.org> TryBot-Bypass: Filippo Valsorda <filippo@golang.org> Reviewed-by: David Chase <drchase@google.com> Reviewed-by: Daniel McCarney <daniel@binaryparadox.net>,29,38,67
golang/go,6e95fd96cc4514bb6fb39db85bb2164d717cb4da,Filippo Valsorda,2025-07-01T09:55:48Z,crypto/ecdsa: fix crypto/x509 godoc links  Change-Id: I6a6a6964c0e8269305804dc2bb57f13f94f08ed5 Reviewed-on: https://go-review.googlesource.com/c/go/+/685236 Reviewed-by: David Chase <drchase@google.com> Auto-Submit: Filippo Valsorda <filippo@golang.org> Reviewed-by: Roland Shoemaker <roland@golang.org> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Reviewed-by: Daniel McCarney <daniel@binaryparadox.net>,11,11,22
golang/go,7755a05209177e6f2d494a08a9b98b9b31d6ee8f,Keith Randall,2025-06-30T23:14:39Z,"Revert ""crypto/internal/fips140/subtle: add assembly implementation of xorBytes for arm""  This reverts commit de86d02c32f6690391ed79b99d0f763bb06606d5.  Reason for revert: Causes unaligned access failures on some arm hardware  Change-Id: Ie280d2c9441f584e2a621f929db5a2e1492bed09 Reviewed-on: https://go-review.googlesource.com/c/go/+/685137 Reviewed-by: Keith Randall <khr@google.com> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Reviewed-by: Julian Zhu <jz531210@gmail.com> Reviewed-by: David Chase <drchase@google.com>",2,151,153
golang/go,d168ad18e15c4e052260bb8c3446c90ab46fdde0,Jorropo,2025-06-28T00:20:22Z,"slices: update TestIssue68488 to avoid false positives  Fixes #74387  Even tho we are abusing unsafe.SliceData a bit here it's probably fine; in case this test fail, it means some memory alias is happening which is not good for GC purposes.  We don't care about false keep alives for stack locations tho.  Change-Id: I9434bad8c6d9fbc39c738690617dc7cf91d82aef Reviewed-on: https://go-review.googlesource.com/c/go/+/684755 Reviewed-by: David Chase <drchase@google.com> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Reviewed-by: Keith Randall <khr@golang.org> Reviewed-by: Keith Randall <khr@google.com> Auto-Submit: Jorropo <jorropo.pgm@gmail.com>",3,0,3
golang/go,27ad1f50135c6de20c2afd593cdd17f47c2388e0,Keith Randall,2025-06-26T21:36:14Z,internal/abi: fix comment on NonEmptyInterface  Change-Id: Ia3f4e844049caf11ae67d1bd6dd48350f51c532f Reviewed-on: https://go-review.googlesource.com/c/go/+/684375 Reviewed-by: David Chase <drchase@google.com> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Auto-Submit: Keith Randall <khr@golang.org> Reviewed-by: Keith Randall <khr@google.com>,1,1,2
golang/go,86fca3dcb63157b8e45e565e821e7fb098fcf368,Joe Tsai,2025-06-25T02:00:23Z,"encoding/json/jsontext: use bytes.Buffer.AvailableBuffer  This logic was added in October, 2021:  	https://github.com/go-json-experiment/json/commit/0b3bd4e1ed96587be346b7f964d6bb3fcfed65f4  before the introduction of bytes.Buffer.AvailableBuffer in March, 2023.  	https://go.dev/cl/474635  Updates #71845  Change-Id: I96800e1ba8fce15cc78316779db4ddcd4fe1d510 Reviewed-on: https://go-review.googlesource.com/c/go/+/685136 Reviewed-by: Damien Neil <dneil@google.com> Auto-Submit: Joseph Tsai <joetsai@digital-static.net> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Reviewed-by: Dmitri Shuralyov <dmitshur@google.com>",1,1,2
golang/go,6bd9944c9a9fb6b1da6288358b0620218d621441,Joe Tsai,2025-06-30T22:40:20Z,"encoding/json/v2: avoid escaping jsonopts.Struct  The jsonopts.Struct.join method unfortunately escapes the receiver because it is passed to JoinUnknownOption, which is a dynamically implemented function.  This affects jsontext.Encoder.reset and jsontext.Decoder.reset, which relied on a local jsonopts.Struct to temporarily store prior options such that it would have to be heap allocated.  Adjust the signature of JoinUnknownOption to avoid pointers so that nothing escape.  This is a regression from https://github.com/go-json-experiment/json/pull/163  Performance:  	name             old time/op    new time/op    delta 	Marshal/Bool-32    72.1ns Â± 2%    51.3ns Â± 1%  -28.77%  (p=0.000 n=10+9)  	name             old allocs/op  new allocs/op  delta 	Marshal/Bool-32      2.00 Â± 0%      1.00 Â± 0%  -50.00%  (p=0.000 n=10+10)  Updates #71845  Change-Id: Ife500d82d3d2beb13652553a4ffdf882c136f5a0 Reviewed-on: https://go-review.googlesource.com/c/go/+/685135 Auto-Submit: Joseph Tsai <joetsai@digital-static.net> Reviewed-by: Damien Neil <dneil@google.com> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Reviewed-by: Dmitri Shuralyov <dmitshur@google.com>",7,6,13
golang/go,e46d586eddfdd2186d77a5e996bbd6415cfcf2f5,thepudds,2025-06-28T20:53:37Z,"cmd/compile/internal/escape: add debug hash for literal allocation optimizations  Several CLs earlier in this stack added optimizations to reduce user allocations by recognizing and taking advantage of literals, including CL 649555, CL 649079, and CL 649035.  This CL adds debug hashing of those changes, which enables use of the bisect tool, such as 'bisect -compile=literalalloc go test -run=Foo'. This also allows these optimizations to be manually disabled via '-gcflags=all=-d=literalallochash=n'.  Updates #71359  Change-Id: I854f7742a6efa5b17d914932d61a32b2297f0c88 Reviewed-on: https://go-review.googlesource.com/c/go/+/675415 LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Reviewed-by: David Chase <drchase@google.com> Reviewed-by: Cherry Mui <cherryyz@google.com>",20,2,22
golang/go,479b51ee1f78a884a45b517c1e993d91c9774e29,thepudds,2025-06-27T22:46:27Z,"cmd/compile/internal/escape: stop disabling literal allocation optimizations when coverage is enabled  CL 649079 and CL 649035 updated escape analysis to rewrite certain expressions in OMAKE and OCONVIFACE nodes as optimizations to reduce user allocations.  Part of the change in CL 649079 disabled those optimzations when coverage instrumentation was enabled under an incorrect possible theory of how those optimizations might be ""expected"" to change coverage results -- in particular, the cover_build_pkg_select.txt testscript failed with different coverage results. I now realize that the proper explanation is that my fix in CL 684116 was needed.  Now that CL 684116 is merged, we should no longer disable these optimizations when coverage is enabled, which is what this CL does.  This has not been reported as a problem to my knowledge, but without this CL, one could imagine for example a test using testing.AllocsPerRun might start failing when coverage was enabled if the result relied on these optimizations.  As expected, if we place this CL just before the necessary fix in CL 684116, the cover_build_pkg_select.txt testscript fails with a changed coverage result. If we place this CL just after CL 684116, the test passes, also as expected.  Updates #71359  Change-Id: Ib5ff00c267acd85dd423c238d177e91a4d881f9e Reviewed-on: https://go-review.googlesource.com/c/go/+/684777 Reviewed-by: David Chase <drchase@google.com> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Reviewed-by: Cherry Mui <cherryyz@google.com>",0,4,4
golang/go,8002d283e8dc3d02f087a3885894c2c29fac93fa,Daniel McCarney,2025-06-23T19:48:57Z,"crypto/tls: update bogo version  This commit updates the pinned revision of BoringSSL that's used for the BoGo integration test.  Doing this requires a few categories of config changes:  * ignoring a few new tests for features crypto/tls doesn't implement * ignoring a few new tests that require further   investigation/classification, or that already have an associated   tracking issue * updating the error map syntax to accommodate the upstream change that   allows a one-to-many mapping  One code change is required in the shim test process to adjust how we tear down a connection after an error to account for an upstream change in the test runner.  Previously, for error conditions we would immediately close the connection when exiting the shim process. We instead need to do this in a multi-step process:  1. Flush any pending TLS writes to surface any alerts the error    condition may have generated. 2. Close the write side of the TCP connection to signal we're not    writing anymore. 3. Read and discard any pending data from the peer. 4. Close the read side of the TCP connection to fully close the socket.  Without doing this unpredictable timing factors may result in spurious test failures where:  1. The runner sends us data that produces an error. 2. We send an alert, and immediately tear down the connection. 3. The runner tries to perform a write, and hits an error because the    pipe is closed. 4. The runner fails the test with the pipe write error, before it reads    from the connection to see the expected alert.  With the new code we instead swallow the unrelated writes and the runner sees our alert after its ignored write when it tries to read from the conn. The alert is the expected test outcome, and so the test passes.  This was previously not an issue because the runner was discarding the write errors.  Updates #72006  Change-Id: Ib72a1c5e693aac92144696c8bae888d5f3f6c32f Reviewed-on: https://go-review.googlesource.com/c/go/+/683456 Auto-Submit: Daniel McCarney <daniel@binaryparadox.net> Reviewed-by: David Chase <drchase@google.com> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Reviewed-by: Roland Shoemaker <roland@golang.org>",44,3,47
golang/go,fdd7713fe5a7bc054fe08f79a1877f90c7188e53,Olivier MenguÃ©,2024-06-30T22:49:11Z,"internal/goexperiment: fix godoc formatting  In internal/goexperiment fix godoc formatting (list indent, add godoc links).  In internal/buildcfg fix godoc for Experiment.baseline.  Change-Id: I30eaba60cbf3978a375b50dda19dbb2830903bdb Reviewed-on: https://go-review.googlesource.com/c/go/+/595915 Reviewed-by: Austin Clements <austin@google.com> Reviewed-by: Michael Knyszek <mknyszek@google.com> Auto-Submit: Austin Clements <austin@google.com> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com>",12,12,24
golang/go,740857f529ce4074c7f9aa1d6f38db8c4a00246c,Michael Pratt,2025-06-27T21:21:20Z,"runtime: stash allpSnapshot on the M  findRunnable takes a snapshot of allp prior to dropping the P because afterwards procresize may mutate allp without synchronization. procresize is careful to never mutate the contents up to cap(allp), so findRunnable can still safely access the Ps in the slice.  Unfortunately, growing allp is problematic. If procresize grows the allp backing array, it drops the reference to the old array. allpSnapshot still refers to the old array, but allpSnapshot is on the system stack in findRunnable, which also likely no longer has a P at all.  This means that a future GC will not find the reference and can free the array and use it for another allocation. This would corrupt later reads that findRunnable does from the array.  The fix is simple: the M struct itself is reachable by the GC, so we can stash the snapshot in the M to ensure it is visible to the GC.  The ugliest part of the CL is the cleanup when we are done with the snapshot because there are so many return/goto top sites. I am tempted to put mp.clearAllpSnapshot() in the caller and at top to make this less error prone, at the expensive of extra unnecessary writes.  Fixes #74414.  Change-Id: I6a6a636c484e4f4b34794fd07910b3fffeca830b Reviewed-on: https://go-review.googlesource.com/c/go/+/684460 Reviewed-by: Cherry Mui <cherryyz@google.com> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Auto-Submit: Michael Pratt <mpratt@google.com>",41,1,42
golang/go,9ae38be3025fa71ec2967111e0a184f886876cb1,Damien Neil,2025-06-27T15:46:28Z,"sync: disassociate WaitGroups from bubbles on Wait  Fix a race condition in disassociating a WaitGroup in a synctest bubble from its bubble. We previously disassociated the WaitGroup when count becomes 0, but this causes problems when an Add call setting count to 0 races with one incrementing the count.  Instead, disassociate a WaitGroup from its bubble when Wait returns. Wait must not be called concurrently with an Add call with a positive delta and a 0 count, so we know that the disassociation will not race with an Add call trying to create a new association.  Fixes #74386  Change-Id: I9b519519921f7691869a64a245a5ee65d071d054 Reviewed-on: https://go-review.googlesource.com/c/go/+/684635 Reviewed-by: Michael Pratt <mpratt@google.com> Auto-Submit: Damien Neil <dneil@google.com> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com>",38,16,54
golang/go,4731832342f6430d6eb4cb13a00b97c3db5da993,Filippo Valsorda,2025-05-22T16:00:02Z,crypto/hmac: wrap ErrUnsupported returned by Clone  Updates #69521  Change-Id: I6a6a4656403b9d35d5e4641b5c5c4975f3fa0e43 Reviewed-on: https://go-review.googlesource.com/c/go/+/675555 Reviewed-by: Austin Clements <austin@google.com> Auto-Submit: Filippo Valsorda <filippo@golang.org> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Reviewed-by: Roland Shoemaker <roland@golang.org>,32,8,40
golang/go,03ad694dcbe8d981d644c9878326bd086d056af0,limeidan,2025-06-13T03:48:44Z,"runtime: update skips for TestGdbBacktrace  We encountered a new type of ""no such process"" error on loong64, it's like this ""Couldn't get NT_PRSTATUS registers: No such process."", I checked the source code of gdb, NT_PRSTATUS is not fixed, it may be another name, so I use regular expression here to match possible cases.  Updates #50838 Fixes #74389  Change-Id: I3e3f7455b2dc6b8aa10c084f24f6a2a114790855 Reviewed-on: https://go-review.googlesource.com/c/go/+/684195 LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Auto-Submit: Dmitri Shuralyov <dmitshur@golang.org> Reviewed-by: David Chase <drchase@google.com> Reviewed-by: abner chenc <chenguoqi@loongson.cn> Reviewed-by: Dmitri Shuralyov <dmitshur@google.com>",2,1,3
golang/go,9d1cd0b8816654ac36f2122b52dd8335aae86b26,Mikhail Mazurskiy,2025-06-27T10:52:57Z,iter: add missing type parameter in doc  Change-Id: I3816b41227a0c8f8ece77b1e29002df433ccebdb GitHub-Last-Rev: e9e63b4c1b93cde499b15db49c53ff1536fc765c GitHub-Pull-Request: golang/go#74406 Reviewed-on: https://go-review.googlesource.com/c/go/+/684555 Reviewed-by: Jorropo <jorropo.pgm@gmail.com> Auto-Submit: Jorropo <jorropo.pgm@gmail.com> Reviewed-by: Dmitri Shuralyov <dmitshur@google.com> Auto-Submit: Sean Liao <sean@liao.dev> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Reviewed-by: Keith Randall <khr@google.com> Reviewed-by: Sean Liao <sean@liao.dev>,1,1,2
golang/go,acb914f2c2a3ec3dd227812ba6b119480d6400cd,qmuntal,2025-06-27T10:45:22Z,"cmd/doc: fix -http on Windows  On Windows, GOMODCACHE almost never starts with a slash, and ""go doc -http"" constructs a GOPROXY URL by doing ""file://"" + GOMODCACHE, resulting in an invalid file URI.  For example, if GOMODCACHE is ""C:\foo"", then the file URI should be ""file:///C:/foo"", but it becomes ""file://C:/foo"" instead, where ""C:"" is understood as a host name, not a drive letter.  Fixes #74137.  Change-Id: I23e776e0f649a0062e01d1a4a6ea8268ba467331 Reviewed-on: https://go-review.googlesource.com/c/go/+/684575 LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Reviewed-by: Michael Matloob <matloob@golang.org> Reviewed-by: Dmitri Shuralyov <dmitshur@google.com> Reviewed-by: Michael Matloob <matloob@google.com>",38,22,60
golang/go,b51f1cdb8752c2fdd6a2bf06224aab0b5c07caac,Cherry Mui,2025-06-27T23:45:22Z,"runtime: remove arbitrary 5-second timeout in TestNeedmDeadlock  The NeedmDeadlock test program currently has a 5-second timeout, which is sort of arbitrary. It is long enough in regular mode (which usually takes 0.0X seconds), but not quite so for configurations like ASAN. Instead of using an arbitrary timeout, just use the test's deadline. The test program is invoked with testenv.Command, which will send it a SIGQUIT before the deadline expires.  Fixes #56420 (at least for the asan builder).  Change-Id: I0b13651cb07241401837ca2e60eaa1b83275b093 Reviewed-on: https://go-review.googlesource.com/c/go/+/684697 LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Reviewed-by: Dmitri Shuralyov <dmitshur@golang.org> Reviewed-by: Dmitri Shuralyov <dmitshur@google.com>",2,8,10
golang/go,f1e6ae2f6f5424f9f5c6dc915866d4f457c1483e,Joe Tsai,2025-06-27T17:59:44Z,"reflect: fix TypeAssert on nil interface values  In the Go language a type assertion of a nil interface value will always report false:  	var err error 	v, ok := err.(error) // always reports (nil, false)  Consequently, assertion on a reflect.Value.Interface() will also report false:  	var err error 	rv := ValueOf(&err).Elem() 	v, ok := rv.Interface().(error) // reports (nil, false)  However, prior to this change, a TypeAssert would report true:  	var err error 	rv := ValueOf(&err).Elem() 	v, ok := TypeAssert[error](rv) // reports (nil, true)  when it should report false.  This fixes TypeAssert to match the Go language by pushing the typ != v.typ check to the very end after we have validated that neither v nor T are interface kinds.  Fixes #74404  Change-Id: Ie14d5cf18c8370c3e27ce4bdf4570c89519d8a16 Reviewed-on: https://go-review.googlesource.com/c/go/+/684675 Reviewed-by: Cherry Mui <cherryyz@google.com> Auto-Submit: Joseph Tsai <joetsai@digital-static.net> Reviewed-by: Mateusz Poliwczak <mpoliwczak34@gmail.com> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Reviewed-by: Dmitri Shuralyov <dmitshur@google.com>",41,36,77
golang/go,e81c624656e415626c7ac3a97768f5c2717979a4,qmuntal,2025-06-27T09:16:54Z,"os: use minimal file permissions when opening parent directory in RemoveAll  On Windows, the process might not have read permission on the parent directory, but still can delete files in it. This change allows RemoveAll to open the parent directory with minimal permissions, which is sufficient for deleting child files.  Fixes #74134.  Cq-Include-Trybots: luci.golang.try:gotip-windows-amd64-longtest,gotip-windows-arm64 Change-Id: I5d5c5977caaebf6e0f93fb2313b0ceb346f70e05 Reviewed-on: https://go-review.googlesource.com/c/go/+/684515 Reviewed-by: Dmitri Shuralyov <dmitshur@google.com> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Reviewed-by: Damien Neil <dneil@google.com>",10,1,11
golang/go,2a22aefa1f7befb0ac7a95c918b75b05919c1907,Roland Shoemaker,2025-06-26T19:19:23Z,"encoding/json: add security section to doc  Add a section to the package doc which details the security considerations of using encoding/json, in particular with respect to parser misalignment issues.  Additionally, clarify previously ambiguous statement in the Unmarshal doc about how case is used when matching keys in objects, and add a note about how duplicate keys are handled.  Fixes #14750  Change-Id: I66f9b845efd98c86a684d7333b3aa8a456564922 Reviewed-on: https://go-review.googlesource.com/c/go/+/684315 LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Reviewed-by: Joseph Tsai <joetsai@digital-static.net> Auto-Submit: Roland Shoemaker <roland@golang.org> Reviewed-by: Damien Neil <dneil@google.com>",43,8,51
golang/go,742fda95246958076e439bbcf71fedda43a894bb,Michael Anthony Knyszek,2025-06-27T00:59:49Z,"runtime: account for missing frame pointer in preamble  If a goroutine is synchronously preempted, then taking a frame-pointer-based stack trace at that preemption will skip PC of the caller of the function which called into morestack. This happens because the frame pointer is pushed to the stack after the preamble, leaving the stack in an odd state for frame pointer unwinding.  Deal with this by marking a goroutine as synchronously preempted and using that signal to load the missing PC from the stack. On LR platforms this is available in gp.sched.lr. On non-LR platforms like x86, it's at gp.sched.sp, because there are no args, no locals, and no frame pointer pushed to the SP yet.  For #68090.  Change-Id: I73a1206d8b84eecb8a96dbe727195da30088f288 Reviewed-on: https://go-review.googlesource.com/c/go/+/684435 Reviewed-by: Cherry Mui <cherryyz@google.com> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Reviewed-by: Nick Ripley <nick.ripley@datadoghq.com>",47,9,56
golang/go,fdc076ce762326fc19ef1b6de01da6ce50f55926,Andy Nitschke,2025-06-10T15:09:35Z,"net/http: fix RoundTrip context cancellation for js/wasm  The existing js/wasm implementation of RoundTrip calls abort() on the fetch() call when the context is canceled but does not wait for for the resulting promise to be rejected. The result is the failure callback for the promise will be called at some later point in time when the promise rejection is handled. In some case this callback may be called after the Go program has exited resulting in ""Go program has already exited"" errors.  Fixes #57098  Change-Id: Ia37fd22cb9f667dbb0805ff5db0ceb8fdba7246b Reviewed-on: https://go-review.googlesource.com/c/go/+/680937 Reviewed-by: Damien Neil <dneil@google.com> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Reviewed-by: Dmitri Shuralyov <dmitshur@google.com>",8,0,8
golang/go,d9d2cadd635f3b8fdfba0ab6369604f5e78643b0,Joe Tsai,2025-06-27T01:18:32Z,encoding/json: fix typo in hotlink for jsontext.PreserveRawStrings  Updates #71845  Change-Id: Ie099e7ac77293696fd9e69559487e27f4b70ab3f Reviewed-on: https://go-review.googlesource.com/c/go/+/684416 Auto-Submit: Joseph Tsai <joetsai@digital-static.net> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Reviewed-by: Damien Neil <dneil@google.com> Reviewed-by: Dmitri Shuralyov <dmitshur@google.com>,1,1,2
golang/go,0f8ab2db177baee7b04182f5641693df3b212aa9,Cherry Mui,2025-06-26T19:46:31Z,"cmd/link: permit a larger size BSS reference to a smaller DATA symbol  Currently, if there is a BSS reference and a DATA symbol definition with the same name, we pick the DATA symbol, as it contains the right content. In this case, if the BSS reference has a larger size, we error out, because it is not safe to access a smaller symbol as if it has a larger size.  Sometimes code declares a global variable in Go and defines it in assembly with content. They are expected to be of the same size. However, in ASAN mode, we insert a red zone for the variable on the Go side, making it have a larger size, whereas the assembly symbol is unchanged. This causes the Go reference (BSS) has a larger size than the assembly definition (DATA). It results in an error currently. This code is valid and safe, so we should permit that.  We support this case by increasing the symbol size to match the larger size (of the BSS side). The symbol content (from the DATA side) is kept. In some sense, we merge the two symbols. When loading symbols, it is not easy to change its size (as the object file may be mapped read-only), so we add it to a fixup list, and fix it up later after all Go symbols are loaded. This is a very rare case, so the list should not be long.  We could limit this to just ASAN mode. But it seems okay to allow this in general. As long as the symbol has the larger size, it is safe to access it with the larger size.  Fixes #74314.  Change-Id: I3ee6e46161d8f59500e2b81befea11e563355a57 Reviewed-on: https://go-review.googlesource.com/c/go/+/684236 LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Reviewed-by: David Chase <drchase@google.com>",84,8,92
golang/go,988a20c8c5e2c9eb49f8749e5ee94ce3c964fe59,thepudds,2025-06-25T23:01:11Z,"cmd/compile/internal/escape: evaluate any side effects when rewriting with literals  CL 649035 and CL 649079 updated escape analysis to rewrite certain operands in OMAKE and OCONVIFACE nodes from non-constant expressions to basic literals that evaluate to the same value.  However, when doing that rewriting, we need to evaluate any side effects prior to replacing the expression, which is what this CL now does.  Issue #74379 reported a problem with OCONVIFACE nodes due to CL 649079. CL 649035 has essentially the same issue with OMAKE nodes. To illustrate that, we add a test for the OMAKE case in fixedbugs/issue74379b.go, which fails without this change. To avoid introducing an unnecessary temporary for OMAKE nodes, we also conditionalize the main work of CL 649035 on whether the OMAKE operand is already an OLITERAL.  CL 649555 and CL 649078 were related changes that created read-only global storage for composite literals used in an interface conversion. This CL adds a test in fixedbugs/issue74379c.go to illustrate that they do not have the same problem.  Updates #71359 Fixes #74379  Change-Id: I6645575ef34f1fe2b0241a22dc205875d66b7ada Reviewed-on: https://go-review.googlesource.com/c/go/+/684116 LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Reviewed-by: Keith Randall <khr@golang.org> Reviewed-by: Dmitri Shuralyov <dmitshur@google.com> Reviewed-by: Keith Randall <khr@google.com>",137,7,144
golang/go,b5d555991ab73e06e09741952a66dd7eeaf2a185,Joe Tsai,2025-06-25T03:35:36Z,encoding/json/jsontext: remove Encoder.UnusedBuffer  WARNING: This commit contains a breaking change. This is permissible since jsontext is experimental and not subject to the Go 1 compatibility agreement.  Existing callers of UnusedBuffer should use AvailableBuffer instead.  Updates #71497  Change-Id: Ib080caf306d545a8fb038e57f0817b18dd0f91cf Reviewed-on: https://go-review.googlesource.com/c/go/+/683897 LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Reviewed-by: Dmitri Shuralyov <dmitshur@google.com> Reviewed-by: Johan Brandhorst-Satzkorn <johan.brandhorst@gmail.com> Reviewed-by: Damien Neil <dneil@google.com> Auto-Submit: Joseph Tsai <joetsai@digital-static.net>,0,5,5
golang/go,0b4d2eab2f7a20917639f0025de39ce9f0198d9f,Joe Tsai,2025-06-25T03:30:29Z,encoding/json/jsontext: rename Encoder.UnusedBuffer as Encoder.AvailableBuffer  This follows the precedent set by:  	bufio.Writer.AvailableBuffer 	bytes.Buffer.AvailableBuffer  both with methods that return a zero-length buffer that is intended to only be used with a following Write call.  This keeps the older UnusedBuffer method around so that at least one commit that has both methods for migration purposes.  Updates #71497  Change-Id: I3815f593e09f645280ae5ad9cbdd63a6c147123b Reviewed-on: https://go-review.googlesource.com/c/go/+/683896 Reviewed-by: Damien Neil <dneil@google.com> TryBot-Bypass: Dmitri Shuralyov <dmitshur@google.com> Reviewed-by: Johan Brandhorst-Satzkorn <johan.brandhorst@gmail.com> Reviewed-by: Dmitri Shuralyov <dmitshur@google.com>,17,12,29
golang/go,f8ccda2e0574c9ca5d92068852a34b463f87a85b,Michael Anthony Knyszek,2025-06-25T15:47:05Z,"runtime: make explicit nil check in (*spanInlineMarkBits).init  The hugo binary gets slower, potentially dramatically so, with GOEXPERIMENT=greenteagc. The root cause is page mapping churn. The Green Tea code introduced a new implicit nil check on value in a freshly-allocated span to clear some new heap metadata. This nil check would read the fresh memory, causing Linux to back that virtual address space with an RO page. This would then be almost immediately written to, causing Linux to possibly flush the TLB and find memory to replace that read-only page (likely deduplicated as just the zero page).  This CL fixes the issue by replacing the implicit nil check, which is a memory read expected to fault if it's truly nil, with an explicit one. The explicit nil check is a branch, and thus makes no reads to memory. The result is that the hugo binary no longer gets slower.  No regression test because it doesn't seem possible without access to OS internals, like Linux tracepoints. We briefly experimented with RSS metrics, but they're inconsistent. Some system RSS metrics count the deduplicated zero page, while others (like those produced by /proc/self/smaps) do not.  Instead, we'll add a new benchmark to our benchmark suite, separately.  For #73581. Fixes #74375.  Change-Id: I708321c14749a94ccff55072663012eba18b3b91 Reviewed-on: https://go-review.googlesource.com/c/go/+/684015 Reviewed-by: Keith Randall <khr@golang.org> Reviewed-by: Michael Pratt <mpratt@google.com> Auto-Submit: Michael Knyszek <mknyszek@google.com> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Reviewed-by: Keith Randall <khr@google.com>",20,0,20
golang/go,f069a8299876f9987a01a8d4a664d2a887bd5efc,Michael Pratt,2025-06-24T20:33:10Z,"runtime: note custom GOMAXPROCS even if value doesn't change  When an application calls runtime.GOMAXPROCS(runtime.GOMAXPROCS(0)), the runtime does not need to change the actual GOMAXPROCS value (via STW). However, this call must still transition from ""automatic"" to ""custom"" GOMAXPROCS state, thus disabling background updates.  Thus this case shouldn't return quite as early as it currently does.  Change-Id: I6a6a636c42f73996532bd9f7beb95e933256c9e7 Reviewed-on: https://go-review.googlesource.com/c/go/+/683815 Reviewed-by: Michael Knyszek <mknyszek@google.com> Reviewed-by: Carlos Amedee <carlos@golang.org> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Auto-Submit: Michael Pratt <mpratt@google.com>",21,1,22
golang/go,e515ef8bc271f632bb2ebb94e8e700ab67274268,Werner Spiegel,2025-06-24T23:46:06Z,context: fix typo in context_test.go  Change-Id: Iee90ce7965eec4074fcb81a34968591877a062d3 GitHub-Last-Rev: f18fd099e490b130affa298bfc40da27ac589b26 GitHub-Pull-Request: golang/go#74360 Reviewed-on: https://go-review.googlesource.com/c/go/+/683675 Auto-Submit: Dmitri Shuralyov <dmitshur@golang.org> Reviewed-by: Dmitri Shuralyov <dmitshur@google.com> TryBot-Bypass: Dmitri Shuralyov <dmitshur@golang.org> Reviewed-by: Damien Neil <dneil@google.com>,1,1,2
golang/go,47b941f445f0a839e826b81a5394d30934821500,Cherry Mui,2025-06-13T19:07:24Z,cmd/link: add one more linkname to the blocklist  I missed one in the previous CL.  Change-Id: I448a871523d7fb8f429b4482839d7f101ea003b6 Reviewed-on: https://go-review.googlesource.com/c/go/+/681497 Reviewed-by: David Chase <drchase@google.com> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com>,1,0,1
golang/go,34cf5f6205c97eccca4fee5a33deca9d6b05e7b3,Rob Findley,2025-06-24T00:38:37Z,go/types: add test for interface method field type  Add a test that would have detected the regression in #74303: interface method fields should have a recorded type.  For #74303  Change-Id: Ide5df51cd71c38809c364bb4f95950163ecefb66 Reviewed-on: https://go-review.googlesource.com/c/go/+/683595 LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Reviewed-by: Alan Donovan <adonovan@google.com> Auto-Submit: Robert Findley <rfindley@google.com>,10,0,10
golang/go,6e618cd42a1adb58fa04f7a9f6e89a563ccb07f1,Joe Tsai,2023-09-04T19:14:13Z,"encoding/json: use zstd compressed testdata  There is a non-public zstd decoder in the stdlib (CL 473356) and also zstd compressed testdata already present.  Delete testdata/code.json.gz and instead use internal/jsontest/testdata/golang_source.json.zst, which has exactly the same content: 	$ cat internal/jsontest/testdata/golang_source.json.zst | zstd -d | sha1sum 	3f70b6fd429f4aba3e8e1c3e5a294c8f2e219a6e  - 	$ cat testdata/code.json.gz | zstd -d | sha1sum 	3f70b6fd429f4aba3e8e1c3e5a294c8f2e219a6e  -  This will reduce the size of the final Go release by 118KB.  Updates #71845  Change-Id: I6da2df27bd260befc0a44c6bc0255365be0a5b0f Reviewed-on: https://go-review.googlesource.com/c/go/+/525516 Auto-Submit: Damien Neil <dneil@google.com> Reviewed-by: Damien Neil <dneil@google.com> Reviewed-by: Dmitri Shuralyov <dmitshur@google.com> Reviewed-by: Dmitri Shuralyov <dmitshur@golang.org> TryBot-Bypass: Damien Neil <dneil@google.com>",3,6,9
golang/go,fcb985085925e1d89511ef7523215a2f71cfb891,Julien Cretel,2025-06-23T16:19:19Z,"net/http: reduce allocs in CrossOriginProtection.Check  Rather than repeatedly creating error values on CrossOriginProtection.Check's unhappy paths, return non-exported and effectively constant error variables.  For #73626.  Change-Id: Ibaa036c29417071b3601b8d200ab0902359d1bb9 GitHub-Last-Rev: e704d63cd63665845d544796e802134ea608e217 GitHub-Pull-Request: golang/go#74251 Reviewed-on: https://go-review.googlesource.com/c/go/+/681178 Reviewed-by: Sean Liao <sean@liao.dev> Reviewed-by: qiu laidongfeng2 <2645477756@qq.com> Reviewed-by: Junyang Shao <shaojunyang@google.com> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Reviewed-by: Dmitri Shuralyov <dmitshur@google.com>",8,3,11
golang/go,11f11f2a00aa3149a6ea69a50e7b7b429cf368b7,Joe Tsai,2025-06-19T01:35:36Z,"encoding/json/v2: support ISO 8601 durations  Based on the discussion in #71631, it is hotly contested whether the default JSON representation for a Go time.Duration should be the time.Duration.String format or a particular profile of ISO 8601. Regardless of the default, it seems clear that we should at least support ISO 8601 if specified via a format flag. Note that this CL does not alter the default representation.  Unfortunately, ISO 8601 is a large and evolving standard with many optional extensions and optional restrictions. Thus, the term ""ISO 8601 duration"" unfortunately does not resolve to a particular grammar, nor one that is stable.  However, there is precedence that we can follow in this matter. JSON finds its heritage in JavaScript and JavaScript is adding a Temporal.Duration type whose default JSON representation is ISO 8601. There is a well-specified grammar for their particular profile of ISO 8601, which is documented at:     https://tc39.es/proposal-temporal/#prod-Duration  This particular CL adds support for ISO 8601 according to the exact same grammar that JavaScript uses. While Temporal.Duration is technically still a proposal, it is already in stage 3 of the TC39 proposal process (i.e., ""no changes to the proposal are expected"" and ""has been recommended for implementation"") and therefore close to final adoption.  One major concern with ISO 8601 is that it supports nominal date units like years, months, weeks, and days that do not have an accurate meaning without being anchored to a particular point in time and place on Earth.  Fortunately, JavaScript (by default) avoids producing Temporal.Duration values with nominal units unless arithmetic in JavaScript explicitly sets a largestUnits value that is larger than ""hours"". In the Go implementation, we support syntactically parsing the full ISO 8601 grammar (according to JavaScript), but semantically report an error if nominal units are present. This ensures that ISO 8601 durations remain accurate so long as they only use the accurate units of hours, minutes, or seconds.  Updates #71631  Change-Id: I983593662f2150461ebc486a5acfeb72f0286939 Reviewed-on: https://go-review.googlesource.com/c/go/+/682403 Reviewed-by: Daniel MartÃ­ <mvdan@mvdan.cc> Reviewed-by: Damien Neil <dneil@google.com> Auto-Submit: Joseph Tsai <joetsai@digital-static.net> Reviewed-by: Dmitri Shuralyov <dmitshur@google.com> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com>",456,158,614
golang/go,62deaf4fb839a6e152fc832c2c71325215e55831,yuuji.yaginuma,2025-06-16T22:15:04Z,doc: fix links to runtime Environment Variables  Change-Id: I9e8ecc5e4f4cba0b09008b2b0d9d3f8842687ec3 GitHub-Last-Rev: e0ddaaed3875761a1ff3692af49c0ec2622a5e20 GitHub-Pull-Request: golang/go#74180 Reviewed-on: https://go-review.googlesource.com/c/go/+/681516 Reviewed-by: Dmitri Shuralyov <dmitshur@google.com> Reviewed-by: Junyang Shao <shaojunyang@google.com> Reviewed-by: Sean Liao <sean@liao.dev> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Auto-Submit: Sean Liao <sean@liao.dev>,3,3,6
golang/go,2e9bb62bfed92ef24a6744fbdc3cf24eb672cd56,Joe Tsai,2025-06-22T04:27:09Z,"encoding/json/v2: reject unquoted dash as a JSON field name  In this blog:  	https://blog.trailofbits.com/2025/06/17/unexpected-security-footguns-in-gos-parsers/  the concern was raised that whenever ""-"" is combined with other options, the ""-"" is intepreted as as a name, rather than an ignored field, which may go contrary to user expectation.  Static analysis demonstrates that there are ~2k instances of `json:""-,omitempty"" in the wild, where almost all of them intended for the field to be ignored.  To prevent this footgun, reject any tags that has ""-,"" as a prefix and warn the user to choose one of the reasonable alternatives.  The documentation of json/v2 already suggests `json:""'-'""` as the recommended way to explicitly specify dash as the name. See Example_fieldNames for example usages of the single-quoted literal.  Update the v1 json documentation to suggest the same thing.  Updates #71497  Change-Id: I7687b6eecdf82a5d894d057c78a4a90af4f5a6e4 Reviewed-on: https://go-review.googlesource.com/c/go/+/683175 LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Reviewed-by: Johan Brandhorst-Satzkorn <johan.brandhorst@gmail.com> Reviewed-by: Damien Neil <dneil@google.com> Auto-Submit: Joseph Tsai <joetsai@digital-static.net> Reviewed-by: Daniel MartÃ­ <mvdan@mvdan.cc> Reviewed-by: Dmitri Shuralyov <dmitshur@google.com>",68,2,70
golang/go,ed7815726db4a0eb904d7cae2532cde48348d7ff,Joe Tsai,2025-06-17T19:34:22Z,"encoding/json/v2: report error on time.Duration without explicit format  The default representation of a time.Duration is still undecided. In order to keep the future open, report an error on a time.Duration without an explicit format flag provided.  Updates #71631  Change-Id: I08248404ff6551723851417c8188a13f53c61937 Reviewed-on: https://go-review.googlesource.com/c/go/+/682455 Auto-Submit: Joseph Tsai <joetsai@digital-static.net> Reviewed-by: Dmitri Shuralyov <dmitshur@google.com> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Reviewed-by: Damien Neil <dneil@google.com>",39,25,64
golang/go,f866958246556ec609b81d31376a39efe9d51a51,Joe Tsai,2025-06-23T23:36:25Z,"cmd/dist: test encoding/json/... with GOEXPERIMENT=jsonv2  This also updates wasip1_wasm to use a 8MiB stack, which is the same stack size as what is used by go_js_wasm_exec. The increase of stack size is necessary because the jsonv2 tests exercise that the jsonv2 and jsontext packages support a hard limit of a maximum JSON nesting depth of 10000. However, even with a depth limit of 10000, this still exceeds the previously specified maximum stack size of 1 MiB.  For use of JSON with untrusted inputs in WASM, we really need to support #56733 as there is no right answer for the default max depth limit to use since the max wasm stack size is determined on a per-system basis.  Updates #71845  Change-Id: I3b32c58cc9f594a5c59bb3e4b20f5e86d85d8209 Reviewed-on: https://go-review.googlesource.com/c/go/+/683575 Reviewed-by: Dmitri Shuralyov <dmitshur@google.com> Reviewed-by: Dmitri Shuralyov <dmitshur@golang.org> Reviewed-by: Johan Brandhorst-Satzkorn <johan.brandhorst@gmail.com> Reviewed-by: Damien Neil <dneil@google.com> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com>",10,1,11
golang/go,f77a0aa6b6d90742932f0bf29d2f94459597331a,Michael Anthony Knyszek,2025-06-23T20:14:18Z,"internal/trace: improve gc-stress test  The gc-stress test is useful for trying to exercise GC-related trace events by producing a lot of them in many different situations. Unfortunately this test is flaky, because allocating in a loop can easily out-run the GC when it's trying to preempt the allocating goroutine.  It's been a long standing problem that a program that allocates in a loop can outrun a GC. The problem isn't the GC persay, it's consistently correlated with a high STW time (likely a high 'stopping' time, not a 'stopped' time), suggesting that in the window of time when the garbage collector is trying to stop all goroutines, they continue to allocate.  This should probably be fixed in general, but for now, let's focus on this flaky test.  This CL changes the gc-stress test to (1) set a memory limit and (2) do more work in between allocations. (2) is really what makes things less flaky, but (2) unfortunately also means the GC is less exercised. That's where (1) comes in. By setting a low memory limit, we increase GC activity (in particular, assist activity). The memory limit also helps prevent the heap from totally blowing up due to the heap goal inflating from floating garbage, but it's not perfect.  After this change, under stress2, this test exceeds a heap size of 500 MiB only 1 in 5000 runs on my 64-vCPU VM. Before this change, it got that big about 1/4th of the time.  Fixes #74052.  Change-Id: I49233c914c8b65b1d593d3953891fddda6685aec Reviewed-on: https://go-review.googlesource.com/c/go/+/683515 Reviewed-by: Carlos Amedee <carlos@golang.org> Auto-Submit: Michael Knyszek <mknyszek@google.com> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com>",22,3,25
golang/go,4506796a6ebee9799dd6272c0fb12c7b993631e2,Joe Tsai,2025-06-21T17:51:08Z,"encoding/json/jsontext: consistently use JSON terminology  RFC 8259, section 2 uses the term ""begin-array"" amd ""begin-object"" rather than ""start array"" or ""start object"". Be consistent in our documentation.  Change-Id: I172eb354c5e64b84c74bd662b1e581424e719a32 Reviewed-on: https://go-review.googlesource.com/c/go/+/683155 Auto-Submit: Joseph Tsai <joetsai@digital-static.net> Reviewed-by: Damien Neil <dneil@google.com> Reviewed-by: Dmitri Shuralyov <dmitshur@google.com> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Reviewed-by: Johan Brandhorst-Satzkorn <johan.brandhorst@gmail.com>",10,10,20
golang/go,456a90aa1618a6c3aa49ecba46969128e2bfa26f,Cherry Mui,2025-06-22T19:01:27Z,"runtime: add missing unlock in sysReserveAlignedSbrk  sysReserveAlignedSbrk locks memlock at entry, but it is not unlocked at one of the return path. Add the missing unlock.  Fixes #74339.  Change-Id: Ib641bc348aca41494ec410e2c4eb9857f3362484 Reviewed-on: https://go-review.googlesource.com/c/go/+/683295 LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Reviewed-by: David Chase <drchase@google.com> Reviewed-by: Michael Knyszek <mknyszek@google.com>",1,0,1
golang/go,1cf6386b5ee1ba7d367b6456c2c6888ab68c3ec8,Robert Findley,2025-06-23T14:04:06Z,"Revert ""go/types, types2: don't register interface methods in Info.Types map""  This reverts commit 4ac729283c807cdbe0f6c7041f21606019b722cf.  Reason for revert: changes semantics of types.Info.TypeOf; introduces new inconsistency around FieldList types.  For #74303  Change-Id: Ib99558c95f1b615fa9a02b028500ed230c8bb185 Reviewed-on: https://go-review.googlesource.com/c/go/+/683297 LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Auto-Submit: Robert Findley <rfindley@google.com> Reviewed-by: Alan Donovan <adonovan@google.com>",16,20,36
golang/go,49cdf0c42e320dfed044baa551610f081eafb781,Damien Neil,2025-06-20T13:44:09Z,"testing, testing/synctest: handle T.Helper in synctest bubbles  Fixes #74199  Change-Id: I6a15fbd59a3a3f8c496440f56d09d695e1504e4e Reviewed-on: https://go-review.googlesource.com/c/go/+/682576 LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Reviewed-by: Alan Donovan <adonovan@google.com> Auto-Submit: Damien Neil <dneil@google.com>",30,0,30
golang/go,3bf1eecbd30f48851c35f608aa265c978b2cf301,cuishuang,2025-06-14T11:37:47Z,runtime: fix struct comment  Change-Id: I0c33830b13c8a187ac82504c7653abb8f8cf7530 Reviewed-on: https://go-review.googlesource.com/c/go/+/681655 Reviewed-by: Sean Liao <sean@liao.dev> Reviewed-by: Junyang Shao <shaojunyang@google.com> Reviewed-by: Michael Knyszek <mknyszek@google.com> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Auto-Submit: Sean Liao <sean@liao.dev>,4,2,6
golang/go,8ed23a2936dc5f3cf070c52043dcc0e92563e62b,Sean Liao,2025-06-20T11:04:22Z,crypto/cipher: fix link to crypto/aes  Fixes #74309  Change-Id: I4d97514355d825124a8d879c2590b45b039f5fd1 Reviewed-on: https://go-review.googlesource.com/c/go/+/682596 Reviewed-by: Daniel McCarney <daniel@binaryparadox.net> Reviewed-by: Junyang Shao <shaojunyang@google.com> Reviewed-by: Cherry Mui <cherryyz@google.com> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com>,1,1,2
golang/go,ef60769b46c5ef796876c6b4407562646fb27d15,Adam Bender,2025-06-12T04:24:20Z,"go/doc: add a golden test that reproduces #62640  For #62640. For #61394.  This is a copy of https://go-review.googlesource.com/c/go/+/528402, which has stalled in review and the owner is no longer working on Go.  Change-Id: Ic7a1ae65c70d4857ab1061ccae1a926bf5c4ff55 Reviewed-on: https://go-review.googlesource.com/c/go/+/681235 LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Reviewed-by: Robert Griesemer <gri@google.com> Auto-Submit: Robert Griesemer <gri@google.com> Reviewed-by: Junyang Shao <shaojunyang@google.com>",84,0,84
golang/go,8552bcf7c261cd150d0074c4ec7e2412b20af0a5,Michael Pratt,2025-06-11T20:46:21Z,"cmd/go/internal/fips140: ignore GOEXPERIMENT on error  During toolchain selection, the GOEXPERIMENT value may not be valid for the current version (but it is valid for the selected version). In this case, cfg.ExperimentErr is set and cfg.Experiment is nil.  Normally cmd/go main exits when ExperimentErr is set, so Experiment is ~never nil. But that is skipped during toolchain selection, and fips140.Init is used during toolchain selection.  Fixes #74111.  Change-Id: I6a6a636c65ee5831feaf3d29993a60613bbec6f2 Reviewed-on: https://go-review.googlesource.com/c/go/+/680976 LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Reviewed-by: Michael Matloob <matloob@golang.org> Reviewed-by: Junyang Shao <shaojunyang@google.com> Auto-Submit: Michael Pratt <mpratt@google.com>",5,1,6
golang/go,4c7567290ced9c4dc629f2386f2eebfebba95ce6,Michael Anthony Knyszek,2025-06-18T17:42:16Z,"runtime: set mspan limit field early and eagerly  Currently the mspan limit field is set after allocSpan returns, *after* the span has already been published to the GC (including the conservative scanner). But the limit field is load-bearing, because it's checked to filter out invalid pointers. A stale limit value could cause a crash by having the conservative scanner access allocBits out of bounds.  Fix this by setting the mspan limit field before publishing the span. For large objects and arena chunks, we adjust the limit down after allocSpan because we don't have access to the true object's size from allocSpan. However this is safe, since we first initialize the limit to something definitely safe (the actual span bounds) and only adjust it down after. Adjusting it down has the benefit of more precise debug output, but the window in which it's imprecise is also fine because a single object (logically, with arena chunks) occupies the whole span, so the 'invalid' part of the memory will just safely point back to that object. We can't do this for smaller objects because the limit will include space that does *not* contain any valid objects.  Fixes #74288.  Change-Id: I0a22e5b9bccc1bfdf51d2b73ea7130f1b99c0c7c Reviewed-on: https://go-review.googlesource.com/c/go/+/682655 Reviewed-by: Keith Randall <khr@google.com> Auto-Submit: Michael Knyszek <mknyszek@google.com> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Reviewed-by: Keith Randall <khr@golang.org>",21,5,26
golang/go,c6ac7362888c25dd1251adaa11e1503cf78ec26d,Michael Anthony Knyszek,2025-06-14T02:45:08Z,"runtime: prevent mutual deadlock between GC stopTheWorld and suspendG  Almost everywhere we stop the world we casGToWaitingForGC to prevent mutual deadlock with the GC trying to scan our stack. This historically was only necessary if we weren't stopping the world to change the GC phase, because what we were worried about was mutual deadlock with mark workers' use of suspendG. And, they were the only users of suspendG.  In Go 1.22 this changed. The execution tracer began using suspendG, too. This leads to the possibility of mutual deadlock between the execution tracer and a goroutine trying to start or end the GC mark phase. The fix is simple: make the stop-the-world calls for the GC also call casGToWaitingForGC. This way, suspendG is guaranteed to make progress in this circumstance, and once it completes, the stop-the-world can complete as well.  We can take this a step further, though, and move casGToWaitingForGC into stopTheWorldWithSema, since there's no longer really a place we can afford to skip this detail.  While we're here, rename casGToWaitingForGC to casGToWaitingForSuspendG, since the GC is now not the only potential source of mutual deadlock.  Fixes #72740.  Change-Id: I5e3739a463ef3e8173ad33c531e696e46260692f Reviewed-on: https://go-review.googlesource.com/c/go/+/681501 Reviewed-by: Carlos Amedee <carlos@golang.org> Auto-Submit: Michael Knyszek <mknyszek@google.com> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Reviewed-by: Cherry Mui <cherryyz@google.com>",65,45,110
golang/go,53af292aed21c3f6ea75d16e5b25f660b2c028fb,Kevin Burke,2025-06-16T05:51:57Z,encoding/json/jsontext: fix spelling error  Change-Id: Ic1f385afbe35addba8b3c439ccb64c56b1d300c9 Reviewed-on: https://go-review.googlesource.com/c/go/+/681795 Reviewed-by: Sean Liao <sean@liao.dev> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Reviewed-by: Joseph Tsai <joetsai@digital-static.net> Reviewed-by: Junyang Shao <shaojunyang@google.com> Reviewed-by: Cherry Mui <cherryyz@google.com>,1,1,2
golang/go,d05825468921f8d0e54c81f59330d3b263057a54,Michael Anthony Knyszek,2025-06-16T16:31:10Z,"cmd/dist: always include variant in package names  Our attempt to evenly distribute tests across shards struggles a bit because certain long-running targets are very difficult to distinguish in ResultDB, namely racebench and the test directory tests. These are the only tests where the JSON output from dist omits the variant from the package, making it impossible to distinguish them in the test result data. My current suspicion is that this is preventing the load balancing from being effective for the race builders in particular, though I worry the longtest builders have a similar situation with the test directory tests.  For #65814.  Change-Id: I5804c2af092ff9aa4a3f0f6897b4a57c4628f837 Reviewed-on: https://go-review.googlesource.com/c/go/+/681955 Reviewed-by: Dmitri Shuralyov <dmitshur@golang.org> TryBot-Bypass: Michael Knyszek <mknyszek@google.com> Reviewed-by: Dmitri Shuralyov <dmitshur@google.com>",14,4,18
golang/go,3254c2bb8308690a88a9f62b7f51c84d80325e79,Keith Randall,2025-06-14T23:38:26Z,internal/reflectlite: fix comment about meaning of flag field  Copied current (presumably correct) comment text from reflect package.  Change-Id: I19582b3675fbcb96a925002498d24ad2b7bc6178 Reviewed-on: https://go-review.googlesource.com/c/go/+/681935 Reviewed-by: Keith Randall <khr@google.com> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Reviewed-by: David Chase <drchase@google.com>,9,7,16
golang/go,816199e421f743324e9c1c82bda22d1d0f53845c,Michael Anthony Knyszek,2025-06-10T21:44:56Z,"runtime: don't let readTrace spin on trace.shutdown  Issue #74045 describes a scenario in which gopark is inlined into readTrace, such that there are no preemption points. This is only a problem because readTrace spins if trace.shutdown is set, through traceReaderAvailable. However, trace.shutdown is almost certainly overkill for traceReaderAvailable. The first condition, checking whether the reader gen and the flushed gen match, should be sufficient to ensure the reader wakes up and finishes flushing all buffers. The first condition is also safe because it guarantees progress. In the case of shutdown, all the trace work that will be flushed has been flushed, and so the trace reader will exit into a regular goroutine context when it's finished. If not shutting down, then the trace reader will release doneSema, increase readerGen, and then the gopark unlockf will let it block until new work actually comes in.  Fixes #74045.  Change-Id: Id9b15c277cb731618488771bd484577341b68675 Reviewed-on: https://go-review.googlesource.com/c/go/+/680738 LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Reviewed-by: Nick Ripley <nick.ripley@datadoghq.com> Reviewed-by: Michael Pratt <mpratt@google.com> Auto-Submit: Michael Knyszek <mknyszek@google.com>",2,4,6
golang/go,ea00461b17c7579d1c9aff2398953b61747ce642,Michael Anthony Knyszek,2025-06-11T21:35:29Z,"internal/trace: make Value follow reflect conventions  A previous change renamed Value.Uint64 to Value.ToUint64 to accomodate string values. The method for a string value is then Value.ToString, while the method for a debug string (for example, for fmt) is just called String, as per fmt.Stringer.  This change follows a request from Dominik Honnef, maintainer of gotraceui, to make Value follow the conventions of the reflect package. The Value type there has a method String which fulfills both purposes: getting the string for a String Value, and as fmt.Stringer. It's not exactly pretty, but it does make sense to just stick to convention.  Change-Id: I55b364be88088d2121527bffc833ef03dbdb9764 Reviewed-on: https://go-review.googlesource.com/c/go/+/680978 Reviewed-by: Florian Lehner <lehner.florian86@gmail.com> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Reviewed-by: Carlos Amedee <carlos@golang.org>",23,26,49
golang/go,96a6e147b2b02b1f070d559cb2c8e1c25c9b78c3,Cherry Mui,2025-06-13T15:45:23Z,runtime: comment that some linknames are used by runtime/trace  Change-Id: I118d1ee09dfd6fd0075f9e5eeeb54441328bff4d Reviewed-on: https://go-review.googlesource.com/c/go/+/681495 Reviewed-by: Michael Knyszek <mknyszek@google.com> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Reviewed-by: Carlos Amedee <carlos@golang.org>,2,2,4
golang/go,644905891fe02b5426f026297c6aff008fa5c735,Cherry Mui,2025-06-13T15:39:00Z,"runtime: remove unused unique.runtime_blockUntilEmptyFinalizerQueue  It was added in CL 650256, and then the use in the unique package was removed in CL 650697.  Change-Id: Id95f5dff7e11a2dc3eb544fda2586a305d3d91ab Reviewed-on: https://go-review.googlesource.com/c/go/+/681476 LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Reviewed-by: Michael Knyszek <mknyszek@google.com>",0,5,5
golang/go,683810a36805cd81e59be9984001bd0f604b6024,Cherry Mui,2025-06-13T15:31:06Z,cmd/link: block new standard library linknames  In Go 1.25 we added a number of new linknames for standard library internal uses. Add them to the linker's blocklist to keep them internal.  Change-Id: I5b6051a669b7ff132a1d2c05deefbbf74701c5d5 Reviewed-on: https://go-review.googlesource.com/c/go/+/681475 Reviewed-by: Michael Knyszek <mknyszek@google.com> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com>,16,1,17
golang/go,9149876112facc113d77d2c65e1590184c57d0c2,Alberto Donizetti,2025-06-12T08:19:28Z,"all: replace a few user-visible mentions of golang.org and godoc.org  This change replaces a few user-visible mentions of golang.org and godoc.org with go.dev and pkg.go.dev, respectively. Non-user-visible mentions (e.g. in test scripts) were left untouched.  Change-Id: I5d828edcd618b6c55243d0dfcadc6fa1ce9422ce Reviewed-on: https://go-review.googlesource.com/c/go/+/681255 Reviewed-by: Cherry Mui <cherryyz@google.com> Reviewed-by: Dmitri Shuralyov <dmitshur@golang.org> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Reviewed-by: Dmitri Shuralyov <dmitshur@google.com>",3,3,6
golang/go,934d5f2cf703c6aad9f0ce6a73a3922d1af83049,Michael Anthony Knyszek,2025-06-11T21:20:05Z,internal/trace: end test programs with SIGQUIT  This change switches from using testenv.Command to testenv.CommandContext which is a little bit friendlier. It also switches away from using 'go run' to 'go build' and running the resulting binary explicitly. This helps eliminate any questions about signal handling and propagation.  For #72740.  Change-Id: Ife8010da89a7bc439e061fe0c9c6b1f5620d90f1 Reviewed-on: https://go-review.googlesource.com/c/go/+/680977 Reviewed-by: Carlos Amedee <carlos@golang.org> TryBot-Bypass: Michael Knyszek <mknyszek@google.com>,22,5,27
golang/go,5a08865de339b5eeb8ad1c52635ea8ba505aafec,Cherry Mui,2025-06-09T20:59:00Z,net: remove some BUG entries  A few methods that were not implemented on Windows are implemented in CL 668195.  Change-Id: I35423792a5af00f29fcd24e56a6dfcf013669371 Reviewed-on: https://go-review.googlesource.com/c/go/+/680180 Reviewed-by: Quim Muntal <quimmuntal@gmail.com> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Reviewed-by: Carlos Amedee <carlos@golang.org>,1,7,8
golang/go,d166a0b03e88e3ffe17a5bee4e5405b5091573c6,Damien Neil,2025-06-10T20:55:09Z,"encoding/json/jsontext, encoding/json/v2: document experimental nature  Change-Id: I7b2c391749e0113e006f37b2ac1ebfe3ee0a4e0e Reviewed-on: https://go-review.googlesource.com/c/go/+/680715 TryBot-Bypass: Damien Neil <dneil@google.com> Reviewed-by: Cherry Mui <cherryyz@google.com> Reviewed-by: Joseph Tsai <joetsai@digital-static.net> Auto-Submit: Damien Neil <dneil@google.com>",10,0,10
golang/go,d4c6effaa7b95a2ea149ece4a400c0ace2773839,David Chase,2025-06-10T18:15:46Z,"cmd/compile: add up-to-date test for generated files  This runs the ssa/_gen generator writing files into a temporary directory, and then checks that there are no differences with what is currently in the ssa directory, and also checks that any file with the ""generated from _gen/..."" header was actually generated, and checks that the headers on the generated file match the expected header prefix.  Change-Id: Ic8eeb0b06cf6f2e576a013e865b331a12d3a77aa Reviewed-on: https://go-review.googlesource.com/c/go/+/680615 LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Reviewed-by: Keith Randall <khr@golang.org> Reviewed-by: Keith Randall <khr@google.com>",1848,3,1851
golang/go,7fa2c736b3dbcc741b4575f4df758532aaee34f7,Damien Neil,2025-06-05T21:27:45Z,"os: disallow Root.Remove(""."") on Plan 9, js, and Windows  Windows already forbids this, since removing the root causes a sharing violation (can't delete the directory while the os.Root has a handle open to it), but add a more explicit check for attempts to delete ""."" and return EINVAL.  Note that this change to Windows doesn't affect operations like Root.Remove(""dir/.""), since the path is cleaned into just ""dir"" before attempting the deletion.  Fixes #73863  Change-Id: I0f45ccb6c9f171d3a52831632c134150388d77b6 Reviewed-on: https://go-review.googlesource.com/c/go/+/679377 Auto-Submit: Damien Neil <dneil@google.com> Reviewed-by: Alan Donovan <adonovan@google.com> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com>",12,0,12
golang/go,281cfcfc1b15fbb87fd32660b0a1d50be996d108,Michael Anthony Knyszek,2025-06-10T16:42:59Z,"runtime: handle system goroutines later in goroutine profiling  Before CL 650697, there was only one system goroutine that could dynamically change between being a user goroutine and a system goroutine, and that was the finalizer/cleanup goroutine. In goroutine profiles, it was handled explicitly. It's status would be checked during the first STW, and its stack would be recorded. This let the goroutine profiler completely ignore system goroutines once the world was started again.  CL 650697 added dedicated cleanup goroutines (there may be more than one), and with this, the logic for finalizer goroutines no longer scaled. In that CL, I let the isSystemGoroutine check be dynamic and dropped the special case, but this was based on incorrect assumptions. Namely, it's possible for the scheduler to observe, for example, the finalizer goroutine as a system goroutine and ignore it, but then later the goroutine profiler itself sees it as a user goroutine. At that point it's too late and already running. This violates the invariant of the goroutine profile that all goroutines are handled by the profiler before they start executing. In practice, the result is that the goroutine profiler can crash when it checks this invariant (not checking the invariant means racily reading goroutine stack memory).  The root cause of the problem is that these system goroutines do not participate in the goroutine profiler's state machine. Normally, when profiling, goroutines transition from 'absent' to 'in-progress' to 'satisfied'. However with system goroutines, the state machine is ignored entirely. They always stay in the 'absent' state. This means that if a goroutine transitions from system to user, it is eligible for a profile record when it shouldn't be. That transition shouldn't be allowed to occur with respect to the goroutine profiler, because the goroutine profiler is trying to snapshot the state of every goroutine.  The fix to this problem is simple: don't ignore system goroutines. Let them participate in the goroutine profile state machine. Instead, decide whether or not to record the stack after the goroutine has been acquired for goroutine profiling. This means if the scheduler observes the finalizer goroutine as a system goroutine, it will get promoted in the goroutine profiler's state machine, and no other part of the goroutine profiler will observe the goroutine again. Simultaneously, the stack record for the goroutine will be correctly skipped.  Fixes #74090.  Change-Id: Icb9a164a033be22aaa942d19e828e895f700ca74 Reviewed-on: https://go-review.googlesource.com/c/go/+/680477 Reviewed-by: Carlos Amedee <carlos@golang.org> Auto-Submit: Michael Knyszek <mknyszek@google.com> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com>",50,4,54
golang/go,4f86f2267167a63b673c4a2a2994e008b32c90ea,Damien Neil,2025-06-05T20:47:06Z,"testing/synctest, runtime: avoid panic when using linker-alloc WG from bubble  We associate WaitGroups with synctest bubbles by attaching a special to the WaitGroup. It is not possible to attach a special to a linker-allocated value, such as:      var wg sync.WaitGroup  Avoid panicking when accessing a linker-allocated WaitGroup from a bubble. We have no way to associate these WaitGroups with a bubble, so just treat them as always unbubbled. This is probably fine, since the WaitGroup was always created outside the bubble in this case.  Fixes #74005  Change-Id: Ic71514b0b8d0cecd62e45cc929ffcbeb16f54a55 Reviewed-on: https://go-review.googlesource.com/c/go/+/679695 Reviewed-by: Michael Knyszek <mknyszek@google.com> Auto-Submit: Damien Neil <dneil@google.com> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com>",97,17,114
golang/go,773701a853a3105696c59c2b92b2eff35e0e055b,Michael Anthony Knyszek,2025-06-09T22:54:54Z,"internal/trace: pass GOTRACEBACK=crash to testprogs  The failures in #70310 are hard to decipher. The cases where the lock is being held either don't really make sense (the STW failures) or the goroutine that fails is 'running on another thread' and we don't get a stack trace. In fact, such a goroutine exists even in the STW cases. Since reproducing this is going to be hard (very few failures over a 2 year span) let's set GOTRACEBACK=crash for these testprogs so next time it happens we can see why.  For #70310.  Change-Id: I81a780aa82b173d42973f06911cb243f33352be1 Reviewed-on: https://go-review.googlesource.com/c/go/+/680476 Reviewed-by: Michael Pratt <mpratt@google.com> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Reviewed-by: Carlos Amedee <carlos@golang.org>",4,0,4
golang/go,fb0c27c514b7d6bbb88b72cfd7baff01e567f6bb,Damien Neil,2025-05-30T21:05:10Z,"os: do not follow dangling symlinks in Root when O_CREATE|O_EXCL on AIX  OpenFile with O_CREATE|O_EXCL should not follow dangling symlinks. On AIX it does, because AIX's openat(2) apparently returns ELOOP in this case. Most Unices return EEXIST.  Ensure that we never follow symlinks in the final component of the path when opening a file with O_CREATE|O_EXCL.  Fixes #73924  Change-Id: I869afb7faefccb0bb29d155553a7d7e5be80467d Reviewed-on: https://go-review.googlesource.com/c/go/+/677735 LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Auto-Submit: Damien Neil <dneil@google.com> Reviewed-by: Alan Donovan <adonovan@google.com>",12,2,14
golang/go,1cafdfb63bb9b8825c5f4143d154bce3b82ed6a1,Austin Clements,2025-06-10T16:26:03Z,"net/http: make the zero value of CrossOriginProtection work  Currently, CrossOriginProtection must be constructed by NewCrossOriginProtection. If you try to use the zero value, most methods will panic with a nil dereference.  This CL makes CrossOriginProtection use on-demand initialization instead, so the zero value has the same semantics as the value currently returned by NewCrossOriginProtection. Now, NewCrossOriginProtection just constructs the zero value.  We keep NewCrossOriginProtection by analogy to NewServeMux.  Updates #73626 Fixes #74089.  Change-Id: Ia80183eb6bfdafb0e002271c0b25c2d6230a159a Reviewed-on: https://go-review.googlesource.com/c/go/+/680396 Auto-Submit: Austin Clements <austin@google.com> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Reviewed-by: Damien Neil <dneil@google.com>",28,9,37
golang/go,a35701b3525ccd140995a216758760c60e7c58d7,Michael Matloob,2025-06-10T15:12:10Z,"cmd/dist: only install necessary tools when doing local test  Instead of installing all of cmd, install only the tools that cmd/dist would normally install.  Also, remove the addition of the buildid tool to the list of commands in the toolchain in debug mode. The uses of buildid were removed in CL 451360.  For #71867  Change-Id: I062909d23c18294aa23ea43b9f7eeb69bfa80c8c Reviewed-on: https://go-review.googlesource.com/c/go/+/680475 Reviewed-by: Dmitri Shuralyov <dmitshur@golang.org> Reviewed-by: Michael Matloob <matloob@google.com> Reviewed-by: Dmitri Shuralyov <dmitshur@google.com> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Auto-Submit: Michael Matloob <matloob@google.com>",16,19,35
golang/go,a189516d3a1623f2560f80569c4b64bdffc4ac78,Michael Anthony Knyszek,2025-06-09T21:45:33Z,"runtime: don't do a direct G handoff in semrelease on systemstack  semrelease is safe to call on the system stack (since it just readies goroutines) except for the fact that it might perform a direct G handoff and call into the scheduler. If handoff is set to false this is exceptionally rare, but could happen, and has happened for the trace reader goroutine which releases a trace.doneSema.  Fixes #73469.  Change-Id: I37ece678bc4721bbb6e5879d74daac762b7d742a Reviewed-on: https://go-review.googlesource.com/c/go/+/680315 Auto-Submit: Michael Knyszek <mknyszek@google.com> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Reviewed-by: Carlos Amedee <carlos@golang.org>",8,3,11
golang/go,f18d046568496dd331657df4ba90218821cb9ffd,Guoqi Chen,2025-06-09T09:04:55Z,"all.{bash,rc}: use ""../bin/go tool dist"" instead of ""%GOTOOLDIR%/dist"" print build info  After CL 677558, when running all.bash, the binaries of commands such as dist, nm, and pprof are no longer built by default, so when running all.bash, ""./all.bash: line 13: /home/golang/pkg/tool/linux_amd64/dist: No such file or directory"" will be printed, and the return result of the all.bash script is non-zero.  Although the ""dist"" command  won't be installed in $GOTOOLDIR anymore, but it will be built and cached, and ../bin/go tool dist will reuse the cached binary.  For #71867  Change-Id: I802eeafdb866e7d80c42da3e0955bb32def7b037 Reviewed-on: https://go-review.googlesource.com/c/go/+/680135 Reviewed-by: Cherry Mui <cherryyz@google.com> Reviewed-by: Dmitri Shuralyov <dmitshur@google.com> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Reviewed-by: Michael Matloob <matloob@golang.org>",2,2,4
golang/go,ee7bfbdbcc75c17c9f6f357f7950cfae0d63811c,Paul Murphy,2025-06-04T13:51:11Z,"cmd/compile/internal/ssa: fix PPC64 merging of (AND (S[RL]Dconst ...)  CL 622236 forgot to check the mask was also a 32 bit rotate mask. Add a modified version of isPPC64WordRotateMask which valids the mask is contiguous and fits inside a uint32.  I don't this is possible when merging SRDconst, the first check should always reject such combines. But, be extra careful and do it there too.  Fixes #73153  Change-Id: Ie95f74ec5e7d89dc761511126db814f886a7a435 Reviewed-on: https://go-review.googlesource.com/c/go/+/679775 Auto-Submit: Keith Randall <khr@golang.org> Reviewed-by: Jayanth Krishnamurthy <jayanth.krishnamurthy@ibm.com> Reviewed-by: Keith Randall <khr@google.com> Reviewed-by: Cherry Mui <cherryyz@google.com> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Reviewed-by: Keith Randall <khr@golang.org>",27,2,29
golang/go,985d600f3aa8654b854f8b2c822552c052ed3d30,Damien Neil,2025-06-06T19:59:04Z,"runtime: use small struct TestSynctest to ensure cleanups run  Finalizers and cleanup funcs weren't running on the windows-arm64 builder. Put finalizers/cleanups on a small struct containing a pointer rather than an *int, which fixes the problem.  Also uncomment a synctest.Wait that was accidentally commented out.  Fixes #73977  Change-Id: Ia6f18d74d6fccf2c5a9222317977c7458d67f158 Reviewed-on: https://go-review.googlesource.com/c/go/+/679696 LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Reviewed-by: Michael Knyszek <mknyszek@google.com>",20,14,34
golang/go,848a768ba76d7c386c2aa4f05bc2e9e51b5948b9,Damien Neil,2025-06-05T21:21:47Z,"runtime: clarify stack traces for bubbled goroutines  Use the synctest bubble ID to identify bubbles in traces, rather than the goroutine ID of the bubble's root goroutine.  Some waitReasons include a ""(synctest)"" suffix to distinguish a durably blocking state from a non-durable one. For example, ""chan send"" vs. ""chan send (synctest)"". Change this suffix to ""(durable)"".  Always print a ""(durable)"" sufix for the state of durably blocked bubbled goroutines. For example, print ""sleep (durable)"".  Drop the ""[not] durably blocked"" text from goroutine states, since this is now entirely redundant with the waitReason.  Old:   goroutine 8 [chan receive (synctest), synctest bubble 7, durably blocked]:   goroutine 9 [select (no cases), synctest bubble 7, durably blocked]:  New:   goroutine 8 [chan receive (durable), synctest bubble 1]:   goroutine 9 [select (no cases) (durable), synctest bubble 1]:  Change-Id: I89112efb25150a98a2954f54d1910ccec52a5824 Reviewed-on: https://go-review.googlesource.com/c/go/+/679376 Auto-Submit: Damien Neil <dneil@google.com> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Reviewed-by: Michael Pratt <mpratt@google.com>",22,19,41
golang/go,049a5e603634dfdbc73b4255c7e72eabc3922d5b,Damien Neil,2025-06-05T20:55:35Z,"runtime: return a different bubble deadlock error when main goroutine is done  The synctest.Test function waits for all goroutines in a bubble to exit before returning. If there is ever a point when all goroutines in a bubble are durably blocked, it panics and reports a deadlock.  Panic with a different message depending on whether the bubble's main goroutine has returned or not. The main goroutine returning stops the bubble clock, so knowing whether it is running or not is useful debugging information.  The new panic messages are: 	deadlock: all goroutines in bubble are blocked 	deadlock: main bubble goroutine has exited but blocked goroutines remain  Change-Id: I94a69e79121c272d9c86f412c1c9c7de57ef27ef Reviewed-on: https://go-review.googlesource.com/c/go/+/679375 Auto-Submit: Damien Neil <dneil@google.com> Reviewed-by: Michael Pratt <mpratt@google.com> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com>",12,5,17
golang/go,ac1686752bf65eaefebb340bd642177e2cc27bde,Michael Matloob,2025-06-09T15:10:53Z,"cmd/internal/doc: increase version of pkgsite doc command that's run  This will incorporate the changes in CL 675957, CL 677596, and CL 675958.  For #73848  Change-Id: Ie3d313e055a36b5b7aafec4a7462a1ced8a9f923 Reviewed-on: https://go-review.googlesource.com/c/go/+/680176 Reviewed-by: Michael Matloob <matloob@google.com> Reviewed-by: Jonathan Amsterdam <jba@google.com> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com>",1,1,2
golang/go,da0e8c4517178f545ee78b11e3d91e1daa7ce07a,Cuong Manh Le,2025-06-03T14:35:20Z,"cmd/compile: relax reshaping condition  CL 641955 changes the Unified IR reader to not doing shapify when reading reshaping expression. However, this condition only matters with pointer type shaping, which will lose the original type, causes the reshaping ends up with a completely different type.  This CL relaxes the condition, always allow non-pointer types shaping.  Updates #71184 Fixes #73947  Change-Id: Ib0bafd8932c52d99266f311b6cbfc75c00383f9b Reviewed-on: https://go-review.googlesource.com/c/go/+/678335 Reviewed-by: Keith Randall <khr@golang.org> Auto-Submit: Cuong Manh Le <cuong.manhle.vn@gmail.com> Reviewed-by: Keith Randall <khr@google.com> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Reviewed-by: Carlos Amedee <carlos@golang.org>",144,1,145
golang/go,7800f4f0adbc749be95d13be48524e9702c50bbc,Jonathan Amsterdam,2025-06-08T12:49:25Z,"log/slog: fix level doc on handlers  Fixed doc on {JSON,Text}Handler.Handle: the level is never omitted.  Fixes #73943.  Change-Id: Ia470cbe5d713ab18dd80eeea1c0ab8f5e6d30f3f Reviewed-on: https://go-review.googlesource.com/c/go/+/680055 Auto-Submit: Jonathan Amsterdam <jba@google.com> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Reviewed-by: Dmitri Shuralyov <dmitshur@google.com> Reviewed-by: Jonathan Amsterdam <jba@google.com> Reviewed-by: Sean Liao <sean@liao.dev>",2,6,8
golang/go,d184f8dc020ac635cea02c046ab1d0b87dfd624d,Guoqi Chen,2025-06-05T11:23:55Z,"runtime: check for gsignal in racecall on loong64  This issue has been fixed for amd64, arm64 and other platforms in CL 643875, but it was missed when the race support was submitted for loong64.  Fixes #71395.  Change-Id: I678f381e868214f1b3399be43187db49e1660933 Reviewed-on: https://go-review.googlesource.com/c/go/+/679055 Reviewed-by: Meidan Li <limeidan@loongson.cn> Reviewed-by: Michael Knyszek <mknyszek@google.com> Reviewed-by: sophie zhao <zhaoxiaolin@loongson.cn> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Reviewed-by: Carlos Amedee <carlos@golang.org>",6,1,7
golang/go,0ccfbc834a489f92745613b2e06275c2cfe6ace0,Olivier MenguÃ©,2025-04-24T14:46:44Z,os/signal: doc link to syscall.EPIPE  Add godoc link for EPIPE error.  Change-Id: I5df35f700684510328f92bb5d4946c5123ba5f2c Reviewed-on: https://go-review.googlesource.com/c/go/+/667757 Auto-Submit: Michael Knyszek <mknyszek@google.com> Reviewed-by: Michael Pratt <mpratt@google.com> Reviewed-by: Michael Knyszek <mknyszek@google.com> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com>,4,3,7
golang/go,78eadf5b3de568297456fe137b65ff16e8cc8bb6,Carlos Amedee,2025-06-04T19:35:31Z,"all: update vendored dependencies [generated]  The Go 1.25 RC is due soon. This is the time to once again update all golang.org/x/... module versions that contribute packages to the std and cmd modules in the standard library to latest master versions.  For #36905.  [git-generate] go install golang.org/x/build/cmd/updatestd@latest go install golang.org/x/tools/cmd/bundle@latest updatestd -goroot=$(pwd) -branch=master  cat << EOF | patch diff --git a/src/cmd/go/testdata/script/test_json_build.txt b/src/cmd/go/testdata/script/test_json_build.txt index df8863ae03..2a572ace72 100644 --- a/src/cmd/go/testdata/script/test_json_build.txt +++ b/src/cmd/go/testdata/script/test_json_build.txt @@ -56,7 +56,7 @@ stdout '""Action"":""fail"",""Package"":""m/cycle/p"",""Elapsed"":.*,""FailedBuild"":""m/cycl  ! go test -json -o=$devnull ./veterror  stdout '""ImportPath"":""m/veterror \[m/veterror.test\]"",""Action"":""build-output"",""Output"":""# m/veterror\\n""'  stdout '""ImportPath"":""m/veterror \[m/veterror.test\]"",""Action"":""build-output"",""Output"":""# \[m/veterror\]\\n""' -stdout '""ImportPath"":""m/veterror \[m/veterror.test\]"",""Action"":""build-output"",""Output"":""veterror(/|\\\\)main_test.go:9:9: fmt.Printf format %s reads arg #1, but call has 0 args\\n""' +stdout '""ImportPath"":""m/veterror \[m/veterror.test\]"",""Action"":""build-output"",""Output"":""veterror(/|\\\\)main_test.go:9:21: fmt.Printf format %s reads arg #1, but call has 0 args\\n""'  stdout '""ImportPath"":""m/veterror \[m/veterror.test\]"",""Action"":""build-fail""'  stdout '""Action"":""start"",""Package"":""m/veterror""'  stdout '""Action"":""output"",""Package"":""m/veterror"",""Output"":""FAIL\\tm/veterror \[build failed\]\\n""' EOF  Change-Id: I6a8d35acdeab90c3bbd6395b8b1abb021673b5cb Reviewed-on: https://go-review.googlesource.com/c/go/+/678556 Reviewed-by: Dmitri Shuralyov <dmitshur@golang.org> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Reviewed-by: Michael Knyszek <mknyszek@google.com>",18527,18060,36587
golang/go,4d1c255f159d90557b43ede07f8b9a209e1fb49c,Neal Patel,2025-05-21T18:11:44Z,"net/http: strip sensitive proxy headers from redirect requests  Similarly to Authentication entries, Proxy-Authentication entries should be stripped to ensure sensitive information is not leaked on redirects outside of the original domain.  https://fetch.spec.whatwg.org/#authentication-entries  Thanks to Takeshi Kaneko (GMO Cybersecurity by Ierae, Inc.) for reporting this issue.  For #73816 Fixes CVE-2025-4673  Change-Id: Ied7b641f6531f1d340ccba3c636d3c30dd5547d9 Reviewed-on: https://go-review.googlesource.com/c/go/+/679257 LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Reviewed-by: Michael Knyszek <mknyszek@google.com>",5,1,6
golang/go,3432c68467d50ffc622fed230a37cd401d82d4bf,Damien Neil,2025-06-02T16:26:27Z,"runtime: make bubbled timers more consistent with unbubbled  This CL makes two changes to reduce the predictability with which bubbled timers fire.  When asynctimerchan=0 (the default), regular timers with an associated channel are only added to a timer heap when some channel operation is blocked on that channel. This allows us to garbage collect unreferenced, unstopped timers. Timers in a synctest bubble, in contrast, are always added to the bubble's timer heap.  This CL changes bubbled timers with a channel to be handled the same as unbubbled ones, adding them to the bubble's timer heap only when some channel operation is blocked on the timer's channel. This permits unstopped bubbled timers to be garbage collected, but more importantly it makes all timers past their deadline behave identically, regardless of whether they are in a bubble.  This CL also changes timer scheduling to execute bubbled timers immediately when possible rather than adding them to a heap. Timers in a bubble's heap are executed when the bubble is idle. Executing timers immediately avoids creating a predictable order of execution.  For #73850 Fixes #73934  Change-Id: If82e441546408f780f6af6fb7f6e416d3160295d Reviewed-on: https://go-review.googlesource.com/c/go/+/678075 Auto-Submit: Damien Neil <dneil@google.com> Reviewed-by: Michael Pratt <mpratt@google.com> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com>",113,54,167
golang/go,1aa336209363d9715e145244c7b22620ac0f0584,Cherry Mui,2025-06-03T19:44:32Z,"Revert ""cmd/compile: Enable inlining of tail calls""  This reverts CL 650455 and CL 655816.  Reason for revert: it causes #73747. Properly fixing it gets into trickiness with defer/recover, wrapper, and inlining. We're late in the Go 1.25 release cycle.  Fixes #73747.  Change-Id: Ifb343d522b18fec3fec73a7c886678032ac8e4df Reviewed-on: https://go-review.googlesource.com/c/go/+/678575 Reviewed-by: Carlos Amedee <carlos@golang.org> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Reviewed-by: Cuong Manh Le <cuong.manhle.vn@gmail.com>",25,32,57
golang/go,f537061e1b7599e97bafc0c8f9cc0bf686eb813e,Michael Anthony Knyszek,2025-06-03T20:30:43Z,"cmd/trace: handle Sync event at the beginning of the trace  Currently the code assumes that there's no Sync event at the start of the trace, but this hasn't been correct for some time. Count Syncs and look for at least one instead of looking for zero.  Fixes #73962.  Change-Id: I2b4199a21c699c5b50b3d5add37dc46a515108c6 Reviewed-on: https://go-review.googlesource.com/c/go/+/678555 LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Reviewed-by: Carlos Amedee <carlos@golang.org> Auto-Submit: Michael Knyszek <mknyszek@google.com> Reviewed-by: Michael Pratt <mpratt@google.com>",10,8,18
golang/go,d4bf7167935e84e7200e95649563d1368cf05331,Michael Anthony Knyszek,2025-06-03T19:28:00Z,"runtime: reduce per-P memory footprint when greenteagc is disabled  There are two additional sources of memory overhead per P that come from greenteagc. One is for ptrBuf, but on platforms other than Windows it doesn't actually cost anything due to demand-paging (Windows also demand-pages, but the memory is 'committed' so it still counts against OS RSS metrics). The other is for per-sizeclass scan stats. However when greenteagc is disabled, most of these scan stats are completely unused.  The worst-case memory overhead from these two sources is relatively small (about 10 KiB per P), but for programs with a small memory footprint running on a machine with a lot of cores, this can be significant (single-digit percent).  This change does two things. First, it puts ptrBuf initialization behind the greenteagc experiment, so now that memory is never allocated by default. Second, it abstracts the implementation details of scan stat collection and emission, such that we can have two different implementations depending on the build tag. This lets us remove all the unused stats when the greenteagc experiment is disabled, reducing the memory overhead of the stats from ~2.6 KiB per P to 536 bytes per P. This is enough to make the difference no longer noticable in our benchmark suite.  Fixes #73931.  Change-Id: I4351f1cbb3f6743d8f5922d757d73442c6d6ad3f Reviewed-on: https://go-review.googlesource.com/c/go/+/678535 LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Reviewed-by: Michael Pratt <mpratt@google.com>",90,49,139
golang/go,1f2a4d192d71ae5eeaacaa72a8bb2df4e6c08edd,Cuong Manh Le,2025-06-03T17:04:26Z,test: add another regression test for issue 73309  Fixed #73309  Change-Id: Id715b9c71c95c92143a7fdb5a66b24305346dd3b Reviewed-on: https://go-review.googlesource.com/c/go/+/678415 LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Reviewed-by: Carlos Amedee <carlos@golang.org> Auto-Submit: Cuong Manh Le <cuong.manhle.vn@gmail.com> Reviewed-by: Cherry Mui <cherryyz@google.com>,90,0,90
golang/go,5b748eed9c479383fc3ea3d018bbd03de1baa6e6,qiulaidongfeng,2025-06-03T15:01:27Z,cmd/compile: better error message when import embed package  Fixes #73955  Change-Id: I7cf3ab4c70dc2e2765b54b88ae8cfc77a3073344 Reviewed-on: https://go-review.googlesource.com/c/go/+/678355 Auto-Submit: Robert Griesemer <gri@google.com> Reviewed-by: Carlos Amedee <carlos@golang.org> Reviewed-by: Robert Griesemer <gri@google.com> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com>,1,1,2
golang/go,cfb4e9bc4ae957dba63cb2ee5e020fcd25d553fd,Michael Matloob,2025-05-30T16:53:42Z,"cmd/dist: don't install tools that won't be shipped in distribution  We shouldn't be installing these tools because we will remove them in distpack. Installing the tools will also prevent us from testing what happens when the tools are missing.  The changes below this on the stack, CL 677775 (cmd/doc: build cmd/doc directly into the go command) and CL 677636 (cmd/go/internal/cfg: fix GOROOT setting when forcing host config) are needed for this change to pass tests. The doc change is being done so we preserve the properties in the tests that doc can be invoked without doing a build. It's not strictly necessary (we could just remove the tests) but it's nice to have. The GOROOT setting is a significant bug in switching the configuration to host mode: the value of GOROOT wasn't being reset, which caused issues for go commands built with trimpath, because runtime.GOROOT wouldn't have the correct goroot value.  For #71867  Change-Id: I4181711ba117066b7d62d7d013ad4b186871cfb7 Reviewed-on: https://go-review.googlesource.com/c/go/+/677558 Reviewed-by: Dmitri Shuralyov <dmitshur@golang.org> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Reviewed-by: Dmitri Shuralyov <dmitshur@google.com> Reviewed-by: Michael Matloob <matloob@google.com>",22,8,30
golang/go,94764d093822721337243de77aeba72df1f9b230,Michael Matloob,2025-05-30T22:20:05Z,"cmd/doc: build cmd/doc directly into the go command  There are a couple of places where our tests expect that 'go doc' doesn't need to do a build. Invoke the cmd/doc code directly by the go command instead of starting the doc tool in a separate process so we can preserve that property.  This change moves most of the doc code into the package cmd/internal/doc, and exposes a Main function from that function that's called both by the cmd/doc package, and by go doc.  This change makes couple of additional changes to intergrate doc into the go command:  The counter.Open call and the increment of invocations counter are only needed by cmd/doc. The go command will open the counters file and increment a counter for the doc subcommand.  We add a cmd_go_bootstrap tagged variant of the file that defines go doc so that we don't end up linking net into the bootstrap version of the go command. We don't need doc in that version of the command.  We create a new flagSet rather than using flag.CommandLine because when running as part of the go command, the flags to ""go doc"" won't be the top level flags.  We change TestGoListTest in go_test.go to use gofmt instead of doc as an example of a main package in cmd with an in-package test.  For #71867  Change-Id: I3e3df83e5fa266559606fdc086b461165e09f037 Reviewed-on: https://go-review.googlesource.com/c/go/+/677775 LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Reviewed-by: Michael Pratt <mpratt@google.com> Reviewed-by: Michael Matloob <matloob@google.com>",97,76,173
golang/go,74b70eead70872ccb0b7bfe0435ef3e4a1eb288e,Michael Pratt,2025-06-03T17:08:06Z,go/token: remove unreachable code  Reported by go vet.  Change-Id: I6a6a636c79923fafd8c649c583383cdf455c6ce2 Reviewed-on: https://go-review.googlesource.com/c/go/+/678317 Reviewed-by: Robert Findley <rfindley@google.com> Reviewed-by: Alan Donovan <adonovan@google.com> Auto-Submit: Michael Pratt <mpratt@google.com> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com>,6,2,8
golang/go,0c0094c893c6e7b81fdd2f7811101a536f525078,Alan Donovan,2025-06-03T14:43:55Z,go/token: tweak comment  (accidentally omitted from CL 675736)  Change-Id: I05ed8fcb7bb4109862a47701c427d8efc17b9f31 Reviewed-on: https://go-review.googlesource.com/c/go/+/678315 TryBot-Bypass: Dmitri Shuralyov <dmitshur@golang.org> Reviewed-by: Robert Findley <rfindley@google.com> Auto-Submit: Alan Donovan <adonovan@google.com>,3,2,5
golang/go,792548a4835f019b40bf8bd4442c893eae280467,Michael Matloob,2025-05-30T20:16:27Z,"cmd/go/internal/cfg: fix GOROOT setting when forcing host config  We manage the state using a bunch of global config, so we need to make sure we're doing things in the right order. In this case, the SetGOROOT function was being called in init, setting the GOROOT on the global Context, but when we reset the context in ForceHost we lost the goroot configuration. We need to call SetGOROOT in ForceHost to re-set the GOROOT on the new context.  This was uncovered by CL 677558 because a go command that was built with trimpath would try to use its runtime.GOROOT(), which wouldn't be valid in trimpath mode. Setting GOROOT properly with SetGOROOT will use the value from findGOROOT, assuming GOROOT isn't set in the environment, and findGOROOT will try to determine GOROOT using the path of the go command executable.  For #71867  Change-Id: I731b6c5d859b4504fc128b29ab904e3a2886ff3c Reviewed-on: https://go-review.googlesource.com/c/go/+/677636 LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Reviewed-by: Michael Matloob <matloob@google.com> Reviewed-by: Michael Pratt <mpratt@google.com>",2,0,2
golang/go,49f63047245a50f4ec38044fc6fa2bc75719726a,Keith Randall,2025-06-02T23:24:07Z,runtime: additional memmove benchmarks  For testing out duffcopy changes.  Change-Id: I93b4a52d75418a6e31aae5ad99f95d1870812b69 Reviewed-on: https://go-review.googlesource.com/c/go/+/678215 Reviewed-by: David Chase <drchase@google.com> Auto-Submit: Keith Randall <khr@google.com> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Reviewed-by: Keith Randall <khr@google.com>,99,0,99
golang/go,eebae283b6e91f0bf2bd15b1fda24189841d45b8,Alan Donovan,2025-05-23T02:06:13Z,"go/token: FileSet: hold Files in a balanced tree  This CL changes the representation of FileSet from a slice to a tree, specifically an AVL tree keyed by the File's base-end range. This makes a sequence of insertions using AddExistingFiles much more efficient: creating a FileSet of size n by a sequence of calls costs O(n log n), whereas before it was O(n^2 log n) because of the repeated sorting.  The AVL tree is based on Russ' github.com/rsc/omap, simplified for clarity and to reduce unnecessary dynamism. We use an AVL tree as it is more strongly balanced than an RB tree, optimising lookups at the expense of insertions.  The CL includes a basic unit test of the tree using operations on pseudorandom values.  Benchmarks of Position lookups actually improve because the tree avoids BinarySearchFunc's dynamic dispatch to cmp, and the benchmark of AddExistingFiles is about 1000x (!) faster:  goos: darwin goarch: arm64 pkg: go/token cpu: Apple M1 Pro                                     â     old.txt     â               new.txt               â                                     â     sec/op      â    sec/op     vs base               â FileSet_Position/random-8                51.60n Â±  1%   39.99n Â±  1%  -22.50% (p=0.000 n=9) FileSet_Position/file-8                  27.10n Â±  3%   26.64n Â±  1%        ~ (p=0.168 n=9) FileSet_Position/manyfiles-8             209.9n Â± 17%   154.1n Â±  9%  -26.58% (p=0.000 n=9) FileSet_AddExistingFiles/sequence-8   395930.3Âµ Â±  4%   280.8Âµ Â± 10%  -99.93% (p=0.000 n=9)  Updates #73205  Change-Id: Iea59c624a6cedadc2673987a5eb0ebece67af9e9 Reviewed-on: https://go-review.googlesource.com/c/go/+/675736 Reviewed-by: Robert Findley <rfindley@google.com> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com>",539,94,633
golang/go,3bd0eab96f581daafa3045de0c5877254e19054c,Damien Neil,2025-05-29T18:48:06Z,"runtime: randomize order of timers at the same instant in bubbles  In synctest bubbles, fire timers scheduled for the same instant in a randomized order.  Pending timers are added to a heap ordered by the timer's wakeup time. Add a per-timer random value, set when the timer is added to a heap, to break ties between timers scheduled for the same instant.  Only inject this randomness in synctest bubbles. We could do so for all timers at the cost of one cheaprand call per timer, but given that it's effectively impossible to create two timers scheduled for the same instant outside of a fake-time environment, don't bother.  Fixes #73876 For #73850  Change-Id: Ie96c86a816f548d4c31e4e014bf9293639155bd4 Reviewed-on: https://go-review.googlesource.com/c/go/+/677276 LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Auto-Submit: Damien Neil <dneil@google.com> Reviewed-by: Michael Pratt <mpratt@google.com>",89,9,98
golang/go,a37969852194c841beb61f8078e9939438841fec,Alan Donovan,2025-05-29T14:29:39Z,"go/{ast,parser,types}: add signpost to golang.org/x/tools/go/packages  Change-Id: I5d5036e7b41df67d0c1ab42163fdceed8f9c42a3 Reviewed-on: https://go-review.googlesource.com/c/go/+/677137 Reviewed-by: Matt Proud <mtp@google.com> Reviewed-by: Robert Griesemer <gri@google.com> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com>",22,4,26
golang/go,497cb7c0c3042d3c6605b46a1bf35b7c3bc8b046,Mark Freeman,2025-05-30T19:44:11Z,cmd/compile/internal/noder: document quirk of string elements  Change-Id: Ifc3bf896aaaf7c6ce06a01e3dd43780d203638cf Reviewed-on: https://go-review.googlesource.com/c/go/+/677755 LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Auto-Submit: Mark Freeman <mark@golang.org> Reviewed-by: Robert Griesemer <gri@google.com>,3,0,3
golang/go,cc119ee391575fb11bdefaeac7155bcb9c2652be,Mark Freeman,2025-05-30T18:45:38Z,cmd/compile/internal/noder: stub type section and adjust others  The type definition and object definition sections have nearly the same structure - help illustrate that through consistent naming.  Change-Id: Ibed374fca4883a293a7fc16b36034e1acb38362a Reviewed-on: https://go-review.googlesource.com/c/go/+/677378 Auto-Submit: Mark Freeman <mark@golang.org> Reviewed-by: Robert Griesemer <gri@google.com> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com>,72,15,87
golang/go,25ca686a0bef5da90367964236fec49ce45626e3,Mark Freeman,2025-05-29T20:06:27Z,"cmd/compile/internal/noder: begin filling in SectionObj  SectionObj has to encode the definition information for each object type, so it will be a bit long.  Change-Id: I9b9514d58a284a4e64020f99fd1b2a92f7752338 Reviewed-on: https://go-review.googlesource.com/c/go/+/677377 Reviewed-by: Robert Griesemer <gri@google.com> Auto-Submit: Mark Freeman <mark@golang.org> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com>",18,1,19
golang/go,11660d537b3387ba380f3bc2e85b9b59dac0dff5,Mark Freeman,2025-05-29T19:43:47Z,cmd/compile/internal/noder: fill in SectionName  Change-Id: Ib99d40a546cb095c1b6c2d33e0735f3b5c681539 Reviewed-on: https://go-review.googlesource.com/c/go/+/677237 Reviewed-by: Robert Griesemer <gri@google.com> Auto-Submit: Mark Freeman <mark@golang.org> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com>,28,4,32
golang/go,711ff943afc572c6b0e800aa1e73aaf336568c2d,Mateusz Poliwczak,2025-05-31T14:41:15Z,testing: add Output method to TB  Updates #59928 Fixes #73937  Change-Id: Ibf7ec61758edccd245841c3acc9096563b44fcd2 Reviewed-on: https://go-review.googlesource.com/c/go/+/677875 LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Reviewed-by: Jonathan Amsterdam <jba@google.com> Reviewed-by: Damien Neil <dneil@google.com>,2,0,2
golang/go,e9d3b030ed6fe8380d9b0411ef06eff001769641,Alan Donovan,2025-06-02T15:27:08Z,"slices,sort: explicitly discard results in benchmarks  The unusedresult analyzer will report failure to use the results of these pure functions.  Updates #73950  Change-Id: I783cb92ad913105afd46c782bedf6234410c645d Reviewed-on: https://go-review.googlesource.com/c/go/+/677995 Reviewed-by: Dmitri Shuralyov <dmitshur@golang.org> Commit-Queue: Alan Donovan <adonovan@google.com> Reviewed-by: Robert Findley <rfindley@google.com> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com>",7,7,14
golang/go,a8e99ab19cbf8568cb452b899d0ed3f0d65848c5,Carlos Amedee,2025-05-30T20:05:04Z,internal/trace: expose the go version read by the reader  This change adds a function to expose the version set by the trace reader after reading the trace header (in tests). The trace validator needs to be able to determine what version of the trace it needs to validate against. Clock snapshot checks have been disabled for Windows and WASM.  For #63185  Change-Id: Ia3d63e6ed7a5ecd87e63292b84cc417d982aaa5a Reviewed-on: https://go-review.googlesource.com/c/go/+/677695 LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Auto-Submit: Carlos Amedee <carlos@golang.org> Reviewed-by: Michael Knyszek <mknyszek@google.com>,17,0,17
golang/go,68b51e99f9ed6d15d1ea53c671f60c55979c4a40,Michael Matloob,2025-05-30T19:23:36Z,cmd/distpack: add test case for pack tool being excluded  For #71867  Change-Id: Ic4c6304b9a6b35c45bf35342523930924c68545a Reviewed-on: https://go-review.googlesource.com/c/go/+/677635 LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Reviewed-by: Michael Matloob <matloob@google.com> Reviewed-by: Dmitri Shuralyov <dmitshur@google.com> Reviewed-by: Dmitri Shuralyov <dmitshur@golang.org>,4,0,4
golang/go,67f052121ed47f23ea613043191ad654702560aa,Michael Matloob,2025-05-30T16:22:23Z,cmd/distpack: don't keep the pack tool  This was an oversight: the pack tool isn't actually used in builds.  For #71867  Change-Id: Ib1f1cce0b574cf1d2c1002b2f2ab9ef9d750d0fb Reviewed-on: https://go-review.googlesource.com/c/go/+/677557 Reviewed-by: Michael Matloob <matloob@google.com> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Reviewed-by: Michael Pratt <mpratt@google.com> Reviewed-by: Dmitri Shuralyov <dmitshur@golang.org>,2,2,4
golang/go,1947c4233a33953088468a23457f6779c34be2d1,Carlos Amedee,2025-01-02T19:41:59Z,"runtime: set HeapGoal to zero when the GC is disabled  When the GC is disabled, the tracer should emit a heap goal of 0. Not setting the heap goal to 0 causes an inaccurate NextGC value to be emmited.  Fixes #63864  Change-Id: Iecceaca86c0a43c1cc4d9433f1f9bb736f01ccbc Reviewed-on: https://go-review.googlesource.com/c/go/+/639417 LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Reviewed-by: Michael Knyszek <mknyszek@google.com> Reviewed-by: Michael Pratt <mpratt@google.com>",3,1,4
golang/go,8cd7f17248b9215530e9ce9ed7831fc24b5eeef7,Damien Neil,2025-05-23T23:21:19Z,"testing, testing/synctest: report correct duration after panics  Report the correct wall-clock test duration after handling a panic in a synctest.Test bubble.  Fixes #73852  Change-Id: I053262e5eac2dd9d5938b17c3093cbc3fa115a0d Reviewed-on: https://go-review.googlesource.com/c/go/+/676695 Auto-Submit: Damien Neil <dneil@google.com> Reviewed-by: Alan Donovan <adonovan@google.com> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com>",12,4,16
golang/go,29782bd347a1c707b6804ea6ee7da3a70ba9fd4a,Roxy Light,2025-05-24T23:07:58Z,os: add implementation of fs.ReadLinkFS to *rootFS  Fixes #73887  Change-Id: I43f3f4324d740b5381615bce864b7ec31415a635 Reviewed-on: https://go-review.googlesource.com/c/go/+/676135 LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Reviewed-by: Damien Neil <dneil@google.com> Reviewed-by: Dmitri Shuralyov <dmitshur@google.com>,18,2,20
golang/go,78e86297f5cccb82a6a57081947fab8e8af32586,Mark Freeman,2025-05-29T18:54:23Z,cmd/compile/internal/noder: rename RelIndex to match codebase  Change-Id: I06b64ea3c1c02b46e242852f8f0b56d77df42161 Reviewed-on: https://go-review.googlesource.com/c/go/+/677236 LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Auto-Submit: Mark Freeman <mark@golang.org> Reviewed-by: Robert Griesemer <gri@google.com>,3,4,7
golang/go,fece9871bbdb2569d731254575b2e8ea156ac67e,Cherry Mui,2025-05-29T19:42:23Z,"cmd/compile: update default PGO profile  Since last time the default.pgo profile is collected, there has been a lot of development in the compiler. It's time to refresh the compiler's PGO profile.  Profile collected by running the cmd/compile/profile.sh script on the gotip-linux-amd64_c3h88-perf_vs_release gomote.  Benchmark results on Linux/AMD64:           â  nopgo.txt  â              old.txt               â              new.txt               â          â   sec/op    â   sec/op     vs base               â   sec/op     vs base               â Template   110.4m Â± 2%   108.4m Â± 1%       ~ (p=0.121 n=20)   107.8m Â± 1%  -2.37% (p=0.006 n=20) Unicode    98.78m Â± 0%   95.16m Â± 1%  -3.67% (p=0.000 n=20)   93.87m Â± 1%  -4.98% (p=0.000 n=20) GoTypes    553.8m Â± 0%   548.3m Â± 0%  -0.99% (p=0.000 n=20)   542.1m Â± 0%  -2.11% (p=0.000 n=20) Compiler   88.12m Â± 1%   83.22m Â± 1%  -5.56% (p=0.000 n=20)   81.81m Â± 1%  -7.17% (p=0.000 n=20) SSA         3.592 Â± 1%    3.499 Â± 0%  -2.58% (p=0.000 n=20)    3.445 Â± 0%  -4.08% (p=0.000 n=20) Flate      64.48m Â± 1%   64.99m Â± 1%       ~ (p=0.341 n=20)   63.10m Â± 2%  -2.15% (p=0.000 n=20) GoParser   129.8m Â± 1%   127.3m Â± 1%  -1.88% (p=0.004 n=20)   126.2m Â± 1%  -2.75% (p=0.000 n=20) Reflect    286.0m Â± 1%   282.3m Â± 1%  -1.30% (p=0.000 n=20)   280.1m Â± 1%  -2.06% (p=0.000 n=20) Tar        129.3m Â± 1%   128.4m Â± 2%       ~ (p=0.565 n=20)   126.3m Â± 1%  -2.32% (p=0.000 n=20) XML        152.1m Â± 1%   148.2m Â± 1%  -2.55% (p=0.000 n=20)   147.9m Â± 1%  -2.79% (p=0.000 n=20) geomean    197.4m        193.4m       -2.04%                  190.9m       -3.29%  On Linux/ARM64:           â  nopgo.txt  â              old.txt               â              new.txt               â          â   sec/op    â   sec/op     vs base               â   sec/op     vs base               â Template   80.78m Â± 2%   78.78m Â± 1%  -2.47% (p=0.000 n=20)   78.15m Â± 1%  -3.25% (p=0.000 n=20) Unicode    80.57m Â± 1%   75.79m Â± 1%  -5.94% (p=0.000 n=20)   74.85m Â± 0%  -7.11% (p=0.000 n=20) GoTypes    426.4m Â± 0%   416.1m Â± 0%  -2.42% (p=0.000 n=20)   411.0m Â± 0%  -3.62% (p=0.000 n=20) Compiler   66.54m Â± 1%   64.01m Â± 1%  -3.79% (p=0.000 n=20)   62.86m Â± 1%  -5.53% (p=0.000 n=20) SSA         2.905 Â± 0%    2.772 Â± 0%  -4.56% (p=0.000 n=20)    2.759 Â± 0%  -5.01% (p=0.000 n=20) Flate      46.68m Â± 0%   45.40m Â± 1%  -2.75% (p=0.000 n=20)   45.20m Â± 0%  -3.16% (p=0.000 n=20) GoParser   95.17m Â± 1%   93.54m Â± 1%  -1.71% (p=0.000 n=20)   92.50m Â± 0%  -2.80% (p=0.000 n=20) Reflect    212.4m Â± 0%   206.6m Â± 1%  -2.72% (p=0.000 n=20)   205.4m Â± 1%  -3.31% (p=0.000 n=20) Tar        95.64m Â± 1%   93.19m Â± 1%  -2.57% (p=0.000 n=20)   92.55m Â± 0%  -3.23% (p=0.000 n=20) XML        111.0m Â± 0%   108.0m Â± 1%  -2.67% (p=0.000 n=20)   107.2m Â± 1%  -3.38% (p=0.000 n=20) geomean    148.9m        144.2m       -3.17%                  142.9m       -4.05%  For #60234.  Change-Id: I6c4f0609ba578a2848ce6cfcc748dfdda7222182 Reviewed-on: https://go-review.googlesource.com/c/go/+/677375 Reviewed-by: David Chase <drchase@google.com> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com>",0,0,0
golang/go,9f3dd846e2ee6e8fcb2c673122d9d0c932e01b71,Michael Anthony Knyszek,2025-05-29T19:04:08Z,"cmd/internal/obj/s390x: fix potential recursive String call  This String method can potentially recurse infinitely, since %#x will apparently call String if the method exists. This isn't well documented, but cmd/vet will be updated soon to check this (when we update the vendored x/tools dependency) so cut off the recursion by converting to the underlying type first.  Change-Id: Ia6fc046c9eb56a5dd6a33772afd23da443a06116 Reviewed-on: https://go-review.googlesource.com/c/go/+/677261 Auto-Submit: Michael Knyszek <mknyszek@google.com> Reviewed-by: David Chase <drchase@google.com> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com>",1,1,2
golang/go,21b7e60c6b64dd3221ab5b95d164fb42492029e8,Damien Neil,2025-05-22T18:14:53Z,"runtime, testing/synctest: breaking bubble isolation with Cond is fatal  sync.Cond.Wait is durably blocking. Waking a goroutine out of Cond.Wait from outside its bubble panics.  Make this panic a fatal panic, since it leaves the notifyList in an inconsistent state. We could do some work to make this a recoverable panic, but the complexity doesn't seem worth the outcome.  For #67434  Change-Id: I88874c1519c2e5c0063175297a9b120cedabcd07 Reviewed-on: https://go-review.googlesource.com/c/go/+/675617 LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Reviewed-by: Michael Pratt <mpratt@google.com> Auto-Submit: Damien Neil <dneil@google.com>",81,3,84
golang/go,555d425d177db7fa7123779d253aee42980cb8a3,Damien Neil,2025-05-28T17:55:26Z,"testing, testing/synctest: write bubble errors to parent test log  Ensure that log messages written to the testing.T created by synctest.Test appear in the test output when a test fails.  Fixes #73902  Change-Id: Ie97f5efe54eb003e6c0a5394c2def4cac1520ecb Reviewed-on: https://go-review.googlesource.com/c/go/+/676995 Reviewed-by: Alan Donovan <adonovan@google.com> Auto-Submit: Damien Neil <dneil@google.com> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com>",32,13,45
golang/go,f14f3aae1c3dc382c15d9c3174a037b7d3595009,Mark Freeman,2025-05-22T15:06:23Z,"internal/pkgbits: explain the rationale for reference tables  The primary benefit of reference tables is to the linker, though they are also reasonably compact as compared to absolute element indices. It is worth also checking if reference table structure is similarly exploited past the IR linking stage.  Ideally, the reference table definition would live in / near the linker. As it stands, it's a bit hard to infer the purpose of the reference tables when looking at pkgbits in isolation.  Change-Id: I496aca5a4edcf28e66fa7863ddfa4d825e1b2e89 Reviewed-on: https://go-review.googlesource.com/c/go/+/675596 Auto-Submit: Mark Freeman <mark@golang.org> Reviewed-by: Robert Griesemer <gri@google.com> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com>",62,1,63
golang/go,4878b4471bf1267a8f87b40ed49b36ab82b79d18,Alan Donovan,2025-05-12T17:16:23Z,"slices: document and test nilness behavior of all functions  This change documents the current nilness behavior of all functions in the package, and asserts each with a test.  There is no change to behavior, but the postcondition is strengthened, so this may require a proposal.  Fixes #73604 Fixes #73048  Change-Id: Ieb68e609a1248bd81c8507d3795785622a65f8cb Reviewed-on: https://go-review.googlesource.com/c/go/+/671996 Auto-Submit: Alan Donovan <adonovan@google.com> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Reviewed-by: Austin Clements <austin@google.com>",98,0,98
golang/go,7b4d065267aec8f899a5c5423c1ac501d31807cc,Michael Pratt,2025-05-29T16:41:21Z,"runtime: add vgetrandom lock rank  vgetrandomGetState can call malloc, so this is not a leaf lock.  Our staticlockrank builder doesn't support vgetrandom, so it didn't catch this.  Cq-Include-Trybots: luci.golang.try:gotip-linux-amd64-staticlockranking Change-Id: I6a6a636c36c9172e4ebf9493c10cb23cac29a13f Reviewed-on: https://go-review.googlesource.com/c/go/+/677255 LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Reviewed-by: Michael Knyszek <mknyszek@google.com>",28,21,49
golang/go,e481a08e0ecb823f368318b142d3dec7340fe51e,Michael Pratt,2025-05-28T20:01:33Z,"runtime: guarantee no GOMAXPROCS update syscalls after GOMAXPROCS call  We already guarantee that no automatic updates to GOMAXPROCS occur after a GOMAXPROCS call returns. This is easily achieved by having the update goroutine double-check that updates are still allowed during STW before committing the new value.  However, it is possible for sysmon to concurrently run defaultGOMAXPROCS to compute a new GOMAXPROCS value after GOMAXPROCS returns. This new value will be discarded later, but we'll still perform the system calls necessary to compute the new value.  Normally this distinction doesn't matter, but if you want to sandbox a Go program, then you may want to disable GOMAXPROCS updates to reduce the system call footprint. A call to GOMAXPROCS will disable updates, but without a guarantee on when sysmon will observe the change it is somewhat fragile.  Add explicit synchronization between GOMAXPROCS and sysmon to guarantee that sysmon won't run defaultGOMAXPROCS after GOMAXPROCS returns.  The synchronization is a bit complex because we can't hold a mutex across STW, nor take a semaphore from sysmon, but the result isn't too bad.  One oddity is that sched.customGOMAXPROCS and gomaxprocs are no longer updated in lockstep (even though both are protected by sched.lock), but I don't believe anything should depend on that.  For #73193.  Cq-Include-Trybots: luci.golang.try:gotip-linux-amd64-staticlockranking Change-Id: I6a6a636cff243a9b69ac1b5d2f98925648e60236 Reviewed-on: https://go-review.googlesource.com/c/go/+/677037 LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Reviewed-by: Michael Knyszek <mknyszek@google.com>",103,34,137
golang/go,dd678172e378e62cc85d075676e040354f4628da,Gopher Robot,2025-05-29T17:10:09Z,doc/next: delete  The release note fragments have been merged and added as _content/doc/go1.25.md in x/website in CL 677175.  For #71661.  Change-Id: Ie1a895de03c20941a38b0a6a45f4cf6bc21278e1 Reviewed-on: https://go-review.googlesource.com/c/go/+/677335 Auto-Submit: Gopher Robot <gobot@golang.org> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Reviewed-by: Michael Knyszek <mknyszek@google.com> Reviewed-by: David Chase <drchase@google.com>,0,590,590
golang/go,c2f0fe5854bbae49327f8222098142ab6db74a99,Damien Neil,2025-05-23T00:18:12Z,"internal/synctest: speed up TestWeak  Run TestWeak for fewer iterations. Five is enough reproduce #73817, which was the motivation for this test. runtime.GC is ridiculously slow on wasm, and not especially fast anywhere else.  Change-Id: Ieb5235d064b123cbc22a306425e385c273b54493 Reviewed-on: https://go-review.googlesource.com/c/go/+/675716 Reviewed-by: Michael Pratt <mpratt@google.com> Auto-Submit: Damien Neil <dneil@google.com> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com>",1,1,2
golang/go,b170c7e94c478e616d194af95caa7747d9fa4725,Damien Neil,2025-05-20T22:56:43Z,"runtime, internal/synctest, sync: associate WaitGroups with bubbles  Add support to internal/synctest for managing associations between arbitrary pointers and synctest bubbles. (Implemented internally to the runtime package by attaching a special to the pointer.)  Associate WaitGroups with bubbles. Since WaitGroups don't have a constructor, perform the association when Add is called. All Add calls must be made from within the same bubble, or outside any bubble.  When a bubbled goroutine calls WaitGroup.Wait, the wait is durably blocking iff the WaitGroup is associated with the current bubble.  Change-Id: I77e2701e734ac2fa2b32b28d5b0c853b7b2825c9 Reviewed-on: https://go-review.googlesource.com/c/go/+/676656 Reviewed-by: Michael Knyszek <mknyszek@google.com> Reviewed-by: Michael Pratt <mpratt@google.com> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Auto-Submit: Damien Neil <dneil@google.com>",324,31,355
golang/go,3b77085b40bf0d53528d6852d07c00c81021c855,Michael Pratt,2025-05-28T18:34:52Z,"runtime: increment updatemaxprocs metric only when disabled  The updatemaxprocs metric logic is currently backwards. We only increment the metric when we update GOMAXPROCS, but that only occurs if updatemaxprocs is enabled.  Instead, the metric is supposed to increment when updatemaxprocs is disabled and there would be different behavior if it were enabled.  Theoretically we should run the entire update system in a dry run mode, and only bail out right before committing updates. But that is an awful lot of effort for a feature that is disabled. Plus some users (like sandboxes) want to completely disable the update syscalls (sched_getaffinity and pread64). If we still do dry run updates then we need an additional GODEBUG for completely disabling functionality.  This CL also avoids starting the update goroutine at all if disabled, since it isn't needed.  For #73193.  Change-Id: I6a6a636ceec8fced44e36cb27dcb1b4ba51fce33 Reviewed-on: https://go-review.googlesource.com/c/go/+/677036 Reviewed-by: Michael Knyszek <mknyszek@google.com> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Auto-Submit: Michael Pratt <mpratt@google.com>",16,3,19
golang/go,f8c51b1a6c3d6ebfdbeab3c81d4157aefe0e8b71,Alan Donovan,2025-05-21T15:21:31Z,"go/doc: NewFromFiles: fix panic on Files with SkipObjectResolution  This CL fixes a panic in NewFromFiles when it is provided files produced by the parser in SkipObjectResolution mode, which skips the step of connecting ast.Idents to (deprecated) ast.Objects. Instead of calling ast.NewPackage, which performs a number of unnecessary steps, we just construct the ast.Package directly.  Fixes #66290  Change-Id: Id55bd30d8afb9d396c3901070e7607c5a22030d5 Reviewed-on: https://go-review.googlesource.com/c/go/+/675036 Reviewed-by: Robert Griesemer <gri@google.com> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com>",18,28,46
golang/go,263bc50c90ff8e0bcd55765819056807acfd20ab,Gopher Robot,2025-05-28T16:38:20Z,api: promote next to go1.25  Change-Id: I96dd383ea0bf0b69d2d9058334b4bbcfbe50c77c Reviewed-on: https://go-review.googlesource.com/c/go/+/676895 LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Auto-Submit: Gopher Robot <gobot@golang.org> Reviewed-by: David Chase <drchase@google.com> Reviewed-by: Michael Knyszek <mknyszek@google.com>,110,110,220
golang/go,dbaa2d3e6525a29defdff16f354881a93974dd2e,Keith Randall,2025-05-29T00:09:05Z,"cmd/compile: do nil check before calling duff functions, on arm64 and amd64  On these platforms, we set up a frame pointer record below the current stack pointer, so when we're in duffcopy or duffzero, we get a reasonable traceback. See #73753.  But because this frame pointer record is below SP, it is vulnerable. Anything that adds a new stack frame to the stack might clobber it. Which actually happens in #73748 on amd64. I have not yet come across a repro on arm64, but might as well be safe here.  The only real situation this could happen is when duffzero or duffcopy is passed a nil pointer. So we can just avoid the problem by doing the nil check outside duffzero/duffcopy. That way we never add a frame below duffzero/duffcopy. (Most other ways to get a new frame below the current one, like async preempt or debugger-generated calls, don't apply to duffzero/duffcopy because they are runtime functions; we're not allowed to preempt there.)  Longer term, we should stop putting stuff below SP. #73753 will include that as part of its remit. But that's not for 1.25, so we'll do the simple thing for 1.25 for this issue.  Fixes #73748  Change-Id: I913c49ee46dcaee8fb439415a4531f7b59d0f612 Reviewed-on: https://go-review.googlesource.com/c/go/+/676916 LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Reviewed-by: Cherry Mui <cherryyz@google.com> Reviewed-by: Keith Randall <khr@google.com>",92,34,126
golang/go,6160fa59b6523e781db47eb1ee8f929398f2bb78,Michael Pratt,2025-05-28T18:10:38Z,"runtime: rename updateGOMAXPROCS to updateMaxProcsG  There are other parts to updating GOMAXPROCS than just the helper goroutine, so make the naming more specific.  For #73193.  Change-Id: I6a6a636c31ac80c8d76afe90c0bfc29d3086af4d Reviewed-on: https://go-review.googlesource.com/c/go/+/677035 Auto-Submit: Michael Pratt <mpratt@google.com> Reviewed-by: Michael Knyszek <mknyszek@google.com> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com>",52,50,102
golang/go,ae6c098f482f74a077ee690082e4b785d4689999,Michael Anthony Knyszek,2025-05-28T17:48:40Z,doc/next: add release note for riscv64 plugin build mode  Change-Id: I9df20038cc1d6bf86f789e962903766856555a13 Reviewed-on: https://go-review.googlesource.com/c/go/+/676956 Auto-Submit: Michael Knyszek <mknyszek@google.com> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Reviewed-by: Cherry Mui <cherryyz@google.com>,5,3,8
golang/go,18ad74dd36a9bbdc6a95a9de398b3cd8917898ae,Mark Freeman,2025-05-28T15:10:53Z,"go/types, types2: dump position stack for non-bailout panics  We make sure to dump to stderr since that's where the panic information ends up. Long traces get truncated with a ""..."" in the middle. We pick an arbitrary limit of 10 positions, but this could be changed.  For #51603  Change-Id: I02326a93181e94e1c48afc05684240540c2c90ba Reviewed-on: https://go-review.googlesource.com/c/go/+/676815 Reviewed-by: Robert Griesemer <gri@google.com> Auto-Submit: Mark Freeman <mark@golang.org> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com>",38,2,40
golang/go,70109eb32625487d9c774d602a4fa2422e218f1b,Cherry Mui,2025-05-21T18:32:21Z,"cmd/link: allow linkname reference to a TEXT symbol regardless of size  In CL 660696, we made the linker to choose the symbol of the larger size in case there are multiple contentless declarations of the same symbol. We also made it emit an error in the case that there are a contentless declaration of a larger size and a definition with content of a smaller size. In this case, we should choose the definition with content, but the code accesses it through the declaration of the larger size could fall into the next symbol, potentially causing data corruption. So we disallowed it.  There is one spcial case, though, that some code uses a linknamed variable declaration to reference a function in assembly, in order to take its address. The variable is often declared as uintptr. The function symbol is the definition, which could sometimes be shorter. This would trigger the error case above, causing existing code failing to build.  This CL allows it as a special case. It is still not safe to access the variable's content. But it is actually okay to just take its address, which the existing code often do.  Fixes #73617.  Change-Id: I467381bc5f6baa16caee6752a0a824c7185422f6 Reviewed-on: https://go-review.googlesource.com/c/go/+/676636 Reviewed-by: David Chase <drchase@google.com> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com>",66,23,89
golang/go,eff328804253e40a2de9c5d89cf7a7c1e23aa11d,Michael Anthony Knyszek,2025-05-28T17:39:14Z,doc/next: tweak runtime release notes  - Add section headings to make the section easier to read. - Reorder features to better reflect their impact and importance. - Tweak some awkward wording here and there.  Change-Id: If72c526f4b3a26a7a4584d6c59857db02c0c1338 Reviewed-on: https://go-review.googlesource.com/c/go/+/676818 Reviewed-by: Michael Pratt <mpratt@google.com> Auto-Submit: Michael Knyszek <mknyszek@google.com> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com>,38,28,66
golang/go,c61e5e72447b568dd25367f592962c7ebf28b1c7,Dmitri Shuralyov,2025-05-28T15:23:36Z,lib/time: update to 2025b/2025b  Commit generated by update.bash.  For #22487.  Change-Id: If4132dc12296b23b85a221bffdb1b854d0332010 Reviewed-on: https://go-review.googlesource.com/c/go/+/676855 Reviewed-by: Dmitri Shuralyov <dmitshur@google.com> Auto-Submit: Dmitri Shuralyov <dmitshur@golang.org> Reviewed-by: Carlos Amedee <carlos@golang.org> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com>,2,2,4
golang/go,ed08d2ad0928c0fc77cc2053863616ffb58c5aac,Damien Neil,2025-05-27T21:16:17Z,"os: don't follow symlinks on Windows when O_CREATE|O_EXCL and read-only  Fix a bug in CL 672396, where we add FILE_FLAG_OPEN_REPARSE_POINT to the attributes passed to CreateFile, but then overwrite the attributes with FILE_ATTRIBUTE_READONLY when opening a file with a read-only permissions mode.  For #73702  Change-Id: I6c10bf470054592bafa031732585fc3155c61341 Reviewed-on: https://go-review.googlesource.com/c/go/+/676655 Auto-Submit: Damien Neil <dneil@google.com> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Reviewed-by: Alan Donovan <adonovan@google.com>",17,17,34
golang/go,fce9d4515defec0473ca3a685408ef5304d23aa9,Damien Neil,2025-05-21T22:08:08Z,"runtime, testing/synctest: verify cleanups/finalizers run outside bubbles  Cleanup functions and finalizers must not run in a synctest bubble. If they did, a function run by the GC at an unpredictable time could unblock a bubble that synctest believes is durably blocked.  Add a test verifying that cleanups and finalizers are always run by non-bubbled goroutines. (This is already the case because we never add system goroutines to a bubble.)  For #67434  Change-Id: I5a48db2b26f9712c3b0dc1f425d99814031a2fc1 Reviewed-on: https://go-review.googlesource.com/c/go/+/675257 Reviewed-by: Michael Pratt <mpratt@google.com> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Auto-Submit: Damien Neil <dneil@google.com>",29,6,35
golang/go,b78e38065efd5f4079564b9e8e3529950ba0dd52,Damien Neil,2025-05-21T20:02:59Z,runtime: define lock ranking between weak pointers and synctest  Fixes #73817  Change-Id: I0101bdc797237b4c7eb58b414c71b009b0b44447 Reviewed-on: https://go-review.googlesource.com/c/go/+/675176 LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Reviewed-by: Michael Pratt <mpratt@google.com> Auto-Submit: Damien Neil <dneil@google.com>,23,2,25
golang/go,961818e0131aaa7468616a90ce9ebf00111ccdaa,thepudds,2025-05-27T17:32:36Z,"cmd/compile/internal/walk: use original type for composite literals in addrTemp  When creating a new *ir.Name or *ir.LinksymOffsetExpr to represent a composite literal stored in the read-only data section, we should use the original type of the expression that was found via ir.ReassignOracle.StaticValue. (This is needed because the StaticValue method can traverse through OCONVNOP operations to find its final result.)  Otherwise, the compilation may succeed, but the linker might erroneously conclude that a type is not used and prune an itab when it should not, leading to a call at execution-time to runtime.unreachableMethod, which throws ""fatal error: unreachable method called. linker bug?"".  The tests exercise both the case of a zero value struct literal that can be represented by the read-only runtime.zeroVal, which was the case of the simplified example from #73888, and also modifies that example to test the non zero value struct literal case.  This CL makes two similar changes for those two cases. We can get either of the tests we are adding to fail independently if we only make a single corresponding change.  Fixes #73888 Updates #71359  Change-Id: Ifd91f445cc168ab895cc27f7964a6557d5cc32e5 Reviewed-on: https://go-review.googlesource.com/c/go/+/676517 Reviewed-by: Keith Randall <khr@golang.org> Reviewed-by: Keith Randall <khr@google.com> Auto-Submit: Keith Randall <khr@golang.org> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Reviewed-by: Michael Knyszek <mknyszek@google.com>",74,2,76
golang/go,c8c3d661b084c01242fa7837e3853d7492ba1717,Carlos Amedee,2025-05-23T20:41:51Z,"runtime/trace: add a trace validation test for different trace orders  This adds a test which validates the traces generated by the execution tracer and the flight recorder depending on the order where they are stopped and started. This test uncovered that under certain circumstances, the traces which were produced would possibly be missing the trace header. All traces have the trace headers included now. Clock snapshot checks have been disabled for Windows and WASM.  Change-Id: I5be719d228300469891fc56817fbce4ba5453fff Reviewed-on: https://go-review.googlesource.com/c/go/+/675975 Auto-Submit: Carlos Amedee <carlos@golang.org> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Reviewed-by: Michael Knyszek <mknyszek@google.com>",170,0,170
golang/go,0e1b14bc2e13aed697854e3859f73ba4dba9fb22,Michael Matloob,2025-05-23T17:19:44Z,"cmd/go: fix get with the new 'work' pattern  Before this change, go get didn't have support for the work pattern. The work pattern is new in Go 1.25 and evaluates to the packages in the work (also called main) modules. 'go get work' would cause a panic because 'work' would be incorrectly considered a path pattern and then queryPath would would try to query a metapackage pattern (resulting in the internal error panic). This change properly supports the work pattern in go get.  It's pretty simple: First, we need to seprate the work pattern from the other patterns. Then in performWorkQueries, which maps queries to the modules that satisfy them, we return the single main module because by definition the work pattern is the set of packages in the work modules, and go get always runs in single module mode. (The exception is when the work module contains no packages, in which case we report a warning, and return no candidates because nothing is needed to resolve nothing).  The rest of the work is already done by loading the packages matching the query and finding missing imports in the call to findAndUpgradeImports in runGet.  Change-Id: I3c4610878b3d930a1d106cc59d9a0be194d966cd Reviewed-on: https://go-review.googlesource.com/c/go/+/675895 Reviewed-by: Michael Matloob <matloob@google.com> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Reviewed-by: Michael Pratt <mpratt@google.com>",96,0,96
golang/go,09f1546cba2998a8d89f4506c16ba3bff115071d,Sean Liao,2025-05-27T18:11:28Z,log/slog: fix longtests with empty source  Tests broken by CL 674875  Updates #73808  Change-Id: I7ad93e4a8ba1977d136f99b9d4963fa8a9c159ff Reviewed-on: https://go-review.googlesource.com/c/go/+/676595 Auto-Submit: Michael Knyszek <mknyszek@google.com> TryBot-Bypass: Michael Knyszek <mknyszek@google.com> Reviewed-by: Michael Knyszek <mknyszek@google.com> Reviewed-by: Dmitri Shuralyov <dmitshur@google.com>,1,1,2
golang/go,de05282a2c3bba1d869f8686e7b38d582af17a0a,David Chase,2025-05-27T18:21:11Z,doc/next: add small header to TODO  Change-Id: I91c03f455fff8e4078f3297ea357cd1e1dd09f66 Reviewed-on: https://go-review.googlesource.com/c/go/+/676536 Reviewed-by: Dmitri Shuralyov <dmitshur@golang.org> Reviewed-by: Dmitri Shuralyov <dmitshur@google.com> Auto-Submit: David Chase <drchase@google.com> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com>,4,0,4
golang/go,c146a61d4c9f76484206a83fa0aac64547f8acdf,Alan Donovan,2025-05-23T15:35:41Z,"go/token: benchmark FileSet.{Position,AddExistingFiles}  This CL adds a benchmark of FileSet.Position, the lookup operation, and the new AddExistingFiles. It is evident that its behavior is quadratic in important cases:  (Apple M1) BenchmarkFileSet_AddExistingFiles/sequence-8         	       3	 362768139 ns/op  Change-Id: I256fdc776135e1924666d127afb37dacbefc860f Reviewed-on: https://go-review.googlesource.com/c/go/+/675875 Reviewed-by: Robert Findley <rfindley@google.com> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Auto-Submit: Alan Donovan <adonovan@google.com>",109,3,112
golang/go,ae0824883e7f851173ff1855ad1c638bec87a426,Alan Donovan,2025-05-19T18:11:51Z,"go/ast: deprecate FilterPackage, PackageExports, MergePackageFiles  (More symbols that belong to the ast.Object deprecation.)  Fixes #73088 Fixes #7124 Updates #52463 Updates #71122  Change-Id: I10e3ef35b587da2f3f0a65e9154e33bd53e7a093 Reviewed-on: https://go-review.googlesource.com/c/go/+/674176 LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Reviewed-by: Robert Griesemer <gri@google.com>",25,0,25
golang/go,8dd7d2111b8622dac4b0127fa1d26da3c1c4c274,Michael Pratt,2025-05-27T14:37:50Z,"runtime: skip nil Ps in allp during cleanup flush  cleanupQueue.Flush is reachable from mallocgc via sweepAssist. Normally allp will continue all valid Ps, but procresize itself increases the size of allp and then allocates new Ps to place in allp. If we get perfectly unlucky, the new(p) allocations will complete sweeping and cleanupQueue.Flush will dereference a nil pointer from allp. Avoid this by skipping nil Ps.  I've looked through every other use of allp and none of them appear to be reachable from procresize.  Change-Id: I6a6a636cab49ef268eb8fcd9ff9a96790d9c5685 Reviewed-on: https://go-review.googlesource.com/c/go/+/676515 Auto-Submit: Michael Pratt <mpratt@google.com> Reviewed-by: Carlos Amedee <carlos@golang.org> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Reviewed-by: Michael Knyszek <mknyszek@google.com>",7,0,7
golang/go,3a3c006ac07886aa923a8aad0a4b3ed954640973,Filippo Valsorda,2025-05-23T16:04:36Z,crypto/tls: enable signature algorithm BoGo tests (and fix two bugs)  The two bugs are very minor:  - We were trying to set the ConnectionState CurveID field even if the   RSA key exchange was in use  - We were sending the wrong alert from TLS 1.2 clients if none of the   certificate signature algorithms were supported  Change-Id: I6a6a46564f5a9f1a5d44e54fc59a650118ad67d5 Reviewed-on: https://go-review.googlesource.com/c/go/+/675918 Auto-Submit: Filippo Valsorda <filippo@golang.org> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Reviewed-by: David Chase <drchase@google.com> Reviewed-by: Daniel McCarney <daniel@binaryparadox.net> Reviewed-by: Michael Knyszek <mknyszek@google.com>,253,155,408
golang/go,ed70477909c97f86f8d73bee2d8680b6788acec7,jiahua wang,2025-05-20T05:40:18Z,errors: add joinError Unwrap example  Change-Id: Id7489247e9bdd413f82fdf5a70197856c47abfb5 Reviewed-on: https://go-review.googlesource.com/c/go/+/674336 Reviewed-by: Michael Knyszek <mknyszek@google.com> Reviewed-by: Sean Liao <sean@liao.dev> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Reviewed-by: David Chase <drchase@google.com> Auto-Submit: Sean Liao <sean@liao.dev>,2,0,2
golang/go,787362327fbc2ec010659cd9067cc899cc15203c,cuishuang,2025-05-18T08:28:13Z,"io/fs: add examples for Glob,ReadFile and ValidPath  Change-Id: I8451179bc0fa88b7e60afbc6fd9e06a22a94f3aa Reviewed-on: https://go-review.googlesource.com/c/go/+/673835 Reviewed-by: Sean Liao <sean@liao.dev> Auto-Submit: Sean Liao <sean@liao.dev> Reviewed-by: Michael Knyszek <mknyszek@google.com> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Reviewed-by: David Chase <drchase@google.com>",81,0,81
golang/go,3fd729b2a14a7efcf08465cbea60a74da5457f06,Antonio Pitasi,2025-05-21T09:58:13Z,log/slog: make TextHandler discard empty Source  Fixes #73808  Change-Id: Ica4b7a63eebbf0fff41d68f4de928f9da90c8ada Reviewed-on: https://go-review.googlesource.com/c/go/+/674875 Reviewed-by: Jonathan Amsterdam <jba@google.com> Reviewed-by: Dmitri Shuralyov <dmitshur@google.com> Reviewed-by: Sean Liao <sean@liao.dev> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com>,7,1,8
golang/go,c07ffe980a52b309d48d33265cfee438a01cb513,Sean Liao,2025-05-24T11:10:12Z,testing/synctest: correct duration in doc example  Fixes #73839  Change-Id: I961641c6d8244cdeb101a3c9ae91931828a893ad Reviewed-on: https://go-review.googlesource.com/c/go/+/676035 LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Reviewed-by: Dmitri Shuralyov <dmitshur@google.com> Reviewed-by: Alan Donovan <adonovan@google.com>,4,4,8
golang/go,3db50924e2c74dfa0cb9295215529a65880eb708,Mateusz Poliwczak,2025-05-23T17:28:37Z,"hash: mention the new Cloner interface in Hash docs.  We mention that already in Cloner docs, but to be consistent, also mention that in Hash.  Change-Id: Iee33d545662b7054973666bd45998a37f3037a51 Reviewed-on: https://go-review.googlesource.com/c/go/+/675915 LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Reviewed-by: Filippo Valsorda <filippo@golang.org> Reviewed-by: Roland Shoemaker <roland@golang.org> Reviewed-by: David Chase <drchase@google.com>",2,2,4
golang/go,aca9f4e484b529aeb15bf6f9633a5f07d9bab940,Filippo Valsorda,2025-05-21T20:41:54Z,crypto/tls: signature_algorithms in CertificateRequest can't be empty  Change-Id: I6a6a4656ab97e1f247df35b2589cd73461b4ac76 Reviewed-on: https://go-review.googlesource.com/c/go/+/675917 Auto-Submit: Filippo Valsorda <filippo@golang.org> Reviewed-by: David Chase <drchase@google.com> Reviewed-by: Dmitri Shuralyov <dmitshur@google.com> Reviewed-by: Daniel McCarney <daniel@binaryparadox.net> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com>,1,1,2
golang/go,8cb0941a85de6ddbd6f49f8e7dc2dd3caeeee61c,Carlos Amedee,2024-12-23T16:52:43Z,net: use runtime.AddCleanup instead of runtime.SetFinalizer  Adds TODO for replacement of runtime.SetFinalizer.  Fixes #70907  Change-Id: Ic009018a93ccc46a776ae34afac44635d2340cbf Reviewed-on: https://go-review.googlesource.com/c/go/+/638557 Reviewed-by: Damien Neil <dneil@google.com> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Auto-Submit: Carlos Amedee <carlos@golang.org>,4,0,4
golang/go,68f4434df02c3d1bde5b42c9adeaf79d15858ff3,Michael Pratt,2025-05-23T21:31:53Z,runtime/trace: match traceClockNow types  runtime.traceClockNow returns a (named) uint64. Make the declaration in runtime/trace match this type.  Change-Id: I6a6a636ce3596cbc6fc5bac3590703b7b4839c4d Reviewed-on: https://go-review.googlesource.com/c/go/+/675976 Reviewed-by: Carlos Amedee <carlos@golang.org> Auto-Submit: Michael Pratt <mpratt@google.com> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com>,1,1,2
golang/go,8b1978f6143f211e1d7ed1599c1b64e3f44a1c80,David Chase,2025-05-23T18:49:13Z,"doc/next: add crudely processed todos  This is the output of relnote -goroot=... todo, with each todo in a comment, followed by summary text from the issue and perhaps the CL, lightly processed into markdown.  For #71661.  Change-Id: I855c4c4ee02491b5b6113822baf69dbafb4e54ab Reviewed-on: https://go-review.googlesource.com/c/go/+/675877 Reviewed-by: Dmitri Shuralyov <dmitshur@golang.org> Reviewed-by: Dmitri Shuralyov <dmitshur@google.com> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com>",204,1,205
golang/go,c0e149b6b1aa2daca64c00804809bc2279e21eee,Filippo Valsorda,2025-05-23T10:44:24Z,"net/http: document that ServeMux.Handler can also synthetize a 405  Also, fix a minor typo in ServeMux.Handle and ServeMux.HandleFunc.  Change-Id: I6a6a46565719104cb8f2484daf0e39f35b55a078 Reviewed-on: https://go-review.googlesource.com/c/go/+/675835 Reviewed-by: David Chase <drchase@google.com> Auto-Submit: Filippo Valsorda <filippo@golang.org> Reviewed-by: Damien Neil <dneil@google.com> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com>",4,3,7
golang/go,db3e02994c98f1d6dc00f7df807579c4619885c7,Carlos Amedee,2025-05-22T17:33:28Z,runtime/trace: fix flaky test for SetMinAge  This change fixes the flaky test which expects setting SetMinAge to a small ammount. It expects two sync events but should realistically expect up to 3.  Change-Id: Ibd02fe55ebca99eb880025eb968fcebae9cb09c9 Reviewed-on: https://go-review.googlesource.com/c/go/+/675597 Reviewed-by: Michael Knyszek <mknyszek@google.com> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com>,12,7,19
golang/go,db55b83ce437577c0738f56808853b078d656a0b,Keith Randall,2025-05-22T22:17:37Z,doc: fix TBD mark  Change-Id: I2133e3c62b4de0cec08eeb120d593c644643a62c Reviewed-on: https://go-review.googlesource.com/c/go/+/675755 Reviewed-by: Dmitri Shuralyov <dmitshur@golang.org> Auto-Submit: Dmitri Shuralyov <dmitshur@golang.org> Reviewed-by: Keith Randall <khr@google.com> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Reviewed-by: Dmitri Shuralyov <dmitshur@google.com>,1,1,2
golang/go,aec96d686be16fda519f6fd4a6e3bbfe3454c0b9,Keith Randall,2025-04-16T20:50:44Z,doc: mention stack allocation of variable-sized make calls  Also mention the bisect tool and flag used to track down incorrect uses.  Change-Id: Id36a236e1bb2733b8611b22a5b16916e7d9f5522 Reviewed-on: https://go-review.googlesource.com/c/go/+/666075 Reviewed-by: Dmitri Shuralyov <dmitshur@golang.org> Reviewed-by: Keith Randall <khr@google.com> Reviewed-by: Dmitri Shuralyov <dmitshur@google.com> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com>,12,0,12
golang/go,c684dfcb8a8fe38a8414bfd07b94e9995e5cd308,Michael Anthony Knyszek,2025-05-22T00:29:14Z,"runtime: don't spin looking for a tiny alloc address with asan or race  CL 674655 modified the checkfinalizers test to spin looking for an appropriate address to trip the detector, but this doesn't work with ASAN or in race mode, which both disable the tiny allocator.  Fixes #73834.  Change-Id: I27416da1f29cd953271698551e9ce9724484c683 Reviewed-on: https://go-review.googlesource.com/c/go/+/675395 LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Reviewed-by: Michael Pratt <mpratt@google.com>",19,12,31
golang/go,bfbf736564925fd91701a08395f903955cb4cbc7,Cuong Manh Le,2025-01-10T05:49:59Z,cmd/compile: do not shapify when reading reshaping expr  Fixes #71184  Change-Id: I22e7ae5203311e86a90502bfe155b0597007887d Reviewed-on: https://go-review.googlesource.com/c/go/+/641955 Auto-Submit: Cuong Manh Le <cuong.manhle.vn@gmail.com> Reviewed-by: Keith Randall <khr@google.com> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Reviewed-by: Keith Randall <khr@golang.org> Reviewed-by: David Chase <drchase@google.com>,31,1,32
golang/go,b1f259b1b42f055863a67492e7815ec752eae56b,Cuong Manh Le,2025-04-25T12:13:52Z,"cmd/compile: fix ICE with recursive alias type parameter  CL 585399 fixed an initialization loop during IR contruction that involving alias type, by avoiding publishing alias declarations until the RHS type expression has been constructed.  There's an assertion to ensure that the alias's type must be the same during the initialization. However, that assertion is too strict, since we may construct different instances of the same type, if the type is an instantination of generic type.  To fix this, we could use types.IdenticalStrict to ensure that these types matching exactly.  Updates #66873. Updates #73309.  Change-Id: I2559bed37e21615854333fb1057d7349406e6a1b Reviewed-on: https://go-review.googlesource.com/c/go/+/668175 Reviewed-by: David Chase <drchase@google.com> Reviewed-by: Keith Randall <khr@golang.org> Auto-Submit: Cuong Manh Le <cuong.manhle.vn@gmail.com> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Reviewed-by: Keith Randall <khr@google.com>",21,1,22
golang/go,155ba387a93fddbd6ced288fe539a55c31b2597e,Michael Matloob,2025-05-22T16:40:51Z,"cmd/doc: properly set GOPROXY to avoid deprecation checks  This change fixes a bug that was introduced in CL 675155. Instead of doing the two step download and run with GOPROXY=off, do the run with GOPROXY=<download cache>:$GOPROXY, so that we use the previously downloaded version of pkgsite as the latest.  Fixes #73833  Change-Id: I8803426498ab026602805d6448a130eb11458c99 Reviewed-on: https://go-review.googlesource.com/c/go/+/675576 Reviewed-by: Jonathan Amsterdam <jba@google.com> Reviewed-by: Michael Matloob <matloob@google.com> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com>",11,0,11
golang/go,ef3bb638de442dc41d1e34a32e893d2041731e8c,Michael Matloob,2025-05-22T16:12:48Z,"Revert ""cmd/doc: better support for no network""  This reverts commit 988eb0d11e8d96e8ca150f401ed82326b276f653.  Reason for revert: breaks viewing documentation for unfetched modules  For #73833  Change-Id: I89bc459e820c85e96837d1707058501488a14eef Reviewed-on: https://go-review.googlesource.com/c/go/+/675575 Reviewed-by: Jonathan Amsterdam <jba@google.com> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Reviewed-by: Michael Matloob <matloob@google.com>",2,10,12
golang/go,a0dc7bf08481d906cb7d65d86bb347a583d84fd0,Cuong Manh Le,2025-05-22T11:06:27Z,"cmd/compile: fix ICE when transforming loopvar  When transforming for loop variables, the compiler does roughly following steps:  	(1) prebody = {z := z' for z in leaked}         ...         (4) init' = (init : s/z/z' for z in leaked)  However, the definition of z is not updated to `z := z'` statement, causing ReassignOracle incorrectly use the new init statement with z' instead of z, trigger the ICE.  Fixing this by updating the correct/new definition statement for z during the prebody initialization.  Fixes #73823  Change-Id: Ice2a6741be7478506c58f4000f591d5582029136 Reviewed-on: https://go-review.googlesource.com/c/go/+/675475 Auto-Submit: Cuong Manh Le <cuong.manhle.vn@gmail.com> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Reviewed-by: Keith Randall <khr@google.com> Reviewed-by: David Chase <drchase@google.com>",59,0,59
golang/go,53b9eae3875122a65b387adf18c5cb7a67e824d7,Michael Anthony Knyszek,2025-05-20T20:56:46Z,"runtime: use the immortal weak handle map for sbrk mode  Currently weak pointers break in sbrk mode. We can just use the immortal weak handle map for weak pointers in this case, since nothing is ever freed.  Fixes #69729.  Change-Id: Ie9fa7e203c22776dc9eb3601c6480107d9ad0c99 Reviewed-on: https://go-review.googlesource.com/c/go/+/674656 Reviewed-by: Carlos Amedee <carlos@golang.org> Auto-Submit: Michael Knyszek <mknyszek@google.com> TryBot-Bypass: Michael Knyszek <mknyszek@google.com>",10,0,10
golang/go,27ff0f249c33fdfa9c8e17a0367b46561236f36c,Jake Bailey,2025-05-13T03:39:54Z,"cmd/compile/internal/ssa: eliminate string copies for calls to unique.Make  unique.Make always copies strings passed into it, so it's safe to not copy byte slices converted to strings either. Handle this just like map accesses with string(b) as keys.  This CL only handles unique.Make(string(b)), not nested cases like unique.Make([2]string{string(b1), string(b2)}); this could be done in a followup CL but the map lookup code in walk is sufficiently different than the call handling code that I didn't attempt it. (SSA is much easier).  Fixes #71926  Change-Id: Ic2f82f2f91963d563b4ddb1282bd49fc40da8b85 Reviewed-on: https://go-review.googlesource.com/c/go/+/672135 Reviewed-by: David Chase <drchase@google.com> Reviewed-by: Cherry Mui <cherryyz@google.com> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com>",72,2,74
golang/go,d2db2372a2fd79d539719fa13422d83d6fdfcda1,Cherry Mui,2025-05-22T02:50:09Z,hash/maphash: move purego-only helper functions to build tagged file  Hash.float64 and btoi helper functions are used only in the purego version. Move them to the build tagged file.  Change-Id: I57f9a48966573ab0aee1de759eeddd2331967870 Reviewed-on: https://go-review.googlesource.com/c/go/+/675158 Reviewed-by: David Chase <drchase@google.com> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com>,23,24,47
golang/go,5e6a868b28d3e7a71fa328c18ff5e93d72a1fb67,Cherry Mui,2025-05-21T18:33:13Z,"cmd/compile, unique: model data flow of non-string pointers  Currently, hash/maphash.Comparable escapes its parameter if it contains non-string pointers, but does not escape strings or types that contain strings but no other pointers. This is achieved by a compiler intrinsic.  unique.Make does something similar: it stores its parameter to a central map, with strings cloned. So from the escape analysis's perspective, the non-string pointers are passed through, whereas string pointers are not. We currently cannot model this type of type-dependent data flow directly in Go. So we do this with a compiler intrinsic. In fact, we can unify this and the intrinsic above.  Tests are from Jake Bailey's CL 671955 (thanks!).  Fixes #73680.  Change-Id: Ia6a78e09dee39f8d9198a16758e4b5322ee2c56a Reviewed-on: https://go-review.googlesource.com/c/go/+/675156 LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Reviewed-by: David Chase <drchase@google.com> Reviewed-by: Jake Bailey <jacob.b.bailey@gmail.com>",119,34,153
golang/go,8bf816ae6879fa4537cc6e6e292769df2d7dbb78,thepudds,2025-05-21T20:50:17Z,"cmd/compile/internal/escape: make escape analysis -m=2 logs more accessible  This was the first CL in a series of CLs aimed at reducing how often interface arguments escape for the print functions in fmt.  This CL makes some small improvements to the escape analysis logging.  Here is a sample snippet of the current -m=2 logs:  ./print.go:587:7: parameter p leaks to {heap} with derefs=0: ./print.go:587:7:   flow: p = p: ./print.go:587:7:     from (*pp).printArg(p, err, 'v') (call parameter) at ./print.go:613:13 ./print.go:587:7:   flow: p = p: ./print.go:587:7:     from (*pp).handleMethods(p, verb) (call parameter) at ./print.go:749:22 [..]  If we attempt to tease apart some reasons why the -m=2 logs can be challenging to understand for the uninitiated:  - The ""flow"" lines are very useful, but contain more-or-less abstracted pseudocode. The ""from"" lines most often use actual code. When first looking at the logs, that distinction might not be apparent, which can result in looking back to the original code to hunt for pseudocode that doesn't exist there. (The log example shows 'p = p', but there is no 'p = p' in the original source).  - Escape analysis can be most interesting with inlining, but that can result in seeing overlapping short variable names (e.g., p, b, v...).  - The directionality of the ""flow"" lines might not be obvious, including whether they build top-to-bottom or bottom-to-top.  - The use of '{' and '}' in the -m=2 logs somewhat intersects with Go literals (e.g., if the log says ""{temp}"", an initial thought might be that represents some temp inside of some Go literal).  - And of course, escape analysis itself is subtle.  This CL:  - Adds the function name to the first -m=2 line to provide more context and reduce how often the reader needs to lookup line numbers.  - Uses the Unicode left arrow 'â' rather than '=' on the flow lines to make it clearer that these lines are abstracted away from the original Go code and to help the directionality jump out.  In the future, we can consider changing ""{heap}"", ""{temp}"", ""{storage for foo}"" to something else, but we leave them as is for now.  Two examples with the modifications:  ./f1.go:3:9: parameter inptr leaks to outptr for func1 with derefs=0: ./f1.go:3:9:   flow: localptr â inptr: ./f1.go:3:9:     from localptr := inptr (assign) at ./f1.go:4:11 ./f1.go:3:9:   flow: outptr â localptr: ./f1.go:3:9:     from return localptr (return) at ./f1.go:5:2  ./b.go:14:20: []byte{...} escapes to heap in byteOrderExample: ./b.go:14:20:   flow: b â &{storage for []byte{...}}: ./b.go:14:20:     from []byte{...} (spill) at ./byteorder.go:14:20 ./b.go:14:20:     from b := []byte{...} (assign) at ./byteorder.go:14:11 ./b.go:14:20:   flow: <heap> â b: ./b.go:14:20:     from byteOrder.Uint32(b) (call parameter) at ./byteorder.go:15:32  These changes only affect the -m=2 output and leave the -m=1 output as is.  Updates #8618 Updates #62653  Change-Id: Ic082a371c3d3fa0d8fd8bfbe4d64ec3e1e53c173 Reviewed-on: https://go-review.googlesource.com/c/go/+/524937 Reviewed-by: Cherry Mui <cherryyz@google.com> Reviewed-by: Dmitri Shuralyov <dmitshur@google.com> Auto-Submit: Dmitri Shuralyov <dmitshur@golang.org> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Reviewed-by: David Chase <drchase@google.com>",7,7,14
golang/go,83df0afc4e5c3719a6aca08a798460d38e78fc95,Carlos Amedee,2025-05-14T20:13:24Z,"runtime/trace: add the flight recorder  This change adds the flight recorder to the trace package. Flight recording is a technique in which trace data is kept in a circular buffer and can be flushed upon request. The implementation will be added in follow-up CLs.  The flight recorder has already been implemented inside of the golang.org/x/exp/trace package. This copies the current implementation and modifies it to work within the runtime/trace package.  The changes include:  This adds the ability for multiple consumers (both the execution tracer and the flight recorder) to subscribe to tracing events. This change allows us to add multiple consumers without making major modifications to the runtime. Future optimizations are planned for this functionality.  This removes the use of byte readers from the process that parses and processes the trace batches.  This modifies the flight recorder to not parse out the trace clock frequency, since that requires knowledge of the format that's unfortunate to encode in yet another place. Right now, the trace clock frequency is considered stable for the lifetime of the program, so just grab it directly from the runtime.  This change adds an in-band end-of-generation signal to the internal implementation of runtime.ReadTrace. The internal implementation is exported via linkname to runtime/trace, so the flight recorder can identify exactly when a generation has ended. This signal is also useful for ensuring that subscribers to runtime trace data always see complete generations, by starting or stopping data streaming only at generation boundaries.  For #63185  Change-Id: I5c15345981a6bbe9764a3d623448237e983c64ec Reviewed-on: https://go-review.googlesource.com/c/go/+/673116 Auto-Submit: Michael Knyszek <mknyszek@google.com> Reviewed-by: Michael Knyszek <mknyszek@google.com> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com>",1063,79,1142
golang/go,7589e9604237ad94869c5803af3bf428f108fefa,Julian Zhu,2025-05-16T17:55:12Z,cmd/compile: fold negation into addition/subtraction on s390x  Fold negation into addition/subtraction and avoid double negation.  file      before    after     Î       % addr2line 3909260   3909204   -56     -0.001% asm       6714513   6714505   -8      -0.000% buildid   3680344   3679504   -840    -0.023% cgo       6219857   6219521   -336    -0.005% compile   29527941  29528037  +96     +0.000% cover     6869451   6868731   -720    -0.010% dist      4498817   4498769   -48     -0.001% doc       10483319  10481719  -1600   -0.015% fix       4356204   4355932   -272    -0.006% link      9080951   9080383   -568    -0.006% nm        3899682   3833674   -66008  -1.693% objdump   6347837   6347605   -232    -0.004% pack      3103750   3103454   -296    -0.010% pprof     18849998  18849478  -520    -0.003% test2json 3619671   3619511   -160    -0.004% trace     17164007  17161463  -2544   -0.015% vet       10465861  10465173  -688    -0.007% total     167058409 166983609 -74800  -0.045%  Change-Id: I1b8cf3939b433e1765682196b8fc1aa07d37f895 Reviewed-on: https://go-review.googlesource.com/c/go/+/673476 Auto-Submit: Keith Randall <khr@google.com> Reviewed-by: Keith Randall <khr@google.com> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Reviewed-by: Keith Randall <khr@golang.org> Reviewed-by: Dmitri Shuralyov <dmitshur@google.com>,37,0,37
golang/go,edcde86990abd9d7336eee5115b63d8c0863a5dd,Filippo Valsorda,2025-05-21T21:55:43Z,"crypto,hash: add and implement hash.Cloner  Fixes #69521  Co-authored-by: qiulaidongfeng <2645477756@qq.com> Change-Id: I6a6a465652f5ab7e6c9054e826e17df2b8b34e41 Reviewed-on: https://go-review.googlesource.com/c/go/+/675197 Reviewed-by: Roland Shoemaker <roland@golang.org> Auto-Submit: Filippo Valsorda <filippo@golang.org> Reviewed-by: David Chase <drchase@google.com> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com>",243,22,265
golang/go,de457fc4ea50cc3ac9dd967161b8bc31b79a26dd,Filippo Valsorda,2025-05-21T21:50:56Z,doc: refer to SHAKE in #69518 release note  Change-Id: I6a6a46560b5d78710bd09d2452c80e51da936ec7 Reviewed-on: https://go-review.googlesource.com/c/go/+/675196 Auto-Submit: Filippo Valsorda <filippo@golang.org> Reviewed-by: Dmitri Shuralyov <dmitshur@google.com> Reviewed-by: Roland Shoemaker <roland@golang.org> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com>,1,1,2
golang/go,c1aad08901d753bee7e26b15d15dd1ffad9479a2,Keith Randall,2025-05-21T18:15:24Z,cmd/compile: remove unused function from escape analysis  Change-Id: Ie6ff3d2dd62acfad6c1c7827973f1d9381923ca7 Reviewed-on: https://go-review.googlesource.com/c/go/+/675115 Reviewed-by: David Chase <drchase@google.com> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Reviewed-by: Keith Randall <khr@google.com> Reviewed-by: Cuong Manh Le <cuong.manhle.vn@gmail.com>,0,29,29
golang/go,a473a0dbc48e9c2f08408e1736d40b6f660eb34b,Damien Neil,2025-05-21T20:24:49Z,"net/http: use synctest.Test rather than Run  Use the non-experimental Test function. As a bonus, this lets us drop the hacks we were doing to support t.Cleanup inside bubbles.  Change-Id: I070624e1384494e9d5fcfee594cfbb7680c1beda Reviewed-on: https://go-review.googlesource.com/c/go/+/675315 LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Auto-Submit: Damien Neil <dneil@google.com> Reviewed-by: Jonathan Amsterdam <jba@google.com>",10,30,40
golang/go,3cc8b532f9d561397dd0c66496e1e1a82667c926,Damien Neil,2025-04-03T00:37:34Z,testing: add Attr  Add a new Attr method to testing.TB that emits a test attribute. An attribute is an arbitrary key/value pair.  Fixes #43936  Change-Id: I7ef299efae41f2cf39f2dc61ad4cdd4c3975cdb6 Reviewed-on: https://go-review.googlesource.com/c/go/+/662437 LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Reviewed-by: Alan Donovan <adonovan@google.com> Auto-Submit: Damien Neil <dneil@google.com>,117,0,117
golang/go,763963505e39b753d820ee9aea4791ad5bcc0274,Roland Shoemaker,2025-05-21T18:43:35Z,"crypto/sha3: un-interleave EOR instructions  Move two EOR instructions out of blocks of RAX and BCAX instructions. This appears to get a teeny performance improvement, and matches what the Linux kernel implementation does.  goos: darwin goarch: arm64 pkg: crypto/sha3 cpu: Apple M1 Pro                  â sha3-non-interleaved â          sha3-interleaved           â                  â        sec/op        â    sec/op     vs base               â Sha3_512_MTU-10            3.122Âµ Â±  2%   3.107Âµ Â±  1%       ~ (p=0.382 n=10) Sha3_384_MTU-10            2.266Âµ Â±  7%   2.287Âµ Â± 11%       ~ (p=0.424 n=10) Sha3_256_MTU-10            1.770Âµ Â±  5%   1.793Âµ Â±  4%       ~ (p=0.353 n=10) Sha3_224_MTU-10            1.675Âµ Â±  1%   1.664Âµ Â±  2%       ~ (p=0.210 n=10) Shake128_MTU-10            1.459Âµ Â±  1%   1.446Âµ Â±  1%  -0.89% (p=0.000 n=10) Shake256_MTU-10            1.591Âµ Â±  1%   1.597Âµ Â±  1%       ~ (p=0.342 n=10) Shake256_16x-10            27.46Âµ Â± 13%   27.58Âµ Â±  1%       ~ (p=0.247 n=10) Shake256_1MiB-10           1.269m Â± 10%   1.233m Â±  1%  -2.89% (p=0.000 n=10) Sha3_512_1MiB-10           2.283m Â±  2%   2.275m Â±  0%       ~ (p=0.247 n=10) geomean                    11.62Âµ         11.59Âµ        -0.25%                   â sha3-non-interleaved â           sha3-interleaved           â                  â         B/s          â      B/s       vs base               â Sha3_512_MTU-10           412.4Mi Â±  2%   414.4Mi Â±  1%       ~ (p=0.393 n=10) Sha3_384_MTU-10           568.3Mi Â±  6%   563.2Mi Â± 10%       ~ (p=0.436 n=10) Sha3_256_MTU-10           727.7Mi Â±  4%   718.0Mi Â±  4%       ~ (p=0.353 n=10) Sha3_224_MTU-10           768.8Mi Â±  1%   773.7Mi Â±  1%       ~ (p=0.218 n=10) Shake128_MTU-10           882.7Mi Â±  1%   890.9Mi Â±  1%  +0.92% (p=0.000 n=10) Shake256_MTU-10           808.9Mi Â±  1%   806.2Mi Â±  1%       ~ (p=0.353 n=10) Shake256_16x-10           569.0Mi Â± 11%   566.6Mi Â±  1%       ~ (p=0.247 n=10) Shake256_1MiB-10          787.9Mi Â±  9%   811.3Mi Â±  1%  +2.97% (p=0.000 n=10) Sha3_512_1MiB-10          438.0Mi Â±  2%   439.6Mi Â±  0%       ~ (p=0.247 n=10) geomean                   641.4Mi         643.1Mi        +0.26%  Change-Id: I5f358d954aeccb91928caa79be96c2902d9ac97e Reviewed-on: https://go-review.googlesource.com/c/go/+/675136 LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Auto-Submit: Roland Shoemaker <roland@golang.org> Reviewed-by: Hongxiang Jiang <hxjiang@golang.org> Reviewed-by: Daniel McCarney <daniel@binaryparadox.net>",4,3,7
golang/go,0aeaa6a495b7273f7a2190bc9857710190808e54,Filippo Valsorda,2025-05-20T18:51:11Z,crypto/x509: use truncated SHA-256 for SubjectKeyId  Fixes #71746  Change-Id: I6a6a46568b092933d8ac2039df99ee9f0edf6e56 Reviewed-on: https://go-review.googlesource.com/c/go/+/674477 Reviewed-by: Daniel McCarney <daniel@binaryparadox.net> Reviewed-by: David Chase <drchase@google.com> Reviewed-by: Roland Shoemaker <roland@golang.org> Auto-Submit: Filippo Valsorda <filippo@golang.org> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com>,29,6,35
golang/go,88679da4a396de98e975deb0e007b1d888a55676,Daniel McCarney,2025-05-17T15:33:07Z,"crypto/tls: reject duplicate TLS 1.3 EncryptedExtensions  When a TLS 1.3 client processes the server's encryptedExtensionsMsg it should reject instances that contain duplicate extension types.  RFC 8446 Â§4.2 says:   There MUST NOT be more than one extension of the same type in a given   extension block.  This update matches enforcement done in the client hello unmarshalling, but applied to the TLS 1.3 encrypted extensions message unmarshalling.  Making this change also allows enabling the DuplicateExtensionClient-TLS-TLS13 BoGo test.  Updates #72006  Change-Id: I27a2cd231e4b8762b0d9e2dbd3d8ddd5b87fd5d2 Reviewed-on: https://go-review.googlesource.com/c/go/+/673757 Reviewed-by: David Chase <drchase@google.com> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Auto-Submit: Daniel McCarney <daniel@binaryparadox.net> Reviewed-by: Filippo Valsorda <filippo@golang.org> Reviewed-by: Roland Shoemaker <roland@golang.org>",6,1,7
golang/go,aab8552088ae06ee7d6515d0dfc9efa7979feb5c,Daniel McCarney,2025-05-17T15:17:21Z,"crypto/tls: use decode alert for handshake msg unmarshal err  Previously if instances of the handshakeMessage interface returned false from unmarshal(), indicating an umarshalling error, the crypto/tls package would emit an unexpected_message alert. This commit changes to use a decode_error alert for this condition instead.  The usage-pattern of the handshakeMessage interface is that we switch on the message type, invoke a specific concrete handshakeMessage type's unmarshal function, and then return it to the caller on success. At this point the caller looks at the message type and can determine if the message was unexpected or not. If it was unexpected, the call-sites emit the correct error for that case. Only the caller knows the current protocol state and allowed message types, not the generic handshake decoding logic.  With the above in mind, if we find that within the unmarshal logic for a specific message type that the data we have in hand doesn't match the protocol syntax we should emit a decode_error. An unexpected_message error isn't appropriate because we don't yet know if the message is unexpected or not, only that the message can't be decoded based on the spec's syntax for the type the message claimed to be.  Notably one unit test, TestQUICPostHandshakeKeyUpdate, had to have its test data adjusted because it was previously not testing the right thing: it was double-encoding the type & length prefix data for a key update message and expecting the QUIC logic to reject it as an inappropriate post-handshake message. In reality it was being rejected sooner as an invalid key update message from the double-encoding and this was masked by the previous alert for this condition matching the expected alert.  Finally, changing our alert allows enabling a handful of BoGo tests related to duplicate extensions of the form ""DuplicateExtension[Server|Client]-TLS-[TLS1|TLS11|TLS12|TLS13]"". One test remains skipped (DuplicateExtensionClient-TLS-TLS13), as it requires additional follow-up.  Updates #72006  Change-Id: I27a2cd231e4b8762b0d9e2dbd3d8ddd5b87fd5d1 Reviewed-on: https://go-review.googlesource.com/c/go/+/673738 Reviewed-by: Roland Shoemaker <roland@golang.org> Reviewed-by: David Chase <drchase@google.com> Auto-Submit: Daniel McCarney <daniel@binaryparadox.net> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Reviewed-by: Filippo Valsorda <filippo@golang.org>",8,14,22
golang/go,59211acb5dbde14647e025eb7379675debcf3930,Filippo Valsorda,2025-03-15T14:12:39Z,crypto/tls: disable SHA-1 signature algorithms in TLS 1.2  This implements RFC 9155 by removing support for SHA-1 algorithms:    - we don't advertise them in ClientHello and CertificateRequest     (where supportedSignatureAlgorithms is used directly)    - we don't select them in our ServerKeyExchange and CertificateVerify     (where supportedSignatureAlgorithms filters signatureSchemesForCertificate)    - we reject them in the peer's ServerKeyExchange and CertificateVerify     (where we check against the algorithms we advertised in ClientHello     and CertificateRequest)    Fixes #72883  Change-Id: I6a6a4656e2aafd2c38cdd32090d3d8a9a8047818 Reviewed-on: https://go-review.googlesource.com/c/go/+/658216 LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Auto-Submit: Filippo Valsorda <filippo@golang.org> Reviewed-by: David Chase <drchase@google.com> Reviewed-by: Roland Shoemaker <roland@golang.org> Reviewed-by: Daniel McCarney <daniel@binaryparadox.net>,3818,3801,7619
golang/go,4158ca8d7c521aee5cc48f285f559e74845e973c,Roland Shoemaker,2025-05-08T23:27:36Z,"crypto: add a test for disallowed instructions  WORD and BYTE usage in crypto assembly cores is an anti-pattern which makes extremely sensitive code significantly harder to understand, and can result in unexpected behavior.  Because of this, we've decided to ban their usage in the crypto/ tree (as part of the cryptography assembly policy).  This test walks the crypto/ tree looking for assembly files (those with the filetype .s) and look for lines that match the regular rexpression ""(^|;)\s(BYTE|WORD)\s"".  Change-Id: I60b5283e05e8588fa53273904a9611a411741f72 Reviewed-on: https://go-review.googlesource.com/c/go/+/671099 Reviewed-by: David Chase <drchase@google.com> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Reviewed-by: Daniel McCarney <daniel@binaryparadox.net> Auto-Submit: Roland Shoemaker <roland@golang.org>",53,0,53
golang/go,9112511725e37312a95c9d2c33ff94fe2f4da6af,qiulaidongfeng,2025-01-25T08:45:12Z,hash: add XOF interface  For #69518  Change-Id: I68c7057c776522514eed37cf4dc0cfddec034d3a Reviewed-on: https://go-review.googlesource.com/c/go/+/644235 Reviewed-by: Austin Clements <austin@google.com> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Reviewed-by: Cherry Mui <cherryyz@google.com> Reviewed-by: Filippo Valsorda <filippo@golang.org>,28,0,28
golang/go,eb4069127a7dbdaed480aed80ba6ed1b2ea27901,Filippo Valsorda,2025-05-20T15:34:57Z,crypto/ecdsa: add low-level encoding functions for keys  Fixes #63963  Change-Id: I6a6a4656a729b6211171aca46bdc13fed5fc5643 Reviewed-on: https://go-review.googlesource.com/c/go/+/674475 LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Auto-Submit: Filippo Valsorda <filippo@golang.org> Reviewed-by: Daniel McCarney <daniel@binaryparadox.net> Reviewed-by: David Chase <drchase@google.com> Reviewed-by: Roland Shoemaker <roland@golang.org>,336,0,336
golang/go,e90acc814de247f58330be1d8ba3b11c78c96077,Filippo Valsorda,2025-03-15T11:12:22Z,"crypto/tls: don't advertise TLS 1.2-only sigAlgs in TLS 1.3  If a ClientHello only supports TLS 1.3, or if a CertificateRequest is sent after selecting TLS 1.3, we should not advertise TLS 1.2-only signature_algorithms like PKCS#1 v1.5 or SHA-1.  However, since crypto/x509 still supports PKCS#1 v1.5, and a direct CertPool match might not care about the signature in the certificate at all, start sending a separate signature_algorithms_cert extension to indicate support for PKCS#1 v1.5 and SHA-1 in certificates.  We were already correctly rejecting these algorithms if the peer selected them in a TLS 1.3 connection.  Updates #72883  Change-Id: I6a6a4656ab60e1b7fb20fdedc32604dc156953ae Reviewed-on: https://go-review.googlesource.com/c/go/+/658215 Reviewed-by: Roland Shoemaker <roland@golang.org> Reviewed-by: David Chase <drchase@google.com> Auto-Submit: Filippo Valsorda <filippo@golang.org> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Reviewed-by: Daniel McCarney <daniel@binaryparadox.net>",4187,3995,8182
golang/go,33d3f603c19f46e6529483230465cd6f420ce23b,Dmitri Shuralyov,2025-05-21T17:13:48Z,"cmd/link/internal/ld: use 12.0.0 OS/SDK versions for macOS linking  Go 1.25 will require macOS 12 Monterey or later, so macOS 11 will be unsupported. The comment here suggests using a supported macOS version, and that it can be the most recent one.  For now, make a minimal change of going from 11.0.0 to 12.0.0 so that the chosen version is a supported one (although not the most recent).  However, it looks like even in CL 460476 (where the comment was added) we were staying with the macOS version that matched Go's oldest, so we might not have have recent experience with going beyond that. Update the comment accordingly.  For #69839.  Change-Id: I90908971b0d5a8235ce77dc6bc9649e86008270a Cq-Include-Trybots: luci.golang.try:gotip-darwin-amd64-longtest,gotip-darwin-arm64-longtest,gotip-darwin-amd64_12,gotip-darwin-amd64_14,gotip-darwin-arm64_12,gotip-darwin-arm64_15 Reviewed-on: https://go-review.googlesource.com/c/go/+/675095 LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Reviewed-by: Cherry Mui <cherryyz@google.com> Auto-Submit: Dmitri Shuralyov <dmitshur@golang.org> Reviewed-by: Dmitri Shuralyov <dmitshur@google.com>",6,4,10
golang/go,09f99c02ddd0c2687550b77cc885ed6b7b5476ed,HowJmay,2025-04-23T20:57:52Z,"crypto/sha3: add SIMD implementation with ARMv8.2 features  On ARMv8 four SIMD instructions, EOR3, RAX1, XAR, BCAX are added to accelerate sha3 operations. Here the SIMD version of sha3 on ARMv8 is added.  fips140: off goos: darwin goarch: arm64 pkg: crypto/sha3 cpu: Apple M2                 â 9e72f5fe60  â          ab93158ba0-dirty          â                 â   sec/op    â   sec/op     vs base               â Sha3_512_MTU-8    6.497Âµ Â± 1%   2.988Âµ Â± 0%  -54.01% (p=0.002 n=6) Sha3_384_MTU-8    4.639Âµ Â± 5%   2.142Âµ Â± 1%  -53.83% (p=0.002 n=6) Sha3_256_MTU-8    3.631Âµ Â± 1%   1.698Âµ Â± 6%  -53.24% (p=0.002 n=6) Sha3_224_MTU-8    3.443Âµ Â± 1%   1.602Âµ Â± 1%  -53.47% (p=0.002 n=6) Shake128_MTU-8    2.974Âµ Â± 2%   1.392Âµ Â± 1%  -53.19% (p=0.002 n=6) Shake256_MTU-8    3.320Âµ Â± 0%   1.537Âµ Â± 2%  -53.70% (p=0.002 n=6) Shake256_16x-8    47.26Âµ Â± 1%   27.39Âµ Â± 6%  -42.06% (p=0.002 n=6) Shake256_1MiB-8   2.567m Â± 1%   1.306m Â± 1%  -49.12% (p=0.002 n=6) Sha3_512_1MiB-8   4.785m Â± 1%   2.397m Â± 8%  -49.90% (p=0.002 n=6) geomean           23.47Âµ        11.38Âµ       -51.52%                  â  9e72f5fe60  â           ab93158ba0-dirty           â                 â     B/s      â     B/s       vs base                â Sha3_512_MTU-8    198.2Mi Â± 1%   430.9Mi Â± 0%  +117.45% (p=0.002 n=6) Sha3_384_MTU-8    277.5Mi Â± 5%   601.1Mi Â± 1%  +116.58% (p=0.002 n=6) Sha3_256_MTU-8    354.6Mi Â± 1%   758.2Mi Â± 6%  +113.85% (p=0.002 n=6) Sha3_224_MTU-8    373.9Mi Â± 1%   803.6Mi Â± 1%  +114.90% (p=0.002 n=6) Shake128_MTU-8    432.9Mi Â± 2%   925.2Mi Â± 1%  +113.70% (p=0.002 n=6) Shake256_MTU-8    387.8Mi Â± 0%   837.6Mi Â± 2%  +115.98% (p=0.002 n=6) Shake256_16x-8    330.6Mi Â± 1%   570.7Mi Â± 6%   +72.61% (p=0.002 n=6) Shake256_1MiB-8   389.5Mi Â± 1%   765.5Mi Â± 1%   +96.53% (p=0.002 n=6) Sha3_512_1MiB-8   209.0Mi Â± 1%   417.2Mi Â± 8%   +99.61% (p=0.002 n=6) geomean           317.7Mi        655.3Mi       +106.29%  fips140: off goos: darwin goarch: arm64 pkg: crypto/mlkem cpu: Apple M2                   â  9e72f5fe60  â          257696ed2d-dirty          â                   â    sec/op    â   sec/op     vs base               â KeyGen-8            36.97Âµ Â±  1%   29.82Âµ Â± 3%  -19.34% (p=0.002 n=6) Encaps-8            51.54Âµ Â±  5%   44.75Âµ Â± 5%  -13.17% (p=0.002 n=6) Decaps-8            47.72Âµ Â± 10%   44.73Âµ Â± 1%   -6.27% (p=0.002 n=6) RoundTrip/Alice-8   90.47Âµ Â±  2%   79.74Âµ Â± 1%  -11.86% (p=0.002 n=6) RoundTrip/Bob-8     52.15Âµ Â±  1%   44.45Âµ Â± 0%  -14.76% (p=0.002 n=6) geomean             53.27Âµ         46.25Âµ       -13.18%  Cq-Include-Trybots: luci.golang.try:gotip-darwin-arm64_15 Co-authored-by: Filippo Valsorda <filippo@golang.org> Change-Id: I8c1f476a7d59498bb44d09d7a573beaa07b10f53 Reviewed-on: https://go-review.googlesource.com/c/go/+/667675 Reviewed-by: Roland Shoemaker <roland@golang.org> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Reviewed-by: David Chase <drchase@google.com> Reviewed-by: Daniel McCarney <daniel@binaryparadox.net>",209,1,210
golang/go,430a3dc4587a9a3f8696d6eb34c8265877022e34,Filippo Valsorda,2025-04-23T21:15:51Z,crypto/internal/cryptotest: test Armv8.2 on darwin/arm64  Fixes #69593  Cq-Include-Trybots: luci.golang.try:gotip-darwin-arm64_15 Change-Id: I6a6a4656302d65b582df582fa12bb72b88b0316d Reviewed-on: https://go-review.googlesource.com/c/go/+/667755 Reviewed-by: David Chase <drchase@google.com> Reviewed-by: Roland Shoemaker <roland@golang.org> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com>,6,6,12
golang/go,e4216d54f58616b862013e2810436462db08b6ed,Filippo Valsorda,2024-09-30T14:52:50Z,internal/cpu: add ARM64.HasSHA3  For #69536  Change-Id: If237226ba03e282443b4fc90484968c903198cb1 Reviewed-on: https://go-review.googlesource.com/c/go/+/616715 Reviewed-by: Junyang Shao <shaojunyang@google.com> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Reviewed-by: Roland Shoemaker <roland@golang.org>,22,4,26
golang/go,c06eef27d754b0c4e112dbff1233e393a8362844,Michael Pratt,2025-05-21T20:14:19Z,"runtime: skip TestTimePprof on sanitizers  This test asserts there is no external code, but the sanitizer runtimes are external code.  Fixes #73783.  Cq-Include-Trybots: luci.golang.try:gotip-windows-amd64-race Change-Id: I6a6a636cf93b7950e3ea35e00ec2eaf89911d712 Reviewed-on: https://go-review.googlesource.com/c/go/+/675296 Reviewed-by: Michael Knyszek <mknyszek@google.com> Auto-Submit: Michael Pratt <mpratt@google.com> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com>",3,0,3
golang/go,988eb0d11e8d96e8ca150f401ed82326b276f653,Michael Matloob,2025-05-21T18:47:49Z,cmd/doc: better support for no network  Allow skipping the deprecation check when GOPROXY=off. The deprecation check is an informational message so this doesn't affect the success of the command. We should probably skip the check in more cases when GOPROXY=off but that's a bigger change that should be made in a later release.  There are still some deps.dev log messages that we should try to suppress.  For #68106  Change-Id: Ifa0efd01ed623bb68c7ad7c5cfb6705547d157a0 Reviewed-on: https://go-review.googlesource.com/c/go/+/675155 LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Auto-Submit: Michael Matloob <matloob@google.com> Reviewed-by: Michael Matloob <matloob@google.com> Reviewed-by: Sam Thanawalla <samthanawalla@google.com>,10,2,12
golang/go,50484d3b4e691d361d009d5e4a07c182b35471a0,Michael Matloob,2025-05-21T16:20:59Z,"cmd/go/internal/doc: ignore SIGINT and SIGQUIT  Just like we do in cmd/doc when we start pkgsite, ignore SIGINT (and SIGQUIT on unix) when we start cmd/doc so that it's handled by cmd/doc (if pkgsite is not started, and before it is started) or pkgsite, if it is started. Also exit with the exit status of the command, rather than using base.Errorf so that we don't print an extra error message to the terminal.  For #68106  Change-Id: If968e88b95031761432d13dc47c5febe3391945d Reviewed-on: https://go-review.googlesource.com/c/go/+/675076 LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Reviewed-by: Michael Matloob <matloob@google.com> Reviewed-by: Jonathan Amsterdam <jba@google.com> Auto-Submit: Michael Matloob <matloob@google.com>",24,5,29
golang/go,b6e251b264869fac4ddc158fb9a5c8d5b4ac086f,Mark Freeman,2025-05-21T19:13:45Z,internal/pkgbits: mark element / section ends as delta encoding candidates  Change-Id: I165c98a0a5800515bfa33c60b95b534900d0ea59 Reviewed-on: https://go-review.googlesource.com/c/go/+/675215 LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Auto-Submit: Mark Freeman <mark@golang.org> Reviewed-by: Robert Griesemer <gri@google.com>,5,2,7
golang/go,a1a151496503cafa5e4c672e0e9c1e1bb3516702,Filippo Valsorda,2025-05-21T19:01:07Z,"crypto/internal/fips140/nistec: remove dead s390x p256OrdMul  The p256_ordinv.go file is build tagged to only amd64 and arm64, and there is no p256OrdSqr.  Also, none of it will matter after CL 669895.  Change-Id: I6a6a465653c18673e3a2c7f41d2e4ac54915b365 Reviewed-on: https://go-review.googlesource.com/c/go/+/675195 Reviewed-by: Roland Shoemaker <roland@golang.org> Reviewed-by: Daniel McCarney <daniel@binaryparadox.net> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Reviewed-by: David Chase <drchase@google.com> Auto-Submit: Filippo Valsorda <filippo@golang.org>",0,393,393
golang/go,1881d680b0b573c32d3002c37902760668ffec0f,Filippo Valsorda,2025-05-21T13:35:51Z,net/http: add CrossOriginProtection  Fixes #73626  Change-Id: I6a6a4656862e7a38acb65c4815fb7a1e04896172 Reviewed-on: https://go-review.googlesource.com/c/go/+/674936 Reviewed-by: Damien Neil <dneil@google.com> Auto-Submit: Filippo Valsorda <filippo@golang.org> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Reviewed-by: David Chase <drchase@google.com>,526,0,526
golang/go,ef20ccc10bf6e4d3991c9e29c7fae1c9ab338629,thepudds,2023-09-07T18:15:33Z,"reflect: leak packEface input to result rather than heap  This is part of a series of CLs that aim to help allocations in reflect and reduce how often interface arguments escape for the print functions in fmt.  Before this change, the reflect.Value parameter for packEface leaks immediately to the heap due to the various ODOTPTR operations on the *emptyInterface.  The -m=2 logs report:   parameter v leaks to <heap> for packEface with derefs=0:    flow: <heap> â v:      from v.ptr (dot) at .\value.go:145:13      from e.word = v.ptr (assign) at .\value.go:145:10  After this change, the input leaks to the result, which is what we want:   parameter v leaks to ~r0 with derefs=0:    flow: e = v:      from v.ptr (dot) at .\value.go:143:13      from e.Data = v.ptr (assign) at .\value.go:143:10    flow: ~r0 = e:      from &e (address-of) at .\value.go:147:32      from *(*any)(unsafe.Pointer(&e)) (indirection) at .\value.go:147:9      from return *(*any)(unsafe.Pointer(&e)) (return) at .\value.go:147:2  This change here is needed, but reflect.Value.Interface still leaks its input to the heap for other reasons having to do with method values, which we attempt to address in CL 530097, CL 530095, and CL 530096.  Updates #8618 Updates #71349  Change-Id: Ie77bc850ff261212eeafe190bd6f9a879676a51d Reviewed-on: https://go-review.googlesource.com/c/go/+/528535 LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Reviewed-by: Dmitri Shuralyov <dmitshur@google.com> Reviewed-by: qiu laidongfeng2 <2645477756@qq.com> Reviewed-by: Cherry Mui <cherryyz@google.com>",4,7,11
golang/go,4d6f49f6035b1f62c960f4ef66f41ef554de9243,Michael Matloob,2025-05-21T19:19:16Z,"cmd/doc: add more convenient behavior for go doc -http with no args  If we're in a module, go to the module's page. Outside of a module, but in a workspace go to the home page, and outside of a module or workspace, show the stdlib docs.  For #68106  Change-Id: I911a90a0e2b0a2bbb622f56e32827d5bdfa7f2fd Reviewed-on: https://go-review.googlesource.com/c/go/+/675235 Reviewed-by: Michael Matloob <matloob@google.com> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Reviewed-by: Alan Donovan <adonovan@google.com>",18,10,28
golang/go,d54703c94ae906a5e851ae95909b6eb2f0314e19,Michael Pratt,2025-05-21T18:49:40Z,"runtime: use DontUpdate testprog for DontUpdate test  This is a typo in CL 670497. The test is using the wrong testprog function.  The testprog also needs to assert that GOMAXPROCS doesn't change, not that it is equal to NumCPU, for the GOMAXPROCS=4 case.  For #73193.  Cq-Include-Trybots: luci.golang.try:gotip-windows-amd64-longtest Change-Id: I6a6a636cab6936aa8519e3553b70ab6641ca8010 Reviewed-on: https://go-review.googlesource.com/c/go/+/675097 Auto-Submit: Michael Pratt <mpratt@google.com> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Reviewed-by: Michael Knyszek <mknyszek@google.com>",3,3,6
golang/go,d82cb03debff0180aa705129e8a00e89c3fe8251,Daniel McCarney,2025-05-16T19:05:43Z,"crypto/tls: update BoGo SessionID test skip reasons  Updates the skip reason for the following BoGo tests:    * TLS-ECH-Client-TLS12SessionID   * SupportTicketsWithSessionID   * ResumeTLS12SessionID-TLS13  The crypto/tls package does not support session ID based resumption at this time, and so any tests that rely on this support need to be skipped.  Updates #72006 Updates #25228  Change-Id: I27a2cd231e4b8762b0d9e2dbd3d8ddd5b87fd5d0 Reviewed-on: https://go-review.googlesource.com/c/go/+/673737 TryBot-Bypass: Daniel McCarney <daniel@binaryparadox.net> Reviewed-by: David Chase <drchase@google.com> Reviewed-by: Filippo Valsorda <filippo@golang.org> Reviewed-by: Roland Shoemaker <roland@golang.org>",3,3,6
golang/go,3e468dfd5e6624465716fe5d34358ba58f1e9e7b,Daniel McCarney,2025-05-16T18:40:27Z,"crypto/tls: enable BoGo DisabledCurve-HelloRetryRequest-TLS13  The crypto/tls package produces the expected error for this test case, and so it can be enabled.  Looking at the history of the relevant code it appears the TLS 1.3 implementation has always had the correct behaviour for HRR changing to an unsupported group after the initial hello.  I think this test was skipped initially because at the time of initial BoGo config commit we hadn't implemented the -curves argument for the test shim yet, and this test relies on it. We later added support for that flag alongside X25519Kyber768Draft00 KX and I think we missed the chance to enable the test then.  Updates #72006  Change-Id: I27a2cd231e4b8762b0d9e2dbd3d8ddd5b87fd5cf Reviewed-on: https://go-review.googlesource.com/c/go/+/673756 Reviewed-by: Roland Shoemaker <roland@golang.org> Reviewed-by: Filippo Valsorda <filippo@golang.org> Reviewed-by: David Chase <drchase@google.com> TryBot-Bypass: Daniel McCarney <daniel@binaryparadox.net>",0,1,1
golang/go,deb9a7e4ad8552a5f366877e626c223dea0e9d9b,Daniel McCarney,2025-05-16T17:44:53Z,"crypto/tls: match compression method alert across versions  When a pre-TLS 1.3 server processes a client hello message that indicates compression methods that don't include the null compression method, send an illegal parameter alert.  Previously we did this for TLS 1.3 server handshakes only, and the legacy TLS versions used alertHandshakeFailure for this circumstance. By switching this to alertIllegalParameter we use a consistent alert across all TLS versions, and can also enable the NoNullCompression-TLS12 BoGo test we were skipping.  Updates #72006  Change-Id: I27a2cd231e4b8762b0d9e2dbd3d8ddd5b87fd5ce Reviewed-on: https://go-review.googlesource.com/c/go/+/673736 TryBot-Bypass: Daniel McCarney <daniel@binaryparadox.net> Reviewed-by: Roland Shoemaker <roland@golang.org> Reviewed-by: Filippo Valsorda <filippo@golang.org> Reviewed-by: David Chase <drchase@google.com>",1,2,3
golang/go,cb7fe2a05c0a84e25c082b3741087cccb906b675,Daniel McCarney,2025-05-16T17:34:14Z,crypto/tls: delete dead code curveIDForCurve  This unexported function has no call-sites.  Change-Id: I27a2cd231e4b8762b0d9e2dbd3d8ddd5b87fd5cd Reviewed-on: https://go-review.googlesource.com/c/go/+/673755 Reviewed-by: Roland Shoemaker <roland@golang.org> Reviewed-by: David Chase <drchase@google.com> Reviewed-by: Filippo Valsorda <filippo@golang.org> TryBot-Bypass: Daniel McCarney <daniel@binaryparadox.net>,0,15,15
golang/go,7ba996874b541aa13b6bf1d1174b97372e0de20d,Daniel McCarney,2025-05-16T17:08:16Z,"crypto/tls: verify server chooses advertised curve  When a crypto/tls client using TLS < 1.3 sends supported elliptic_curves in a client hello message the server must limit itself to choosing one of the supported options from our message. If we process a server key exchange message that chooses an unadvertised curve, abort the handshake w/ an error.  Previously we would not note that the server chose a curve we didn't include in the client hello message, and would proceed with the handshake as long as the chosen curve was one that we've implemented. However, RFC 8422 5.1 makes it clear this is a server acting out-of-spec, as it says:    If a server does not understand the Supported Elliptic Curves   Extension, does not understand the Supported Point Formats Extension,   or is unable to complete the ECC handshake while restricting itself   to the enumerated curves and point formats, it MUST NOT negotiate the   use of an ECC cipher suite.  Changing our behaviour to enforce this also allows enabling the UnsupportedCurve BoGo test.  Updates #72006  Change-Id: I27a2cd231e4b8762b0d9e2dbd3d8ddd5b87fd5cc Reviewed-on: https://go-review.googlesource.com/c/go/+/673735 TryBot-Bypass: Daniel McCarney <daniel@binaryparadox.net> Reviewed-by: David Chase <drchase@google.com> Auto-Submit: Daniel McCarney <daniel@binaryparadox.net> Reviewed-by: Filippo Valsorda <filippo@golang.org> Reviewed-by: Roland Shoemaker <roland@golang.org>",5,1,6
golang/go,a8e0641d5b90da99d5dda96488e87dda761b365b,thepudds,2025-03-01T19:30:03Z,"reflect: optimize IsZero with a pointer comparison to global zeroVal  Our prior CL 649078 teaches the compiler to use a pointer to runtime.zeroVal as the data pointer for an interface in cases it where it can see that a zero value struct or array is being used in an interface conversion.  This applies to some uses with reflect, such as:    s := S{}   v := reflect.ValueOf(s)  This CL builds on that to do a cheap pointer check in reflect.IsZero to see if the Value points to runtime.zeroVal, which means it is a zero value.  An alternative might be to do an initial pointer check in the typ.Equal function for types where it makes sense to do but doesn't already.  This CL gives a performance boost of -51.71% geomean for BenchmarkZero/IsZero, with most of the impact there on arrays of structs. (The left column is CL 649078 and the right column is this CL).  goos: linux goarch: amd64 pkg: reflect cpu: Intel(R) Xeon(R) CPU @ 2.80GHz                                          â find-zeroVal â          check-zeroVal              â                                          â    sec/op    â   sec/op     vs base                â Zero/IsZero/ByteArray/size=16-4             4.171n Â± 0%   3.123n Â± 0%  -25.13% (p=0.000 n=20) Zero/IsZero/ByteArray/size=64-4             3.864n Â± 0%   3.129n Â± 0%  -19.02% (p=0.000 n=20) Zero/IsZero/ByteArray/size=1024-4           3.878n Â± 0%   3.126n Â± 0%  -19.39% (p=0.000 n=20) Zero/IsZero/BigStruct/size=1024-4           5.061n Â± 0%   3.273n Â± 0%  -35.34% (p=0.000 n=20) Zero/IsZero/SmallStruct/size=16-4           4.191n Â± 0%   3.275n Â± 0%  -21.87% (p=0.000 n=20) Zero/IsZero/SmallStructArray/size=64-4      8.636n Â± 0%   3.127n Â± 0%  -63.79% (p=0.000 n=20) Zero/IsZero/SmallStructArray/size=1024-4   80.055n Â± 0%   3.126n Â± 0%  -96.10% (p=0.000 n=20) Zero/IsZero/Time/size=24-4                  3.865n Â± 0%   3.274n Â± 0%  -15.29% (p=0.000 n=20) geomean                                     6.587n        3.181n       -51.71%  Note these are of course micro benchmarks with easily predicted branches. The extra branch we introduce in the CL might hurt if there was for example a tight loop where 50% of the values used the global zeroVal and 50% didn't in a way that is not well predicted, although if the typ.Equal for many types already does an initial pointer check, it might not matter much.  For the older BenchmarkIsZero in reflect, this change does not help. (The compiler does not use the global zeroVal as the data word for the interfaces in this benchmark because values are part of a larger value that is too big to be used in the global zeroVal, and also a piece of the larger value is mutated and is not zero).                                â find-zeroVal â           check-zeroVal            â                               â   sec/op     â   sec/op     vs base               â IsZero/ArrayComparable-4        14.58n Â± 0%    14.59n Â± 0%       ~ (p=0.177 n=20) IsZero/ArrayIncomparable-4      163.8n Â± 0%    167.5n Â± 0%  +2.26% (p=0.000 n=20) IsZero/StructComparable-4       6.847n Â± 0%    6.847n Â± 0%       ~ (p=0.703 n=20) IsZero/StructIncomparable-4     35.41n Â± 0%    35.10n Â± 0%  -0.86% (p=0.000 n=20) IsZero/ArrayInt_4-4             8.631n Â± 0%    8.363n Â± 0%  -3.10% (p=0.000 n=20) IsZero/ArrayInt_1024-4          265.5n Â± 0%    265.4n Â± 0%       ~ (p=0.288 n=20) IsZero/ArrayInt_1024_NoZero-4   135.8n Â± 0%    136.2n Â± 0%  +0.33% (p=0.000 n=20) IsZero/Struct4Int-4             8.451n Â± 0%    8.386n Â± 0%  -0.77% (p=0.000 n=20) IsZero/ArrayStruct4Int_1024-4   265.2n Â± 0%    266.0n Â± 0%  +0.30% (p=0.000 n=20) IsZero/ArrayChanInt_1024-4      265.5n Â± 0%    265.4n Â± 0%       ~ (p=0.605 n=20) IsZero/StructInt_512-4          135.8n Â± 0%    135.8n Â± 0%       ~ (p=0.396 n=20) geomean                         55.22n         55.12n       -0.18%  Updates #71323  Change-Id: Ie083853a5bff03856277a293d94532a681f4a8d5 Reviewed-on: https://go-review.googlesource.com/c/go/+/654135 Reviewed-by: Keith Randall <khr@google.com> Reviewed-by: David Chase <drchase@google.com> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Reviewed-by: Keith Randall <khr@golang.org>",6,0,6
golang/go,c3bb27bbc77ac02ad709e77a7fcca0a5d3176304,thepudds,2025-02-12T23:45:42Z,"cmd/compile/internal/walk: use global zeroVal in interface conversions for zero values  This is a small-ish adjustment to the change earlier in our stack in CL 649555, which started creating read-only global storage for a composite literal used in an interface conversion and setting the interface data pointer to point to that global storage.  In some cases, there are execution-time performance benefits to point to runtime.zeroVal in particular. In reflect, pointer checks against the runtime.zeroVal memory address are used to side-step some work, such as in reflect.Value.Set and reflect.Value.IsZero.  In this CL, we therefore dig up the zeroVal symbol, and we use the machinery from earlier in our stack to use a pointer to zeroVal for the interface data pointer if we see examples like:      sink = S{} or:     s := S{}     sink = s  CL 649076 (also earlier in our stack) added most of the tests along with debug diagnostics in convert.go to make it easier to test this change.  We add a benchmark in reflect to show examples of performance benefit. The left column is our immediately prior CL 649555, and the right is this CL. (The arrays of structs here do not seem to benefit, which we attempt to address in our next CL).  goos: linux goarch: amd64 pkg: reflect cpu: Intel(R) Xeon(R) CPU @ 2.80GHz                                           â  cl-649555   â           new                       â                                           â    sec/op    â   sec/op     vs base                â Zero/IsZero/ByteArray/size=16-4              4.176n Â± 0%   4.171n Â± 0%        ~ (p=0.151 n=20) Zero/IsZero/ByteArray/size=64-4              6.921n Â± 0%   3.864n Â± 0%  -44.16% (p=0.000 n=20) Zero/IsZero/ByteArray/size=1024-4           21.210n Â± 0%   3.878n Â± 0%  -81.72% (p=0.000 n=20) Zero/IsZero/BigStruct/size=1024-4           25.505n Â± 0%   5.061n Â± 0%  -80.15% (p=0.000 n=20) Zero/IsZero/SmallStruct/size=16-4            4.188n Â± 0%   4.191n Â± 0%        ~ (p=0.106 n=20) Zero/IsZero/SmallStructArray/size=64-4       8.639n Â± 0%   8.636n Â± 0%        ~ (p=0.973 n=20) Zero/IsZero/SmallStructArray/size=1024-4     79.99n Â± 0%   80.06n Â± 0%        ~ (p=0.213 n=20) Zero/IsZero/Time/size=24-4                   7.232n Â± 0%   3.865n Â± 0%  -46.56% (p=0.000 n=20) Zero/SetZero/ByteArray/size=16-4             13.47n Â± 0%   13.09n Â± 0%   -2.78% (p=0.000 n=20) Zero/SetZero/ByteArray/size=64-4             14.14n Â± 0%   13.70n Â± 0%   -3.15% (p=0.000 n=20) Zero/SetZero/ByteArray/size=1024-4           24.22n Â± 0%   20.18n Â± 0%  -16.68% (p=0.000 n=20) Zero/SetZero/BigStruct/size=1024-4           24.24n Â± 0%   20.18n Â± 0%  -16.73% (p=0.000 n=20) Zero/SetZero/SmallStruct/size=16-4           13.45n Â± 0%   13.10n Â± 0%   -2.60% (p=0.000 n=20) Zero/SetZero/SmallStructArray/size=64-4      14.12n Â± 0%   13.69n Â± 0%   -3.05% (p=0.000 n=20) Zero/SetZero/SmallStructArray/size=1024-4    24.62n Â± 0%   21.61n Â± 0%  -12.26% (p=0.000 n=20) Zero/SetZero/Time/size=24-4                  13.59n Â± 0%   13.40n Â± 0%   -1.40% (p=0.000 n=20) geomean                                      14.06n        10.19n       -27.54%  Finally, here are results from the benchmark example from #71323. Note however that almost all the benefit shown here is from our earlier CL 649555, which is a more general purpose change and eliminates the allocation using a different read-only global than this CL.               â   go1.24       â               new                    â              â     sec/op     â    sec/op     vs base                â InterfaceAny   112.6000n Â± 5%   0.8078n Â± 3%  -99.28% (p=0.000 n=20) ReflectValue      11.63n Â± 2%    11.59n Â± 0%        ~ (p=0.330 n=20)               â  go1.24.out  â                 new.out                 â              â     B/op     â    B/op     vs base                     â InterfaceAny   224.0 Â± 0%       0.0 Â± 0%  -100.00% (p=0.000 n=20) ReflectValue   0.000 Â± 0%     0.000 Â± 0%         ~ (p=1.000 n=20) Â¹               â  go1.24.out  â                 new.out                 â              â  allocs/op   â allocs/op   vs base                     â InterfaceAny   1.000 Â± 0%     0.000 Â± 0%  -100.00% (p=0.000 n=20) ReflectValue   0.000 Â± 0%     0.000 Â± 0%         ~ (p=1.000 n=20) Â¹  Updates #71359 Updates #71323  Change-Id: I64d8cf1a7900f011d2ec59b948388aeda1150676 Reviewed-on: https://go-review.googlesource.com/c/go/+/649078 LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Reviewed-by: Keith Randall <khr@golang.org> Reviewed-by: Keith Randall <khr@google.com> Reviewed-by: David Chase <drchase@google.com>",78,11,89
golang/go,f4de2ecffb9c107e6058c1ebb30c68de1157f5c6,thepudds,2025-02-14T04:49:50Z,"cmd/compile/internal/walk: convert composite literals to interfaces without allocating  Today, this interface conversion causes the struct literal to be heap allocated:      var sink any      func example1() {         sink = S{1, 1}     }  For basic literals like integers that are directly used in an interface conversion that would otherwise allocate, the compiler is able to use read-only global storage (see #18704).  This CL extends that to struct and array literals as well by creating read-only global storage that is able to represent for example S{1, 1}, and then using a pointer to that storage in the interface when the interface conversion happens.  A more challenging example is:      func example2() {         v := S{1, 1}         sink = v     }  In this case, the struct literal is not directly part of the interface conversion, but is instead assigned to a local variable.  To still avoid heap allocation in cases like this, in walk we construct a cache that maps from expressions used in interface conversions to earlier expressions that can be used to represent the same value (via ir.ReassignOracle.StaticValue). This is somewhat analogous to how we avoided heap allocation for basic literals in CL 649077 earlier in our stack, though here we also need to do a little more work to create the read-only global.  CL 649076 (also earlier in our stack) added most of the tests along with debug diagnostics in convert.go to make it easier to test this change.  See the writeup in #71359 for details.  Fixes #71359 Fixes #71323 Updates #62653 Updates #53465 Updates #8618  Change-Id: I8924f0c69ff738ea33439bd6af7b4066af493b90 Reviewed-on: https://go-review.googlesource.com/c/go/+/649555 LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Reviewed-by: Keith Randall <khr@golang.org> Reviewed-by: David Chase <drchase@google.com> Reviewed-by: Keith Randall <khr@google.com>",172,22,194
golang/go,ce46c9db867fb54a9c1f39b73ac8c2f339ca0587,Filippo Valsorda,2025-03-12T17:02:39Z,"internal/godebug,crypto/fips140: make fips140 setting immutable  Updates #70123  Co-authored-by: qmuntal <quimmuntal@gmail.com> Change-Id: I6a6a4656fd23ecd82428cccbd7c48692287fc75a Reviewed-on: https://go-review.googlesource.com/c/go/+/657116 Reviewed-by: Daniel McCarney <daniel@binaryparadox.net> Reviewed-by: Roland Shoemaker <roland@golang.org> Auto-Submit: Filippo Valsorda <filippo@golang.org> Reviewed-by: David Chase <drchase@google.com> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Reviewed-by: Quim Muntal <quimmuntal@gmail.com>",95,18,113
golang/go,d327e52d438854acae275cdf9d2c1fe42f037eb8,Filippo Valsorda,2025-05-21T17:41:06Z,"crypto/internal/fips140: use hash.Hash  Since package hash is just the interface definition, not an implementation, we can make a good argument that it doesn't impact the security of the module and can be imported from outside.  For #69521  Change-Id: I6a6a4656b9c3cac8bb9ab8e8df11fa3238dc5d1d Reviewed-on: https://go-review.googlesource.com/c/go/+/674917 Reviewed-by: Roland Shoemaker <roland@golang.org> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Reviewed-by: Daniel McCarney <daniel@binaryparadox.net> Reviewed-by: David Chase <drchase@google.com> Auto-Submit: Filippo Valsorda <filippo@golang.org>",192,207,399
golang/go,d6c29c71562df407cc18846efd2e9d8fe0b28960,Junyang Shao,2025-05-21T18:50:39Z,cmd/compile: fix offset calculation error in memcombine  Fixes #73812  Change-Id: If7a6e103ae9e1442a2cf4a3c6b1270b6a1887196 Reviewed-on: https://go-review.googlesource.com/c/go/+/675175 Reviewed-by: Keith Randall <khr@google.com> Auto-Submit: Junyang Shao <shaojunyang@google.com> Reviewed-by: Keith Randall <khr@golang.org> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com>,10,1,11
golang/go,a21b71daf57a54a12c2aedff0fba0860fa977590,Daniel McCarney,2025-05-15T17:41:14Z,"crypto/tls: have servers prefer TLS 1.3 when supported  Previously the common Config.mutualVersion() code prioritized the selected version based on the provided peerVersions being sent in peer preference order.  Instead we would prefer to see TLS 1.3 used whenever it is supported, even if the peer would prefer an older protocol version. This commit updates mutualVersions() to implement this policy change.  Our new behaviour matches the behaviour of other TLS stacks, notably BoringSSL, and so also allows enabling the IgnoreClientVersionOrder BoGo test that we otherwise must skip.  Updates #72006  Change-Id: I27a2cd231e4b8762b0d9e2dbd3d8ddd5b87fd5cb Reviewed-on: https://go-review.googlesource.com/c/go/+/673236 Auto-Submit: Daniel McCarney <daniel@binaryparadox.net> TryBot-Bypass: Daniel McCarney <daniel@binaryparadox.net> Reviewed-by: David Chase <drchase@google.com> Reviewed-by: Roland Shoemaker <roland@golang.org>",4,4,8
golang/go,c5a1fc1f97b4b6b384a9852d96a77868e0f5e6a9,Roland Shoemaker,2025-05-07T18:37:52Z,crypto/tls: add GetEncryptedClientHelloKeys  This allows servers to rotate their ECH keys without needing to restart the server.  Fixes #71920  Change-Id: I55591ab3303d5fde639038541c50edcf1fafc9aa Reviewed-on: https://go-review.googlesource.com/c/go/+/670655 TryBot-Bypass: Roland Shoemaker <roland@golang.org> Reviewed-by: David Chase <drchase@google.com> Auto-Submit: Roland Shoemaker <roland@golang.org> Reviewed-by: Daniel McCarney <daniel@binaryparadox.net>,87,26,113
golang/go,a731955f0f48b9d1e74ea3aa65f8485388a2849e,Filippo Valsorda,2025-05-21T12:29:26Z,crypto/sha1: use cryptotest.TestAllImplementations and impl.Register  Not running TryBots on s390x because the new LUCI builder is broken.  Change-Id: I6a6a4656a8d52fa5ace9effa67a88fbfd7d19b04 Reviewed-on: https://go-review.googlesource.com/c/go/+/674915 Reviewed-by: David Chase <drchase@google.com> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Reviewed-by: Roland Shoemaker <roland@golang.org> Reviewed-by: Daniel McCarney <daniel@binaryparadox.net> Auto-Submit: Filippo Valsorda <filippo@golang.org>,73,80,153
golang/go,272262750fe70b4c0694fbc0459caf4810b0336b,Roland Shoemaker,2025-03-14T00:04:30Z,"crypto: drop pre-AVX2 SHA assembly implementations  Drop the entire pre-AVX2 assembly implementation of SHA-1, SHA-256, and SHA-512. This also technically impacts the SHA-1 AVX2 implementation, since it previously called the pre-AVX2 implementation for the last block if the number of blocks wasn't a multiple of 2.  Instead of keeping the entire implementation just for that case, we just call the generic implementation for the last block. This will be a little slower, but still seems like a win.  Updates #69587  Change-Id: Id5234c42910d8c6ec6b8df700a721c0953dff02b Reviewed-on: https://go-review.googlesource.com/c/go/+/657716 Reviewed-by: Daniel McCarney <daniel@binaryparadox.net> Reviewed-by: David Chase <drchase@google.com> Auto-Submit: Roland Shoemaker <roland@golang.org> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Reviewed-by: Filippo Valsorda <filippo@golang.org>",15,9899,9914
golang/go,919d9858bc77592e161eea9180e0d4a95759124e,Roland Shoemaker,2025-05-08T17:27:34Z,"crypto/internal/fips140/sha3: remove usages of WORD for s390x  We support KIMD and KLMD now, paves the way for banning usage of BYTE and WORD instructions in crypto assembly.  Change-Id: I0f93744663f23866b2269591db70389e0c77fa4a Reviewed-on: https://go-review.googlesource.com/c/go/+/671095 Reviewed-by: Daniel McCarney <daniel@binaryparadox.net> Reviewed-by: Filippo Valsorda <filippo@golang.org> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Reviewed-by: Dmitri Shuralyov <dmitshur@google.com>",2,2,4
golang/go,3dbc775d605a9f364030e2815ee70bc3d70cd180,Julian Zhu,2025-05-21T08:36:53Z,cmd/compile/internal: intrinsify publicationBarrier on mipsx  This enables publicationBarrier to be used as an intrinsic on mipsx.  Change-Id: Ic199f34b84b3058bcfab79aac8f2399ff21a97ce Reviewed-on: https://go-review.googlesource.com/c/go/+/674856 Reviewed-by: Keith Randall <khr@golang.org> Auto-Submit: Keith Randall <khr@golang.org> Reviewed-by: David Chase <drchase@google.com> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Reviewed-by: Keith Randall <khr@google.com>,23,1,24
golang/go,3a7a856951c69e6c279b4305030c5da6ca8af913,Mateusz Poliwczak,2025-05-20T16:21:22Z,"crypto/x509: disallow negative path length  pathLenConstraint is restricted to unsigned integers. Also the -1 value of cert.MaxPathLength has a special meaning, so we shouldn't allow unmarshaling -1.  BasicConstraints ::= SEQUENCE {      cA                      BOOLEAN DEFAULT FALSE,      pathLenConstraint       INTEGER (0..MAX) OPTIONAL }  Change-Id: I485a6aa7223127becc86c423e1ef9ed2fbd48209 GitHub-Last-Rev: 75a11b47b963ac383d1ad67dfc001648632a05f0 GitHub-Pull-Request: golang/go#60706 Reviewed-on: https://go-review.googlesource.com/c/go/+/502076 Reviewed-by: Roland Shoemaker <roland@golang.org> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Auto-Submit: Roland Shoemaker <roland@golang.org> Reviewed-by: David Chase <drchase@google.com>",77,2,79
golang/go,94e3caeec18dfb55c0a8ab6067904ae76248ec3f,Julian Zhu,2025-05-20T02:55:33Z,cmd/compile/internal: intrinsify publicationBarrier on mips64x  This enables publicationBarrier to be used as an intrinsic on mips64x.  Change-Id: I4030ea65086c37ee1dcc1675d0d5d40ef8683851 Reviewed-on: https://go-review.googlesource.com/c/go/+/674855 LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Reviewed-by: David Chase <drchase@google.com> Reviewed-by: Keith Randall <khr@google.com> Auto-Submit: Keith Randall <khr@golang.org> Reviewed-by: Keith Randall <khr@golang.org>,23,1,24
golang/go,77345f41ee36c8db3ba7e0f687a8834fa7b83c48,Michael Anthony Knyszek,2025-05-21T17:50:15Z,"internal/trace: skip clock snapshot checks on Windows in stress mode  Windows' monotonic and wall clock granularity is just too coarse to get reasonable values out of stress mode, which is creating new trace generations constantly.  Fixes #73813.  Change-Id: Id9cb2fed9775ce8d78a736d0164daa7bf45075e0 Reviewed-on: https://go-review.googlesource.com/c/go/+/675096 Reviewed-by: Felix GeisendÃ¶rfer <felix.geisendoerfer@datadoghq.com> Reviewed-by: Roland Shoemaker <roland@golang.org> Auto-Submit: Michael Knyszek <mknyszek@google.com> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com>",35,13,48
golang/go,ed24bb4e6047890af272733c5a8bdcc43834e517,thepudds,2025-02-12T23:55:04Z,"cmd/compile/internal/escape: propagate constants to interface conversions to avoid allocs  Currently, the integer value in the following interface conversion gets heap allocated:     v := 1000    fmt.Println(v)  In contrast, this conversion does not currently cause the integer value to be heap allocated:     fmt.Println(1000)  The second example is able to avoid heap allocation because of an optimization in walk (by Josh in #18704 and related issues) that recognizes a literal is being used. In the first example, that optimization is currently thwarted by the literal getting assigned to a local variable prior to use in the interface conversion.  This CL propagates constants to interface conversions like in the first example to avoid heap allocations, instead using a read-only global. The net effect is roughly turning the first example into the second.  One place this comes up in practice currently is with logging or debug prints. For example, if we have something like:     func conditionalDebugf(format string, args ...interface{}) {    	if debugEnabled {    		fmt.Fprintf(io.Discard, format, args...)    	}    }  Prior to this CL, this integer is heap allocated, even when the debugEnabled flag is false, and even when the compiler inlines conditionalDebugf:     v := 1000    conditionalDebugf(""hello %d"", v)  With this CL, the integer here is no longer heap allocated, even when the debugEnabled flag is enabled, because the compiler can now see that it can use a read-only global.  See the writeup in #71359 for more details.  CL 649076 (earlier in our stack) added most of the tests along with debug diagnostics in convert.go to make it easier to test this change.  Updates #71359 Updates #62653 Updates #53465 Updates #8618  Change-Id: I19a51e74b36576ebb0b9cf599267cbd2bd847ce4 Reviewed-on: https://go-review.googlesource.com/c/go/+/649079 Auto-Submit: Keith Randall <khr@golang.org> Reviewed-by: Keith Randall <khr@golang.org> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Reviewed-by: David Chase <drchase@google.com> Reviewed-by: Keith Randall <khr@google.com>",112,43,155
golang/go,e89791983a1330e467c8ba2cca9d7a581a5789cc,thepudds,2025-04-04T19:51:16Z,"cmd/compile/internal/escape: use an ir.ReassignOracle  Using the new-ish ir.ReassignOracle is more efficient than calling ir.StaticValue repeatedly.  This CL now uses an ir.ReassignOracle for the recent make constant propagation introduced in CL 649035.  We also pull the main change from CL 649035 into a new function, which we will update later in our stack. We will also use the ReassignOracles introduced here later in our stack.  (We originally did most of this work in CL 649077, but we abandoned that in favor of CL 649035).  We could also use an ir.ReassignOracle in the older processing of ir.OCALLFUNC in (*escape).call, but for now, we just leave that as a TODO.  Updates #71359  Change-Id: I6e02eeac269bde3a302622b4dfe0c8dc63ec9ffc Reviewed-on: https://go-review.googlesource.com/c/go/+/673795 Reviewed-by: Keith Randall <khr@google.com> Auto-Submit: Keith Randall <khr@golang.org> Reviewed-by: Keith Randall <khr@golang.org> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Reviewed-by: David Chase <drchase@google.com>",96,21,117
golang/go,4b7aa542ebc5144b2df7ee455ab137eb90de6f00,Damien Neil,2025-05-19T22:51:14Z,os: add Root.ReadFile and Root.WriteFile  For #73126  Change-Id: Ie69cc274e7b59f958c239520318b89ff0141e26b Reviewed-on: https://go-review.googlesource.com/c/go/+/674315 Reviewed-by: Alan Donovan <adonovan@google.com> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Auto-Submit: Damien Neil <dneil@google.com>,50,0,50
golang/go,3ae95aafb5d656596212c672c6e104e5c8802dbc,Sean Liao,2025-05-14T20:26:57Z,log/slog: add GroupAttrs  GroupAttrs is a more efficient version of Group that takes a slice of Attr values.  Fixes #66365  Change-Id: Ic3046704825e17098f2fea5751f2959dce1073e2 Reviewed-on: https://go-review.googlesource.com/c/go/+/672915 Reviewed-by: Jonathan Amsterdam <jba@google.com> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Reviewed-by: Michael Knyszek <mknyszek@google.com>,55,0,55
golang/go,ce49eb488af1c5273b226b3b52a8cbd7eae63a51,Michael Pratt,2025-05-21T17:36:42Z,"runtime: skip windows stack tests in race mode  These became race instrumented in CL 643897, but race mode uses more memory, so the test doesn't make much sense.  For #71395.  Change-Id: I6a6a636cf09ba29625aa9a22550314845fb2e611 Reviewed-on: https://go-review.googlesource.com/c/go/+/675077 Auto-Submit: Michael Pratt <mpratt@google.com> Reviewed-by: Michael Knyszek <mknyszek@google.com> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com>",7,0,7
golang/go,d2f229db7a3da4157fd7602f77513ce85c01ff04,Michael Pratt,2025-05-21T15:10:24Z,"runtime: avoid register clobber in s390x racecall  This is a regression in CL 643875. Loading gsignal clobbers R8, which contains the m pointer needed for loading g0.  For #71395.  Change-Id: I6a6a636ca95442767efe0eb1b358f2139d18c5b8 Reviewed-on: https://go-review.googlesource.com/c/go/+/675035 Auto-Submit: Michael Pratt <mpratt@google.com> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Reviewed-by: Michael Knyszek <mknyszek@google.com>",5,5,10
golang/go,304d9e2fd1b62d236eb48ec838be3680cb7845e6,Lokesh Kumar,2025-05-21T14:48:21Z,bufio: update buffer documentation  Fixes #73778  Change-Id: If6d87a92786c9b0ee2bd790b57937919afe0fc5c GitHub-Last-Rev: 4b4c7595d5779a127b01a5d71adca91cb5aa6c05 GitHub-Pull-Request: golang/go#73804 Reviewed-on: https://go-review.googlesource.com/c/go/+/674695 Auto-Submit: Alan Donovan <adonovan@google.com> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Reviewed-by: Dmitri Shuralyov <dmitshur@google.com> Reviewed-by: Alan Donovan <adonovan@google.com>,4,1,5
golang/go,d3d22cc5e4be996345e47d6994c5f3d5f51811fa,Filippo Valsorda,2025-05-21T12:41:28Z,lib/fips140: set inprocess.txt to v1.0.0  Fixes #70200  Change-Id: I6a6a46567ce0834fb4b7f28bf06646326f8e5105 Reviewed-on: https://go-review.googlesource.com/c/go/+/674916 Reviewed-by: Daniel McCarney <daniel@binaryparadox.net> Auto-Submit: Filippo Valsorda <filippo@golang.org> Reviewed-by: Roland Shoemaker <roland@golang.org> Reviewed-by: Dmitri Shuralyov <dmitshur@google.com> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com>,1,0,1
golang/go,419367969c88e6e97f8648669969a01b60bdd350,Michael Pratt,2025-05-21T14:58:32Z,"cmd/link: require cgo internal linking in TestIssue33979  This was a typo regression in CL 643897, which accidentally dropped the requirement for cgo internal linking. As a result, this test is continuously failing on windows-arm64.  For #71395.  Cq-Include-Trybots: luci.golang.try:gotip-windows-arm64 Change-Id: I6a6a636c25fd399cda6649ef94655aa112f10f63 Reviewed-on: https://go-review.googlesource.com/c/go/+/675015 Auto-Submit: Michael Pratt <mpratt@google.com> Reviewed-by: Michael Knyszek <mknyszek@google.com> Reviewed-by: Quim Muntal <quimmuntal@gmail.com> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com>",1,1,2
golang/go,360600b1d20bc4b421217435d921a2437be07893,Roland Shoemaker,2025-01-25T18:28:02Z,"crypto/tls: replace custom intern cache with weak cache  Uses the new weak package to replace the existing custom intern cache with a map of weak.Pointers instead. This simplifies the cache, and means we don't need to store a slice of handles on the Conn anymore.  Change-Id: I5c2bf6ef35fac4255e140e184f4e48574b34174c Reviewed-on: https://go-review.googlesource.com/c/go/+/644176 TryBot-Bypass: Roland Shoemaker <roland@golang.org> Reviewed-by: Michael Knyszek <mknyszek@google.com> Auto-Submit: Roland Shoemaker <roland@golang.org>",57,172,229
golang/go,e6dacf91ffb0a356aa692ab5c46411e2eef913f3,Michael Pratt,2025-05-05T17:44:26Z,"runtime: use cgroup CPU limit to set GOMAXPROCS  This CL adds two related features enabled by default via compatibility GODEBUGs containermaxprocs and updatemaxprocs.  On Linux, containermaxprocs makes the Go runtime consider cgroup CPU bandwidth limits (quota/period) when setting GOMAXPROCS. If the cgroup limit is lower than the number of logical CPUs available, then the cgroup limit takes precedence.  On all OSes, updatemaxprocs makes the Go runtime periodically recalculate the default GOMAXPROCS value and update GOMAXPROCS if it has changed. If GOMAXPROCS is set manually, this update does not occur. This is intended primarily to detect changes to cgroup limits, but it applies on all OSes because the CPU affinity mask can change as well.  The runtime only considers the limit in the leaf cgroup (the one that actually contains the process), caching the CPU limit file descriptor(s), which are periodically reread for updates. This is a small departure from the original proposed design. It will not consider limits of parent cgroups (which may be lower than the leaf), and it will not detection cgroup migration after process start.  We can consider changing this in the future, but the simpler approach is less invasive; less risk to packages that have some awareness of runtime internals. e.g., if the runtime periodically opens new files during execution, file descriptor leak detection is difficult to implement in a stable way.  For #73193.  Cq-Include-Trybots: luci.golang.try:gotip-linux-amd64-longtest Change-Id: I6a6a636c631c1ae577fb8254960377ba91c5dc98 Reviewed-on: https://go-review.googlesource.com/c/go/+/670497 LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Reviewed-by: Michael Knyszek <mknyszek@google.com>",1327,43,1370
golang/go,f12c66fbed546645389cf184b0e2ffd6ad9f78ec,Michael Pratt,2025-04-22T10:24:37Z,internal/runtime/cgroup: CPU cgroup limit discovery  For #73193.  Change-Id: I6a6a636ca9fa9cba429cf053468c56c2939cb1ac Reviewed-on: https://go-review.googlesource.com/c/go/+/668638 LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Reviewed-by: Michael Knyszek <mknyszek@google.com>,1220,0,1220
golang/go,06450a82b04dc4b3599ae4864827e6f8a5b7d628,Michael Pratt,2025-04-24T09:20:30Z,internal/runtime/cgroup: add line-by-line reader using a single scratch buffer  Change-Id: I6a6a636ca21edcc6f16705fbb72a5241d4f7f22d Reviewed-on: https://go-review.googlesource.com/c/go/+/668637 Reviewed-by: Michael Knyszek <mknyszek@google.com> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com>,375,0,375
golang/go,e59e128f90aa2453d8881a622524df90feb9d22f,Damien Neil,2025-05-19T20:09:06Z,os: add Root.MkdirAll  For #67002  Change-Id: Idd74b5b59e787e89bdfad82171b6a7719465f501 Reviewed-on: https://go-review.googlesource.com/c/go/+/674116 Reviewed-by: Alan Donovan <adonovan@google.com> Auto-Submit: Damien Neil <dneil@google.com> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com>,297,85,382
golang/go,63dcc7b9067722a9ded7a67501a898764778108a,Roland Shoemaker,2025-01-19T17:24:50Z,crypto/sha1: add sha-ni AMD64 implementation  Based on the Intel docs. Provides a ~44% speed-up compared to the AVX implementation and a ~57% speed-up compared to the generic AMD64 assembly implementation.                      â /usr/local/google/home/bracewell/sha1-avx.bench â /usr/local/google/home/bracewell/sha1-ni-stack.bench â                     â                     sec/op                      â            sec/op             vs base                â Hash8Bytes/New-24                                        157.60n Â± 0%                    92.51n Â± 0%  -41.30% (p=0.000 n=20) Hash8Bytes/Sum-24                                        147.00n Â± 0%                    85.06n Â± 0%  -42.14% (p=0.000 n=20) Hash320Bytes/New-24                                       625.3n Â± 0%                    276.7n Â± 0%  -55.75% (p=0.000 n=20) Hash320Bytes/Sum-24                                       626.2n Â± 0%                    272.4n Â± 0%  -56.51% (p=0.000 n=20) Hash1K/New-24                                            1206.5n Â± 0%                    692.2n Â± 0%  -42.63% (p=0.000 n=20) Hash1K/Sum-24                                            1210.0n Â± 0%                    688.2n Â± 0%  -43.13% (p=0.000 n=20) Hash8K/New-24                                             7.744Âµ Â± 0%                    4.920Âµ Â± 0%  -36.46% (p=0.000 n=20) Hash8K/Sum-24                                             7.737Âµ Â± 0%                    4.913Âµ Â± 0%  -36.50% (p=0.000 n=20) geomean                                                   971.5n                         536.1n       -44.81%                      â /usr/local/google/home/bracewell/sha1-avx.bench â /usr/local/google/home/bracewell/sha1-ni-stack.bench â                     â                       B/s                       â             B/s              vs base                 â Hash8Bytes/New-24                                        48.41Mi Â± 0%                  82.47Mi Â± 0%   +70.37% (p=0.000 n=20) Hash8Bytes/Sum-24                                        51.90Mi Â± 0%                  89.70Mi Â± 0%   +72.82% (p=0.000 n=20) Hash320Bytes/New-24                                      488.0Mi Â± 0%                 1103.0Mi Â± 0%  +126.01% (p=0.000 n=20) Hash320Bytes/Sum-24                                      487.4Mi Â± 0%                 1120.5Mi Â± 0%  +129.91% (p=0.000 n=20) Hash1K/New-24                                            809.6Mi Â± 0%                 1410.8Mi Â± 0%   +74.26% (p=0.000 n=20) Hash1K/Sum-24                                            806.9Mi Â± 0%                 1419.1Mi Â± 0%   +75.86% (p=0.000 n=20) Hash8K/New-24                                           1008.9Mi Â± 0%                 1588.0Mi Â± 0%   +57.40% (p=0.000 n=20) Hash8K/Sum-24                                           1009.8Mi Â± 0%                 1590.1Mi Â± 0%   +57.47% (p=0.000 n=20) geomean                                                  375.8Mi                       680.9Mi        +81.20%                      â /usr/local/google/home/bracewell/sha1-amd64.bench â /usr/local/google/home/bracewell/sha1-ni-stack.bench â                     â                      sec/op                       â            sec/op             vs base                â Hash8Bytes/New-24                                          153.90n Â± 0%                    92.51n Â± 0%  -39.89% (p=0.000 n=20) Hash8Bytes/Sum-24                                          145.90n Â± 0%                    85.06n Â± 0%  -41.70% (p=0.000 n=20) Hash320Bytes/New-24                                         666.8n Â± 0%                    276.7n Â± 0%  -58.50% (p=0.000 n=20) Hash320Bytes/Sum-24                                         660.3n Â± 0%                    272.4n Â± 0%  -58.75% (p=0.000 n=20) Hash1K/New-24                                              1810.5n Â± 0%                    692.2n Â± 0%  -61.77% (p=0.000 n=20) Hash1K/Sum-24                                              1806.0n Â± 0%                    688.2n Â± 0%  -61.90% (p=0.000 n=20) Hash8K/New-24                                              13.509Âµ Â± 0%                    4.920Âµ Â± 0%  -63.58% (p=0.000 n=20) Hash8K/Sum-24                                              13.515Âµ Â± 0%                    4.913Âµ Â± 0%  -63.65% (p=0.000 n=20) geomean                                                     1.248Âµ                         536.1n       -57.05%                      â /usr/local/google/home/bracewell/sha1-amd64.bench â /usr/local/google/home/bracewell/sha1-ni-stack.bench â                     â                        B/s                        â             B/s              vs base                 â Hash8Bytes/New-24                                          49.57Mi Â± 0%                  82.47Mi Â± 0%   +66.37% (p=0.000 n=20) Hash8Bytes/Sum-24                                          52.29Mi Â± 0%                  89.70Mi Â± 0%   +71.52% (p=0.000 n=20) Hash320Bytes/New-24                                        457.7Mi Â± 0%                 1103.0Mi Â± 0%  +140.97% (p=0.000 n=20) Hash320Bytes/Sum-24                                        462.2Mi Â± 0%                 1120.5Mi Â± 0%  +142.45% (p=0.000 n=20) Hash1K/New-24                                              539.4Mi Â± 0%                 1410.8Mi Â± 0%  +161.57% (p=0.000 n=20) Hash1K/Sum-24                                              540.7Mi Â± 0%                 1419.1Mi Â± 0%  +162.44% (p=0.000 n=20) Hash8K/New-24                                              578.4Mi Â± 0%                 1588.0Mi Â± 0%  +174.57% (p=0.000 n=20) Hash8K/Sum-24                                              578.1Mi Â± 0%                 1590.1Mi Â± 0%  +175.07% (p=0.000 n=20) geomean                                                    292.4Mi                       680.9Mi       +132.86%  Change-Id: Ife90386ba410a80c2e6222c1fe4df2368c4e12b2 Reviewed-on: https://go-review.googlesource.com/c/go/+/642157 Reviewed-by: Filippo Valsorda <filippo@golang.org> Auto-Submit: Roland Shoemaker <roland@golang.org> Reviewed-by: Neal Patel <nealpatel@google.com> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com>,381,1,382
golang/go,40b19b56a94c4d53a3c1d98275df44049b2f5917,Roland Shoemaker,2025-03-22T00:58:55Z,"runtime: add valgrind instrumentation  Add build tag gated Valgrind annotations to the runtime which let it understand how the runtime manages memory. This allows for Go binaries to be run under Valgrind without emitting spurious errors.  Instead of adding the Valgrind headers to the tree, and using cgo to call the various Valgrind client request macros, we just add an assembly function which emits the necessary instructions to trigger client requests.  In particular we add instrumentation of the memory allocator, using a two-level mempool structure (as described in the Valgrind manual [0]). We also add annotations which allow Valgrind to track which memory we use for stacks, which seems necessary to let it properly function.  We describe the memory model to Valgrind as follows: we treat heap arenas as a ""pool"" created with VALGRIND_CREATE_MEMPOOL_EXT (so that we can use VALGRIND_MEMPOOL_METAPOOL and VALGRIND_MEMPOOL_AUTO_FREE). Within the pool we treat spans as ""superblocks"", annotated with VALGRIND_MEMPOOL_ALLOC. We then allocate individual objects within spans with VALGRIND_MALLOCLIKE_BLOCK.  It should be noted that running binaries under Valgrind can be _quite slow_, and certain operations, such as running the GC, can be _very slow_. It is recommended to run programs with GOGC=off. Additionally, async preemption should be turned off, since it'll cause strange behavior (GODEBUG=asyncpreemptoff=1).  Running Valgrind with --leak-check=yes will result in some errors resulting from some things not being marked fully free'd. These likely need more annotations to rectify, but for now it is recommended to run with --leak-check=off.  Updates #73602  [0] https://valgrind.org/docs/manual/mc-manual.html#mc-manual.mempools  Change-Id: I71b26c47d7084de71ef1e03947ef6b1cc6d38301 Reviewed-on: https://go-review.googlesource.com/c/go/+/674077 LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Reviewed-by: Michael Knyszek <mknyszek@google.com>",364,3,367
golang/go,2a5ac1a993efc463efdce7996efd356dabf03a25,Michael Matloob,2025-05-21T16:18:03Z,"cmd/doc: allow go doc -http without package in current directory  go doc tries to find a package to display documentation for. In the case that no package is provided, it uses ""."" just like go list does. So if go doc -http is run without any arguments, it tries to show the documentation for the package in the current directory. As a special case, if no arguments are provided, allow no package to match the current directory and just open the root pkgsite page.  For #68106  Change-Id: I6d65b160a838591db953fac630eced6b09106877 Reviewed-on: https://go-review.googlesource.com/c/go/+/675075 Reviewed-by: Alan Donovan <adonovan@google.com> Reviewed-by: Michael Matloob <matloob@google.com> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com>",40,20,60
golang/go,8b45a3f78b178ce66f419038a664cbd6a82ada54,Michael Anthony Knyszek,2025-05-20T20:26:56Z,"runtime: guarantee checkfinalizers test allocates in a shared tiny block  Currently the checkfinalizers test (TestDetectCleanupOrFinalizerLeak) only *tries* to ensure the tiny alloc with a cleanup attached shares a block with other objects. However, what it does is insufficient, because it could get unlucky and have the last object allocated be the first object of a new block.  This change changes the test to guarantee that a tiny object is not at the start of a fresh block by looking at the alignment of the object's pointer. If the object's pointer is odd, then that's good enough to know that it shares a block with something else, since the blocks themselves are aligned to a much higher power of two.  This fixes a failure I've seen on the builders.  Fixes #73810.  Change-Id: Ieafdbb9cccb0d2dc3659a9a5d9d9233718461635 Reviewed-on: https://go-review.googlesource.com/c/go/+/674655 LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Reviewed-by: Michael Pratt <mpratt@google.com>",13,3,16
golang/go,896097000912761dbd31cead2bec99f17534f521,Damien Neil,2025-03-28T23:40:34Z,os: add Root.RemoveAll  For #67002  Change-Id: If59dab4fd934a115d8ff383826525330de750b54 Reviewed-on: https://go-review.googlesource.com/c/go/+/661595 Reviewed-by: Alan Donovan <adonovan@google.com> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Auto-Submit: Damien Neil <dneil@google.com>,151,5,156
golang/go,26e05b95c2a3ae69e6dc0b6169a931e96253917a,Mark Freeman,2025-05-20T18:33:03Z,"internal/pkgbits: specify that RelIdx is an element index  Without this, it's not clear what this is relative to or the granularity of the index.  Change-Id: Ibaabe47e089f0ba9b084523969c5347ed4c9dbee Reviewed-on: https://go-review.googlesource.com/c/go/+/674636 Auto-Submit: Mark Freeman <mark@golang.org> Reviewed-by: Robert Griesemer <gri@google.com> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com>",38,32,70
golang/go,4ce1c8e9e1aab695bb0da506f2de336a5caa81f6,Xiaolin Zhao,2025-05-20T02:28:17Z,cmd/compile: add rules about ORN and ANDN  Reduce the number of go toolchain instructions on loong64 as follows.      file      before    after     Î       %     addr2line 279880    279776  -104   -0.0372%     asm       556638    556410  -228   -0.0410%     buildid   272272    272072  -200   -0.0735%     cgo       481522    481318  -204   -0.0424%     compile   2457788   2457580 -208   -0.0085%     covdata   323384    323280  -104   -0.0322%     cover     518450    518234  -216   -0.0417%     dist      340790    340686  -104   -0.0305%     distpack  282456    282252  -204   -0.0722%     doc       789932    789688  -244   -0.0309%     fix       324332    324228  -104   -0.0321%     link      704622    704390  -232   -0.0329%     nm        277132    277028  -104   -0.0375%     objdump   507862    507758  -104   -0.0205%     pack      221774    221674  -100   -0.0451%     pprof     1469816   1469552 -264   -0.0180%     test2json 254836    254732  -104   -0.0408%     trace     1100002   1099738 -264   -0.0240%     vet       781078    780874  -204   -0.0261%     go        1529116   1528848 -268   -0.0175%     gofmt     318556    318448  -108   -0.0339%     total     13792238 13788566 -3672  -0.0266%  Change-Id: I23fb3ebd41309252c7075e57ea7094e79f8c4fef Reviewed-on: https://go-review.googlesource.com/c/go/+/674335 Reviewed-by: abner chenc <chenguoqi@loongson.cn> Reviewed-by: Michael Knyszek <mknyszek@google.com> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Auto-Submit: abner chenc <chenguoqi@loongson.cn> Reviewed-by: David Chase <drchase@google.com> Reviewed-by: Meidan Li <limeidan@loongson.cn>,90,0,90
golang/go,0810fd2d9282dda12532e249c931b36a2d2526ed,Guoqi Chen,2023-11-16T09:28:46Z,cmd/internal/obj/loong64: remove unused register alias definitions  Change-Id: Ie788747372cd47cb3780e75b35750bb08bd166fc Reviewed-on: https://go-review.googlesource.com/c/go/+/542835 Reviewed-by: sophie zhao <zhaoxiaolin@loongson.cn> Reviewed-by: David Chase <drchase@google.com> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Reviewed-by: Meidan Li <limeidan@loongson.cn> Auto-Submit: abner chenc <chenguoqi@loongson.cn> Reviewed-by: Michael Knyszek <mknyszek@google.com>,0,2,2
golang/go,bfb8f1327466ac9075a5c2f4fba72ebeebe8023b,Mark Freeman,2025-05-19T22:00:31Z,"internal/pkgbits: indent productions and hoist some types up  The types being hoisted are those which cannot be referenced; that is, where Ref[T] is illegal. These are most clearly owned by pkgbits. The types which follow are those which can be referenced.  Referenceable types are more hazy due to the reference mechanism of UIR - sections. These are a detail of the UIR file format and are surfaced directly to importers.  I suspect that pkgbits would benefit from a reference mechanism not dependent on sections. This would permit us to push down many types from the noder into pkgbits, reducing the interface surface without giving up deduplication.  Change-Id: Ifaf5cd9de20c767ad0941413385b308d628aac6c Reviewed-on: https://go-review.googlesource.com/c/go/+/674635 Auto-Submit: Mark Freeman <mark@golang.org> TryBot-Bypass: Mark Freeman <mark@golang.org> Reviewed-by: Robert Griesemer <gri@google.com>",56,56,112
golang/go,07b94b2db23eda9ff4629cd8c2a0a32decdae08b,Felix GeisendÃ¶rfer,2025-02-28T16:30:54Z,internal/trace: add generator tests for sync events  Add generator tests that verify the timestamps for the sync events emitted in the go1.25 trace format and earlier versions.  Add the ability to configure the properties of the per-generation sync batches in testgen. Also refactor testgen to produce more realistic timestamps by keeping track of lastTs and using it for structural batches that don't have their own timestamps. Otherwise they default to zero which means the minTs of the generation can't be controlled.  For #69869  Change-Id: I92a49b8281bc4169b63e13c030c1de7720cd6f26 Reviewed-on: https://go-review.googlesource.com/c/go/+/653876 Auto-Submit: Michael Knyszek <mknyszek@google.com> Reviewed-by: David Chase <drchase@google.com> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Reviewed-by: Michael Knyszek <mknyszek@google.com>,257,13,270
golang/go,b22da3f544418aa4d962848cab9e3458a1fe075b,Felix GeisendÃ¶rfer,2025-02-28T16:28:43Z,internal/trace/internal/testgen: make generated trace version configurable  Replace hard coded references to version.Go122 with the trace version passed to NewTrace. This allows writing testgen tests for newer trace versions.  For #69869  Change-Id: Id25350cea1c397a09ca23465526ff259e34a4752 Reviewed-on: https://go-review.googlesource.com/c/go/+/653875 Auto-Submit: Michael Knyszek <mknyszek@google.com> Reviewed-by: Michael Knyszek <mknyszek@google.com> Reviewed-by: Cherry Mui <cherryyz@google.com> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com>,4,3,7
golang/go,847f15716625d24c6a6af8f741dff66781b6bcdd,Felix GeisendÃ¶rfer,2025-05-03T12:56:23Z,"internal/trace: add a validator test for the new clock snapshots  Check that the clock snapshots, when expected to be present, are non-zero and monotonically increasing.  This required some refactoring to make the validator aware of the version of the trace it is validating.  Change-Id: I04c4dd10fe6975cbac12bb0ddaebcec3a5284e7b Reviewed-on: https://go-review.googlesource.com/c/go/+/669715 Auto-Submit: Michael Knyszek <mknyszek@google.com> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Reviewed-by: Michael Knyszek <mknyszek@google.com> Reviewed-by: David Chase <drchase@google.com>",72,38,110
golang/go,2d216141a10fc7bb7872f13b95b070df471ece45,Felix GeisendÃ¶rfer,2025-02-28T15:07:45Z,internal/trace: expose clock snapshot timestamps on sync event  Add ClockSnapshot field to the Sync event type and populate it with the information from the new EvClockSnapshot event when available.  For #69869  Change-Id: I3b24b5bfa15cc7a7dba270f5e6bf189adb096840 Reviewed-on: https://go-review.googlesource.com/c/go/+/653576 Reviewed-by: Michael Knyszek <mknyszek@google.com> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Reviewed-by: David Chase <drchase@google.com> Auto-Submit: Michael Knyszek <mknyszek@google.com>,41,6,47
golang/go,112c23612f5fdfb776d8f338479e1dc374ee6f1b,Felix GeisendÃ¶rfer,2025-02-28T15:07:16Z,"runtime,internal/trace: emit clock snapshots at the start of trace generations  Replace the per-generation EvEventBatch containing a lone EvFrequency event with a per-generation EvEventBatch containing a EvSync header followed by an EvFrequency and EvClockSnapshot event.  The new EvClockSnapshot event contains trace, mono and wall clock snapshots taken in close time proximity. Ignoring minor resolution differences, the trace and mono clock are the same on linux, but not on windows (which still uses a TSC based trace clock).  Emit the new sync batch at the very beginning of every new generation rather than the end to be in harmony with the internal/trace reader which emits a sync event at the beginning of every generation as well and guarantees monotonically increasing event timestamps.  Bump the version of the trace file format to 1.25 since this change is not backwards compatible.  Update the internal/trace reader implementation to decode the new events, but do not expose them to the public reader API yet. This is done in the next CL.  For #69869  Change-Id: I5bfedccdd23dc0adaf2401ec0970cbcc32363393 Reviewed-on: https://go-review.googlesource.com/c/go/+/653575 Reviewed-by: David Chase <drchase@google.com> Auto-Submit: Michael Knyszek <mknyszek@google.com> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Reviewed-by: Michael Knyszek <mknyszek@google.com>",148,53,201
golang/go,0d7dc6842b3de170fcc8c72aa4380269b8f21f80,Mark Ryan,2025-05-06T12:07:09Z,"cmd/internal/obj/riscv: fix vector integer multiply add  The RISC-V integer vector multiply add instructions are not encoded correctly; the first and second arguments are swapped. For example, the instruction  VMACCVV V1, V2, V3  encodes to  b620a1d7 or vmacc.vv v3,v1,v2  and not  b61121d7 or vmacc.vv v3,v2,v1  as expected.  This is inconsistent with the argument ordering we use for 3 argument vector instructions, in which the argument order, as given in the RISC-V specifications, is reversed, and also with the vector FMA instructions which have the same argument ordering as the vector integer multiply add instructions in the ""The RISC-V Instruction Set Manual Volume I"". For example, in the ISA manual we have the following instruction definitions  ; Integer multiply-add, overwrite addend vmacc.vv vd, vs1, vs2, vm    # vd[i] = +(vs1[i] * vs2[i]) + vd[i]  ; FP multiply-accumulate, overwrites addend vfmacc.vv vd, vs1, vs2, vm    # vd[i] = +(vs1[i] * vs2[i]) + vd[i]  It's reasonable to expect that the Go assembler would use the same argument ordering for both of these instructions. It currently does not.  We fix the issue by switching the argument ordering for the vector integer multiply add instructions to match those of the vector FMA instructions.  Change-Id: Ib98e9999617f991969e5c831734b3bb3324439f6 Reviewed-on: https://go-review.googlesource.com/c/go/+/670335 Reviewed-by: Carlos Amedee <carlos@golang.org> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Reviewed-by: Meng Zhuo <mengzhuo1203@gmail.com> Reviewed-by: Cherry Mui <cherryyz@google.com>",40,40,80
golang/go,0375edd901f2807af29af95f60a06065c489708c,Damien Neil,2025-05-21T00:02:11Z,"os: skip TestOpenFileCreateExclDanglingSymlink when no symlinks  Skip this test on plan9, and any other platform that doesn't have symlinks.  Fixes #73729  Change-Id: I8052db24ed54c3361530bd4f54c96c9d10c4714c Reviewed-on: https://go-review.googlesource.com/c/go/+/674697 LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Auto-Submit: Alan Donovan <adonovan@google.com> Commit-Queue: Alan Donovan <adonovan@google.com> Reviewed-by: Richard Miller <millerresearch@gmail.com> Reviewed-by: Alan Donovan <adonovan@google.com>",1,0,1
golang/go,7f806c1052aa919c1c195a5b2223626beab2495c,Guoqi Chen,2025-04-25T11:59:01Z,"runtime, internal/fuzz: optimize build tag combination on loong64  Change-Id: I971b789beb08e0c6b11169fd5547a8d4ab74fab5 Reviewed-on: https://go-review.googlesource.com/c/go/+/668155 Reviewed-by: Junyang Shao <shaojunyang@google.com> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Reviewed-by: Jorropo <jorropo.pgm@gmail.com> Reviewed-by: Dmitri Shuralyov <dmitshur@google.com>",2,2,4
golang/go,5b17e2f92782bd81589b89d4cd9fbb26cae2bcd5,Xiaolin Zhao,2025-05-16T03:05:03Z,"crypto/subtle: optimize function xorBytes using SIMD on loong64  On the Loongson-3A6000-HV and Loongson-3A5000, there has been a significant improvement in all performance metrics except for '8Bytes', which has experienced a decline, as follows.  goos: linux goarch: loong64 pkg: crypto/subtle cpu: Loongson-3A6000-HV @ 2500.00MHz                                    |  bench.old   |              bench.new              |                                    |    sec/op    |   sec/op     vs base                | XORBytes/8Bytes                       7.282n Â± 0%   8.805n Â± 0%  +20.91% (p=0.000 n=10) XORBytes/128Bytes                     14.43n Â± 0%   10.01n Â± 0%  -30.63% (p=0.000 n=10) XORBytes/2048Bytes                   110.60n Â± 0%   46.57n Â± 0%  -57.89% (p=0.000 n=10) XORBytes/8192Bytes                    418.7n Â± 0%   161.8n Â± 0%  -61.36% (p=0.000 n=10) XORBytes/32768Bytes                   3.220Âµ Â± 0%   1.673Âµ Â± 0%  -48.04% (p=0.000 n=10) XORBytesAlignment/8Bytes0Offset       7.621n Â± 0%   9.305n Â± 0%  +22.10% (p=0.000 n=10) XORBytesAlignment/8Bytes1Offset       7.621n Â± 0%   9.305n Â± 0%  +22.10% (p=0.000 n=10) XORBytesAlignment/8Bytes2Offset       7.621n Â± 0%   9.305n Â± 0%  +22.10% (p=0.000 n=10) XORBytesAlignment/8Bytes3Offset       7.621n Â± 0%   9.305n Â± 0%  +22.10% (p=0.000 n=10) XORBytesAlignment/8Bytes4Offset       7.621n Â± 0%   9.305n Â± 0%  +22.10% (p=0.000 n=10) XORBytesAlignment/8Bytes5Offset       7.621n Â± 0%   9.305n Â± 0%  +22.10% (p=0.000 n=10) XORBytesAlignment/8Bytes6Offset       7.621n Â± 0%   9.305n Â± 0%  +22.10% (p=0.000 n=10) XORBytesAlignment/8Bytes7Offset       7.621n Â± 0%   9.305n Â± 0%  +22.10% (p=0.000 n=10) XORBytesAlignment/128Bytes0Offset    14.430n Â± 0%   9.973n Â± 0%  -30.88% (p=0.000 n=10) XORBytesAlignment/128Bytes1Offset     20.83n Â± 0%   11.03n Â± 0%  -47.05% (p=0.000 n=10) XORBytesAlignment/128Bytes2Offset     20.83n Â± 0%   11.03n Â± 0%  -47.07% (p=0.000 n=10) XORBytesAlignment/128Bytes3Offset     20.83n Â± 0%   11.03n Â± 0%  -47.07% (p=0.000 n=10) XORBytesAlignment/128Bytes4Offset     20.83n Â± 0%   11.03n Â± 0%  -47.05% (p=0.000 n=10) XORBytesAlignment/128Bytes5Offset     20.83n Â± 0%   11.03n Â± 0%  -47.05% (p=0.000 n=10) XORBytesAlignment/128Bytes6Offset     20.83n Â± 0%   11.03n Â± 0%  -47.05% (p=0.000 n=10) XORBytesAlignment/128Bytes7Offset     20.83n Â± 0%   11.03n Â± 0%  -47.05% (p=0.000 n=10) XORBytesAlignment/2048Bytes0Offset   110.60n Â± 0%   46.82n Â± 0%  -57.67% (p=0.000 n=10) XORBytesAlignment/2048Bytes1Offset    234.4n Â± 0%   109.3n Â± 0%  -53.37% (p=0.000 n=10) XORBytesAlignment/2048Bytes2Offset    234.4n Â± 0%   109.3n Â± 0%  -53.37% (p=0.000 n=10) XORBytesAlignment/2048Bytes3Offset    234.4n Â± 0%   109.3n Â± 0%  -53.37% (p=0.000 n=10) XORBytesAlignment/2048Bytes4Offset    234.5n Â± 0%   109.3n Â± 0%  -53.39% (p=0.000 n=10) XORBytesAlignment/2048Bytes5Offset    234.4n Â± 0%   109.3n Â± 0%  -53.37% (p=0.000 n=10) XORBytesAlignment/2048Bytes6Offset    234.4n Â± 0%   109.3n Â± 0%  -53.37% (p=0.000 n=10) XORBytesAlignment/2048Bytes7Offset    234.5n Â± 0%   109.3n Â± 0%  -53.39% (p=0.000 n=10) geomean                               39.42n        26.00n       -34.05%  goos: linux goarch: loong64 pkg: crypto/subtle cpu: Loongson-3A5000 @ 2500.00MHz                                    |  bench.old   |              bench.new              |                                    |    sec/op    |   sec/op     vs base                | XORBytes/8Bytes                       11.21n Â± 0%   12.41n Â± 1%  +10.70% (p=0.000 n=10) XORBytes/128Bytes                     18.22n Â± 0%   13.61n Â± 0%  -25.30% (p=0.000 n=10) XORBytes/2048Bytes                   162.20n Â± 0%   48.46n Â± 0%  -70.13% (p=0.000 n=10) XORBytes/8192Bytes                    629.8n Â± 0%   163.8n Â± 0%  -73.99% (p=0.000 n=10) XORBytes/32768Bytes                  4731.0n Â± 1%   632.8n Â± 0%  -86.63% (p=0.000 n=10) XORBytesAlignment/8Bytes0Offset       11.61n Â± 1%   12.42n Â± 0%   +6.98% (p=0.000 n=10) XORBytesAlignment/8Bytes1Offset       11.61n Â± 0%   12.41n Â± 0%   +6.89% (p=0.000 n=10) XORBytesAlignment/8Bytes2Offset       11.61n Â± 0%   12.42n Â± 0%   +6.98% (p=0.000 n=10) XORBytesAlignment/8Bytes3Offset       11.61n Â± 0%   12.41n Â± 0%   +6.89% (p=0.000 n=10) XORBytesAlignment/8Bytes4Offset       11.61n Â± 0%   12.42n Â± 0%   +6.98% (p=0.000 n=10) XORBytesAlignment/8Bytes5Offset       11.61n Â± 0%   12.41n Â± 0%   +6.89% (p=0.000 n=10) XORBytesAlignment/8Bytes6Offset       11.61n Â± 0%   12.41n Â± 1%   +6.89% (p=0.000 n=10) XORBytesAlignment/8Bytes7Offset       11.61n Â± 0%   12.42n Â± 0%   +6.98% (p=0.000 n=10) XORBytesAlignment/128Bytes0Offset     17.82n Â± 0%   13.62n Â± 0%  -23.57% (p=0.000 n=10) XORBytesAlignment/128Bytes1Offset     26.62n Â± 0%   18.43n Â± 0%  -30.78% (p=0.000 n=10) XORBytesAlignment/128Bytes2Offset     26.64n Â± 0%   18.43n Â± 0%  -30.85% (p=0.000 n=10) XORBytesAlignment/128Bytes3Offset     26.65n Â± 0%   18.42n Â± 0%  -30.90% (p=0.000 n=10) XORBytesAlignment/128Bytes4Offset     26.65n Â± 0%   18.42n Â± 0%  -30.88% (p=0.000 n=10) XORBytesAlignment/128Bytes5Offset     26.62n Â± 0%   18.42n Â± 0%  -30.82% (p=0.000 n=10) XORBytesAlignment/128Bytes6Offset     26.63n Â± 0%   18.42n Â± 0%  -30.84% (p=0.000 n=10) XORBytesAlignment/128Bytes7Offset     26.64n Â± 0%   18.42n Â± 0%  -30.86% (p=0.000 n=10) XORBytesAlignment/2048Bytes0Offset   161.80n Â± 0%   48.25n Â± 0%  -70.18% (p=0.000 n=10) XORBytesAlignment/2048Bytes1Offset    354.6n Â± 0%   189.2n Â± 0%  -46.64% (p=0.000 n=10) XORBytesAlignment/2048Bytes2Offset    354.6n Â± 0%   189.2n Â± 0%  -46.64% (p=0.000 n=10) XORBytesAlignment/2048Bytes3Offset    354.7n Â± 0%   189.2n Â± 0%  -46.66% (p=0.000 n=10) XORBytesAlignment/2048Bytes4Offset    354.7n Â± 0%   189.2n Â± 1%  -46.66% (p=0.000 n=10) XORBytesAlignment/2048Bytes5Offset    354.7n Â± 0%   189.2n Â± 0%  -46.66% (p=0.000 n=10) XORBytesAlignment/2048Bytes6Offset    354.7n Â± 0%   189.2n Â± 0%  -46.66% (p=0.000 n=10) XORBytesAlignment/2048Bytes7Offset    354.8n Â± 0%   189.2n Â± 0%  -46.67% (p=0.000 n=10) geomean                               56.46n        36.46n       -35.42%  Change-Id: I66e150b132517e9ff4827abf796812ffe608c052 Reviewed-on: https://go-review.googlesource.com/c/go/+/673355 LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Reviewed-by: abner chenc <chenguoqi@loongson.cn> Reviewed-by: David Chase <drchase@google.com> Reviewed-by: Michael Knyszek <mknyszek@google.com>",359,74,433
golang/go,a2eb643cbf5b68b50dd2dd5b62e605ca90ababe4,limeidan,2023-10-09T09:32:03Z,"cmd/dist, internal/platform: enable internal linking feature and test on loong64  Change-Id: Ifea676e9eb44281465832fc4050f6286e50f4543 Reviewed-on: https://go-review.googlesource.com/c/go/+/533717 Reviewed-by: Dmitri Shuralyov <dmitshur@google.com> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Reviewed-by: David Chase <drchase@google.com> Reviewed-by: abner chenc <chenguoqi@loongson.cn> Reviewed-by: sophie zhao <zhaoxiaolin@loongson.cn> Reviewed-by: Qiqi Huang <huangqiqi@loongson.cn>",5,5,10
golang/go,d37a1bdd48458e48de13cdc320c8ddf9b021e356,Xiaolin Zhao,2025-05-19T09:02:48Z,"cmd/compile: fix the implementation of NORconst on loong64  In the loong64 instruction set, there is no NORI instruction, so the immediate value in NORconst need to be stored in register and then use the three-register NOR instruction.  Change-Id: I5ef697450619317218cb3ef47fc07e238bdc2139 Reviewed-on: https://go-review.googlesource.com/c/go/+/673836 Reviewed-by: abner chenc <chenguoqi@loongson.cn> Reviewed-by: David Chase <drchase@google.com> Reviewed-by: Michael Knyszek <mknyszek@google.com> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com>",26,1,27
golang/go,74304cda29381fd5ba07a4090b701f8a670896c6,thepudds,2025-03-12T21:29:25Z,"cmd/compile/internal/escape: improve order of work to speed up analyzing many locations  For the package github.com/microsoft/typescript-go/internal/checker, compilation currently spends most of its time in escape analysis.  Here, we re-order work to be more efficient when analyzing many locations, and delay visiting some locations to prioritize locations that might be more likely to reach a terminal point of reaching the heap and possibly reduce the count of intermediate states for each location.  Action graph reported build times show roughly a 5x improvement for compilation of the typescript-go/internal/checker package:    go1.24.0:      91.792s   cl-657179-ps1: 17.578s  with timing via:    go build -a -debug-actiongraph=/tmp/actiongraph-cl-657179-ps1 -v github.com/microsoft/typescript-go/internal/checker  There are some additional adjustments to make here, including we can consider a follow-on CL I have that parallelizes the operations of the core loop, but this seems to be a nice win as is, and my understanding is the desire is to merge this as it stands.  Updates #72815  Change-Id: I1753c5354b495b059f68fb97f3103ee7834f9eee Reviewed-on: https://go-review.googlesource.com/c/go/+/657179 Reviewed-by: Cherry Mui <cherryyz@google.com> Reviewed-by: David Chase <drchase@google.com> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com>",113,22,135
golang/go,a070533633bd709bc3598dbd7c28edca1d2ba6e2,khr@golang.org,2025-05-20T22:59:02Z,reflect: turn off allocation test if instrumentation is on  Help fix the asan builders.  Change-Id: I980f5171519643c3543bdefc6ea46fd0fca17c28 Reviewed-on: https://go-review.googlesource.com/c/go/+/674616 Reviewed-by: Dmitri Shuralyov <dmitshur@google.com> Reviewed-by: Keith Randall <khr@google.com> Auto-Submit: Keith Randall <khr@golang.org> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Reviewed-by: Dmitri Shuralyov <dmitshur@golang.org>,5,0,5
golang/go,4cdca1342b1d3d9591d72a7e7cf67068aa54c524,khr@golang.org,2025-05-20T22:56:29Z,runtime: disable stack allocation test when instrumentation is on  Should fix some asan build failures.  Change-Id: Ic0a816b56a1a278aa0ad541aea962f9fea7b10fc Reviewed-on: https://go-review.googlesource.com/c/go/+/674696 Reviewed-by: Dmitri Shuralyov <dmitshur@golang.org> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Reviewed-by: Keith Randall <khr@google.com> Reviewed-by: Dmitri Shuralyov <dmitshur@google.com>,7,1,8
golang/go,fccac5fe98d10479cab5031d1dd913b2f96387f2,Filippo Valsorda,2025-01-08T10:16:48Z,"crypto/ecdsa,crypto/ed25519: cache FIPS private keys  All private keys need to go through a slow PCT in FIPS-140 mode.  ECDH and RSA keys have places to hide a precomputed value without causing races, but Ed25519 and ECDSA keys might be constructed by the application and then used with concurrent Sign calls.  For these, implement an equivalent to crypto/internal/boring/bcache using weak.Pointer and runtime.AddCleanup.  fips140: latest goos: linux goarch: amd64 pkg: crypto/ed25519 cpu: AMD Ryzen 7 PRO 8700GE w/ Radeon 780M Graphics            â 1a93e4a2cf  â             78a819ea78             â            â   sec/op    â   sec/op     vs base               â Signing-16   72.72Âµ Â± 0%   16.93Âµ Â± 1%  -76.72% (p=0.002 n=6)  fips140: off goos: linux goarch: amd64 pkg: crypto/ed25519 cpu: AMD Ryzen 7 PRO 8700GE w/ Radeon 780M Graphics            â 310bad31e5  â         310bad31e5-dirty          â            â   sec/op    â   sec/op     vs base              â Signing-16   17.18Âµ Â± 1%   16.95Âµ Â± 1%  -1.36% (p=0.002 n=6)  fips140: latest goos: linux goarch: amd64 pkg: crypto/ecdsa cpu: AMD Ryzen 7 PRO 8700GE w/ Radeon 780M Graphics              â  1a93e4a2cf  â             78a819ea78             â              â    sec/op    â   sec/op     vs base               â Sign/P256-16    90.97Âµ Â± 0%   21.04Âµ Â± 0%  -76.87% (p=0.002 n=6) Sign/P384-16    701.6Âµ Â± 1%   142.0Âµ Â± 0%  -79.75% (p=0.002 n=6) Sign/P521-16   2943.5Âµ Â± 1%   491.9Âµ Â± 0%  -83.29% (p=0.002 n=6)  fips140: off goos: linux goarch: amd64 pkg: crypto/ecdsa cpu: AMD Ryzen 7 PRO 8700GE w/ Radeon 780M Graphics              â 1a93e4a2cf  â             78a819ea78             â              â   sec/op    â   sec/op     vs base               â Sign/P256-16   21.27Âµ Â± 0%   21.13Âµ Â± 0%   -0.65% (p=0.002 n=6) Sign/P384-16   143.3Âµ Â± 0%   142.4Âµ Â± 0%   -0.63% (p=0.009 n=6) Sign/P521-16   525.3Âµ Â± 0%   462.1Âµ Â± 0%  -12.04% (p=0.002 n=6)  This unavoidably introduces allocations in the very first use of Ed25519 private keys, but usually that's not in the hot path.  Change-Id: I6a6a465640a5dff64edd73ee5dda5f2ad1b476b9 Reviewed-on: https://go-review.googlesource.com/c/go/+/654096 Auto-Submit: Filippo Valsorda <filippo@golang.org> Reviewed-by: Daniel McCarney <daniel@binaryparadox.net> Reviewed-by: David Chase <drchase@google.com> Reviewed-by: Roland Shoemaker <roland@golang.org> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com>",259,14,273
golang/go,0afcf9192ca27cb35249cfd1728858517371a382,Damien Neil,2025-05-20T18:16:23Z,"runtime: record synctest bubble ownership in hchan  Replace the hchan.synctest bool with an hchan.bubble reference to the synctest bubble that created the chan. I originally used a bool to avoid increasing the size of hchan, but we have space in hchan's current size class for another pointer.  This lets us detect one bubble operating on a chan created in a different bubble.  For #67434  Change-Id: If6cf9ffcb372fe7fb3f8f4ef27b664848578ba5c Reviewed-on: https://go-review.googlesource.com/c/go/+/674515 LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Reviewed-by: Michael Knyszek <mknyszek@google.com> Auto-Submit: Damien Neil <dneil@google.com>",42,22,64
golang/go,68bc0d84e9dd74a02472bfff744e0650b4b1653c,Damien Neil,2025-05-15T18:03:15Z,"encoding/json: avoid supurious synctest deadlock detection  Use a sync.OnceValue rather than a sync.WaitGroup to coordinate access to encoderCache entries.  The OnceValue better expresses the intent of the code (we want to initialize the cache entry only once).  However, the motivation for this change is to avoid testing/synctest incorrectly reporting a deadlock when multiple bubbles call Marshal at the same time. Goroutines blocked on WaitGroup.Wait are ""durably blocked"", causing confusion when a goroutine in one bubble Waits for a goroutine in a different bubble. Goroutines blocked on OnceValue are not durably blocked, avoiding the problem.  Fixes #73733 For #67434  Change-Id: I81cddda80af67cf5c280fd4327620bc37e7a6fe6 Reviewed-on: https://go-review.googlesource.com/c/go/+/673335 Auto-Submit: Damien Neil <dneil@google.com> Reviewed-by: Michael Pratt <mpratt@google.com> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com>",50,13,63
golang/go,49a660e22cb349cf13ef0a2f6214c6fdd75afda0,Damien Neil,2025-05-12T18:15:08Z,"testing/synctest: add Test  Add a synctest.Test function, superseding the experimental synctest.Run function. Promote the testing/synctest package out of experimental status.  For #67434 For #73567  Change-Id: I3c5ba030860d90fe2ddb517a2f3536efd60181a9 Reviewed-on: https://go-review.googlesource.com/c/go/+/671961 Auto-Submit: Damien Neil <dneil@google.com> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Reviewed-by: Michael Pratt <mpratt@google.com>",649,228,877
golang/go,609197b406ce8d9efd39bd3984b2cade74df35a6,Michael Matloob,2025-05-19T19:31:37Z,"cmd/doc: use golang.org/x/pkgsite/cmd/internal/doc to start server  This change switches the pkgsite command invoked to start a pkgsite server from golang.org/x/pkgsite/cmd/pkgsite to golang.org/x/pkgsite/cmd/internal/doc. The doc command is a simplified version of cmd/pkgsite that changes some options to improve the user experience. For example, it limits logging informational log messages, doesn't always expect to find modules (for example if we're outside of a module getting documentation for the standard library), and it takes the address of the page to open in the browser (which simplifies waiting for the server to start listening).  Fixes #68106  Change-Id: I667a49d03823242fa1aff333ecb1c0f198e92412 Reviewed-on: https://go-review.googlesource.com/c/go/+/674158 LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Reviewed-by: Jonathan Amsterdam <jba@google.com> Reviewed-by: David Chase <drchase@google.com>",27,55,82
golang/go,546761aff45111490b21a045e3d989104182bcd9,Michael Matloob,2025-05-19T19:31:37Z,"cmd/doc: use go list to determine import path if it's missing  cmd/doc uses go/build to get information about the packages it's documenting. In some cases, go/build can return a build.Package that it couldn't determine an import path for, in which case it sets the import path to ""."". This can happen for relative package paths in in a module: for relative package paths we don't use the go command to get information about the module and just open the source files directly instead, and will be missing the import path. This is usually okay because go doc doesn't need to print the import path of the package it's documenting, but for go doc -http, we want to know the import path so we can open the right page in the browser.  For #68106  Change-Id: Ifba92862ad01d8d63f531c2451f18db2b0d7a3e5 Reviewed-on: https://go-review.googlesource.com/c/go/+/674556 LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Reviewed-by: Jonathan Amsterdam <jba@google.com> Reviewed-by: Michael Matloob <matloob@google.com>",24,3,27
golang/go,1972493904b41a34e35a1f62b18f5d91d84a26bd,Michael Matloob,2025-05-19T19:31:37Z,"cmd/doc: show page for the requested object  This fixes a bug where we start pkgsite for every requested object, rather than the one that we would have printed the documentation for. To make things simple, we'll run the logic that prints the documentation, but with an io.Discard writer. Then we can tell if the documentation was found based on the return values of those functions.  For #68106  Change-Id: Ibf2ab1720f381d7214fc9239b9c2e915c91f7f7b Reviewed-on: https://go-review.googlesource.com/c/go/+/674555 LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Reviewed-by: Michael Matloob <matloob@google.com> Reviewed-by: Jonathan Amsterdam <jba@google.com>",16,7,23
golang/go,113b25774ed8d1d915ae4e1adf9222865ccb0695,Junyang Shao,2025-03-31T17:50:10Z,"cmd/compile: memcombine different size stores  This CL implements the TODO in combineStores to allow combining stores of different sizes, as long as the total size aligns to 2, 4, 8.  Fixes #72832.  Change-Id: I6d1d471335da90d851ad8f3b5a0cf10bdcfa17c4 Reviewed-on: https://go-review.googlesource.com/c/go/+/661855 Reviewed-by: Keith Randall <khr@golang.org> Auto-Submit: Junyang Shao <shaojunyang@google.com> Reviewed-by: Michael Pratt <mpratt@google.com> Reviewed-by: Junyang Shao <shaojunyang@google.com> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com>",146,70,216
golang/go,fa42585dadb8d70191820549435820cb70691cf6,Mark Freeman,2025-05-19T20:06:42Z,internal/pkgbits: rename RelocEnt to RefTableEntry  Change-Id: I9b1c9a0499ad3444e8cb3e4be187f9fab816c90c Reviewed-on: https://go-review.googlesource.com/c/go/+/674159 Reviewed-by: Robert Griesemer <gri@google.com> Auto-Submit: Mark Freeman <mark@golang.org> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com>,30,34,64
golang/go,96d2211c61189f056fa3c7c8d8abb351596c0f2c,Mark Freeman,2025-05-19T19:51:03Z,"cmd/compile/internal/noder: mark Ref[T] as a primitive  Like Sync, Ref[T] is also used to define things like StringRef.  Change-Id: I9e10234504ee4dd03907bb058a6f3ae7e6a287ca Reviewed-on: https://go-review.googlesource.com/c/go/+/674157 Reviewed-by: Robert Griesemer <gri@google.com> TryBot-Bypass: Mark Freeman <mark@golang.org> Auto-Submit: Mark Freeman <mark@golang.org>",1,0,1
golang/go,2541a68a7010afcd2970ddc3979432e1a8f08406,Mateusz Poliwczak,2025-05-20T15:39:22Z,"reflect: add TypeAssert[T]  This implementation is zero-alloc when T is a concrete type, allocates when val contains a method or when T is a interface and Value was obtained for example through Elem(), in which case it has to be allocated to avoid sharing the same memory.  goos: linux goarch: amd64 pkg: reflect cpu: AMD Ryzen 5 4600G with Radeon Graphics                                                                          â /tmp/bench2 â                                                                          â   sec/op    â TypeAssert/TypeAssert[int](int)-12                                         2.725n Â± 1% TypeAssert/TypeAssert[uint8](int)-12                                       2.599n Â± 1% TypeAssert/TypeAssert[fmt.Stringer](reflect_test.testTypeWithMethod)-12    8.470n Â± 0% TypeAssert/TypeAssert[fmt.Stringer](*reflect_test.testTypeWithMethod)-12   8.460n Â± 1% TypeAssert/TypeAssert[interface_{}](int)-12                                4.181n Â± 1% TypeAssert/TypeAssert[interface_{}](reflect_test.testTypeWithMethod)-12    4.178n Â± 1% TypeAssert/TypeAssert[time.Time](time.Time)-12                             2.839n Â± 0% TypeAssert/TypeAssert[func()_string](func()_string)-12                     151.1n Â± 1% geomean                                                                    6.645n                                                                           â /tmp/bench2  â                                                                          â     B/op     â TypeAssert/TypeAssert[int](int)-12                                         0.000 Â± 0% TypeAssert/TypeAssert[uint8](int)-12                                       0.000 Â± 0% TypeAssert/TypeAssert[fmt.Stringer](reflect_test.testTypeWithMethod)-12    0.000 Â± 0% TypeAssert/TypeAssert[fmt.Stringer](*reflect_test.testTypeWithMethod)-12   0.000 Â± 0% TypeAssert/TypeAssert[interface_{}](int)-12                                0.000 Â± 0% TypeAssert/TypeAssert[interface_{}](reflect_test.testTypeWithMethod)-12    0.000 Â± 0% TypeAssert/TypeAssert[time.Time](time.Time)-12                             0.000 Â± 0% TypeAssert/TypeAssert[func()_string](func()_string)-12                     72.00 Â± 0% geomean                                                                               Â¹  Fixes #62121  Change-Id: I0911c70c5966672c930d387438643f94a40441c4 GitHub-Last-Rev: ce89a53097b53fc59ff3ce3996917f8484ad3967 GitHub-Pull-Request: golang/go#71639 Reviewed-on: https://go-review.googlesource.com/c/go/+/648056 LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Reviewed-by: Keith Randall <khr@google.com> Reviewed-by: Cherry Mui <cherryyz@google.com>",214,17,231
golang/go,d596bc0e819aec2cf65a61d8b92f6bec8e0a7124,Damien Neil,2025-05-09T23:18:49Z,"runtime: disallow closing bubbled chans from outside bubble  A chan created within a synctest bubble may not be operated on from outside the bubble. We panicked on send and receive, but not close. Panic on close as well.  For #67434  Change-Id: I98d39e0cf7baa1a679aca1fb325453d69c535308 Reviewed-on: https://go-review.googlesource.com/c/go/+/671960 LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Reviewed-by: Michael Pratt <mpratt@google.com> Auto-Submit: Damien Neil <dneil@google.com>",43,0,43
golang/go,b7382cc1f012016c91036c49db0ea6db444b47d8,Damien Neil,2025-05-09T18:07:14Z,"runtime: print blocking status of bubbled goroutines in stacks  For goroutines in a synctest bubble, include whether the goroutine is ""durably blocked"" or not in the goroutine status.  Synctest categorizes goroutines in certain states as ""durably"" blocked, where the goroutine is not merely idle but can only be awoken by another goroutine in its bubble. To make it easier for users to understand why a bubble is or is not idle, print the state of each bubbled goroutine.  For example:    goroutine 36 [chan receive, synctest bubble 34, not durably blocked]:   goroutine 37 [chan receive (synctest), synctest bubble 34, durably blocked]:  Goroutine 36 is receiving from a channel created outside its bubble. Goroutine 36 is receiving from a channel created inside its bubble.  For #67434  Change-Id: I006b656a9ce7eeb75b2be21e748440a5dd57ceb0 Reviewed-on: https://go-review.googlesource.com/c/go/+/670976 Auto-Submit: Damien Neil <dneil@google.com> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Reviewed-by: Michael Pratt <mpratt@google.com>",5,1,6
golang/go,e27a6e9e5369a3ba4082f025384019ba066f48ba,Michael Anthony Knyszek,2025-05-09T19:45:25Z,doc: add release notes for cleanups and the unique package  For #71661.  Change-Id: I74870de3f17a938bc9fd83ccc41e13e64b55b5e8 Reviewed-on: https://go-review.googlesource.com/c/go/+/671438 Reviewed-by: Cherry Mui <cherryyz@google.com> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Auto-Submit: Michael Knyszek <mknyszek@google.com> Reviewed-by: Carlos Amedee <carlos@golang.org>,21,0,21
golang/go,5b0b4c01ba44f372343ed003b297f50ee3c8ff67,Michael Anthony Knyszek,2025-04-02T01:46:45Z,runtime: add package doc for checkfinalizer mode  Fixes #72949.  Change-Id: I114eda73c57bc7d596eb1656e738b80c1cbe5254 Reviewed-on: https://go-review.googlesource.com/c/go/+/662039 Reviewed-by: Carlos Amedee <carlos@golang.org> Reviewed-by: Michael Pratt <mpratt@google.com> Auto-Submit: Michael Knyszek <mknyszek@google.com> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com>,15,0,15
golang/go,0d42cebacdba1855d11f29f708587c9a7a5cb976,Michael Anthony Knyszek,2025-05-09T19:33:22Z,runtime: report finalizer and cleanup queue length with checkfinalizer>0  This change adds tracking for approximate finalizer and cleanup queue lengths. These lengths are reported once every GC cycle as a single line printed to stderr when GODEBUG=checkfinalizer>0.  This change lays the groundwork for runtime/metrics metrics to produce the same values.  For #72948. For #72950.  Change-Id: I081721238a0fc4c7e5bee2dbaba6cfb4120d1a33 Reviewed-on: https://go-review.googlesource.com/c/go/+/671437 Reviewed-by: Michael Pratt <mpratt@google.com> Auto-Submit: Michael Knyszek <mknyszek@google.com> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com>,66,7,73
golang/go,2aac5a5cbacdaaefb518be7ea8ddc2a455ae35f2,Michael Pratt,2025-05-19T21:28:45Z,"runtime: skip testprogcgo tests in race mode on freebsd  These were just enabled by https://go.dev/cl/643897, but freebsd unfortunately doesn't seem to support cgo + race mode by default.  For #73788.  Cq-Include-Trybots: luci.golang.try:gotip-freebsd-amd64-race Change-Id: I6a6a636c06176ca746548d0588283b1429d7c6d5 Reviewed-on: https://go-review.googlesource.com/c/go/+/674160 LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com> Reviewed-by: Michael Knyszek <mknyszek@google.com> Auto-Submit: Michael Pratt <mpratt@google.com>",135,0,135
golang/go,ca3b474702dcce86bf3e8597216cc73f43a17b16,Jake Bailey,2025-05-15T05:36:57Z,unique: add alloc test for Make  This will be useful to show how the next CLs improve things.  Change-Id: I49a691295c1fe3c7455a67c7d19e5c03979f714a Reviewed-on: https://go-review.googlesource.com/c/go/+/673015 Reviewed-by: Cherry Mui <cherryyz@google.com> Reviewed-by: Michael Knyszek <mknyszek@google.com> Auto-Submit: Michael Pratt <mpratt@google.com> LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com>,111,0,111

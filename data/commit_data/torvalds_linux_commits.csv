repo,sha,author,date,message,additions,deletions,total_changes
torvalds/linux,379f604cc3dc2c865dc2b13d81faa166b6df59ec,Linus Torvalds,2025-07-12T00:24:36Z,"Merge tag 'pci-v6.16-fixes-3' of git://git.kernel.org/pub/scm/linux/kernel/git/pci/pci  Pull PCI fixes from Bjorn Helgaas:   - Track apple Root Ports explicitly and look up the driver data from    the struct device instead of using dev->driver_data, which is used by    pci_host_common_init() for the generic host bridge pointer (Marc    Zyngier)   - Set dev->driver_data before pci_host_common_init() calls    gen_pci_init() because some drivers need it to set up ECAM mappings;    this fixes a regression on MicroChip MPFS Icicle (Geert Uytterhoeven)   - Revert the now-unnecessary use of ECAM pci_config_window.priv to    store a copy of dev->driver_data (Marc Zyngier)  * tag 'pci-v6.16-fixes-3' of git://git.kernel.org/pub/scm/linux/kernel/git/pci/pci:   Revert ""PCI: ecam: Allow cfg->priv to be pre-populated from the root port device""   PCI: host-generic: Set driver_data before calling gen_pci_init()   PCI: apple: Add tracking of probed root ports",51,8,59
torvalds/linux,3c2fe27971c3c9cc27de6e369385f6428db6c0b5,Linus Torvalds,2025-07-12T00:18:40Z,"Merge tag 'drm-fixes-2025-07-12' of https://gitlab.freedesktop.org/drm/kernel  Pull drm fixes from Simona Vetter:  ""Cross-subsystem Changes:    - agp/amd64 binding dmesg noise regression fix    Core Changes:    - fix race in gem_handle_create_tail    - fixup handle_count fb refcount regression from -rc5, popular with      reports ...    - call rust dtor for drm_device release    Driver Changes:    - nouveau: magic 50ms suspend fix, acpi leak fix    - tegra: dma api error in nvdec    - pvr: fix device reset    - habanalbs maintainer update    - intel display: fix some dsi mipi sequences    - xe fixes: SRIOV fixes, small GuC fixes, disable indirect ring due      to issues, compression fix for fragmented BO, doc update  * tag 'drm-fixes-2025-07-12' of https://gitlab.freedesktop.org/drm/kernel: (22 commits)   drm/xe/guc: Default log level to non-verbose   drm/xe/bmg: Don't use WA 16023588340 and 22019338487 on VF   drm/xe/guc: Recommend GuC v70.46.2 for BMG, LNL, DG2   drm/xe/pm: Correct comment of xe_pm_set_vram_threshold()   drm/xe: Release runtime pm for error path of xe_devcoredump_read()   drm/xe/pm: Restore display pm if there is error after display suspend   drm/i915/bios: Apply vlv_fixup_mipi_sequences() to v2 mipi-sequences too   drm/gem: Fix race in drm_gem_handle_create_tail()   drm/framebuffer: Acquire internal references on GEM handles   agp/amd64: Check AGP Capability before binding to unsupported devices   drm/xe/bmg: fix compressed VRAM handling   Revert ""drm/xe/xe2: Enable Indirect Ring State support for Xe2""   drm/xe: Allocate PF queue size on pow2 boundary   drm/xe/pf: Clear all LMTT pages on alloc   drm/nouveau/gsp: fix potential leak of memory used during acpi init   rust: drm: remove unnecessary imports   MAINTAINERS: Change habanalabs maintainer   drm/imagination: Fix kernel crash when hard resetting the GPU   drm/tegra: nvdec: Fix dma_alloc_coherent error check   rust: drm: device: drop_in_place() the drm::Device in release()   ...",187,89,276
torvalds/linux,5f02b80c21e1511c32a37f642497751041069076,Linus Torvalds,2025-07-12T00:10:32Z,"Revert ""eventpoll: Fix priority inversion problem""  This reverts commit 8c44dac8add7503c345c0f6c7962e4863b88ba42.  I haven't figured out what the actual bug in this commit is, but I did spend a lot of time chasing it down and eventually succeeded in bisecting it down to this.  For some reason, this eventpoll commit ends up causing delays and stuck user space processes, but it only happens on one of my machines, and only during early boot or during the flurry of initial activity when logging in.  I must be triggering some very subtle timing issue, but once I figured out the behavior pattern that made it reasonably reliable to trigger, it did bisect right to this, and reverting the commit fixes the problem.  Of course, that was only after I had failed at bisecting it several times, and had flailed around blaming both the drm people and the netlink people for the odd problems.  The most obvious of which happened at the time of the first graphical login (the most common symptom being that some gnome app aborted due to a 30s timeout, often leading to the whole session then failing if it was some critical component like gnome-shell or similar).  Acked-by: Nam Cao <namcao@linutronix.de> Cc: Frederic Weisbecker <frederic@kernel.org> Cc: Valentin Schneider <vschneid@redhat.com> Cc: Christian Brauner <brauner@kernel.org> Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>",324,134,458
torvalds/linux,40f92e79b0aabbf3575e371f9054657a421a3e79,Linus Torvalds,2025-07-11T17:35:54Z,"Merge tag 'block-6.16-20250710' of git://git.kernel.dk/linux  Pull block fixes from Jens Axboe:   - MD changes via Yu:      - fix UAF due to stack memory used for bio mempool (Jinchao)      - fix raid10/raid1 nowait IO error path (Nigel and Qixing)      - fix kernel crash from reading bitmap sysfs entry (HÃ¥kon)   - Fix for a UAF in the nbd connect error path   - Fix for blocksize being bigger than pagesize, if THP isn't enabled  * tag 'block-6.16-20250710' of git://git.kernel.dk/linux:   block: reject bs > ps block devices when THP is disabled   nbd: fix uaf in nbd_genl_connect() error path   md/md-bitmap: fix GPF in bitmap_get_stats()   md/raid1,raid10: strip REQ_NOWAIT from member bios   raid10: cleanup memleak at raid10_make_request   md/raid1: Fix stack memory use after return in raid1_reshape",22,8,30
torvalds/linux,cb3002e0e977a6342c19ba957b971f7ce17ef958,Linus Torvalds,2025-07-11T17:29:30Z,"Merge tag 'io_uring-6.16-20250710' of git://git.kernel.dk/linux  Pull io_uring fixes from Jens Axboe:   - Remove a pointless warning in the zcrx code   - Fix for MSG_RING commands, where the allocated io_kiocb    needs to be freed under RCU as well   - Revert the work-around we had in place for the anon inodes    pretending to be regular files. Since that got reworked    upstream, the work-around is no longer needed  * tag 'io_uring-6.16-20250710' of git://git.kernel.dk/linux:   Revert ""io_uring: gate REQ_F_ISREG on !S_ANON_INODE as well""   io_uring/msg_ring: ensure io_kiocb freeing is deferred for RCU   io_uring/zcrx: fix pp destruction warnings",5,7,12
torvalds/linux,c7979c3917fa1326dae3607e1c6a04c12057b194,Linus Torvalds,2025-07-11T17:18:51Z,"Merge tag 'net-6.16-rc6-2' of git://git.kernel.org/pub/scm/linux/kernel/git/netdev/net  Pull more networking fixes from Jakub Kicinski  ""Big chunk of fixes for WiFi, Johannes says probably the last for the   release.    The Netlink fixes (on top of the tree) restore operation of iw (WiFi   CLI) which uses sillily small recv buffer, and is the reason for this   'emergency PR'.    The GRE multicast fix also stands out among the user-visible   regressions.    Current release - fix to a fix:     - netlink: make sure we always allow at least one skb to be queued,      even if the recvbuf is (mis)configured to be tiny    Previous releases - regressions:     - gre: fix IPv6 multicast route creation    Previous releases - always broken:     - wifi: prevent A-MSDU attacks in mesh networks     - wifi: cfg80211: fix S1G beacon head validation and detection     - wifi: mac80211:        - always clear frame buffer to prevent stack leak in cases which          hit a WARN()        - fix monitor interface in device restart     - wifi: mwifiex: discard erroneous disassoc frames on STA interface     - wifi: mt76:        - prevent null-deref in mt7925_sta_set_decap_offload()        - add missing RCU annotations, and fix sleep in atomic        - fix decapsulation offload        - fixes for scanning     - phy: microchip: improve link establishment and reset handling     - eth: mlx5e: fix race between DIM disable and net_dim()     - bnxt_en: correct DMA unmap len for XDP_REDIRECT""  * tag 'net-6.16-rc6-2' of git://git.kernel.org/pub/scm/linux/kernel/git/netdev/net: (44 commits)   netlink: make sure we allow at least one dump skb   netlink: Fix rmem check in netlink_broadcast_deliver().   bnxt_en: Set DMA unmap len correctly for XDP_REDIRECT   bnxt_en: Flush FW trace before copying to the coredump   bnxt_en: Fix DCB ETS validation   net: ll_temac: Fix missing tx_pending check in ethtools_set_ringparam()   net/mlx5e: Add new prio for promiscuous mode   net/mlx5e: Fix race between DIM disable and net_dim()   net/mlx5: Reset bw_share field when changing a node's parent   can: m_can: m_can_handle_lost_msg(): downgrade msg lost in rx message to debug level   selftests: net: lib: fix shift count out of range   selftests: Add IPv6 multicast route generation tests for GRE devices.   gre: Fix IPv6 multicast route creation.   net: phy: microchip: limit 100M workaround to link-down events on LAN88xx   net: phy: microchip: Use genphy_soft_reset() to purge stale LPA bits   ibmvnic: Fix hardcoded NUM_RX_STATS/NUM_TX_STATS with dynamic sizeof   net: appletalk: Fix device refcount leak in atrtr_create()   netfilter: flowtable: account for Ethernet header in nf_flow_pppoe_proto()   wifi: mac80211: add the virtual monitor after reconfig complete   wifi: mac80211: always initialize sdata::key_list   ...",500,277,777
torvalds/linux,5265593a28d91aed5529c31e720be8d3e78e0695,Linus Torvalds,2025-07-11T17:15:50Z,Merge tag 'gpio-fixes-for-v6.16-rc6' of git://git.kernel.org/pub/scm/linux/kernel/git/brgl/linux  Pull gpio fixes from Bartosz Golaszewski:   - fix performance regression when setting values of multiple GPIO lines    at once   - make sure the GPIO OF xlate code doesn't end up passing an    uninitialized local variable to GPIO core   - update MAINTAINERS  * tag 'gpio-fixes-for-v6.16-rc6' of git://git.kernel.org/pub/scm/linux/kernel/git/brgl/linux:   MAINTAINERS: remove bouncing address for Nandor Han   gpio: of: initialize local variable passed to the .of_xlate() callback   gpiolib: fix performance regression when using gpio_chip_get_multiple(),4,10,14
torvalds/linux,87cf461cd30bc3e0ae48936a96590de8db747f54,Linus Torvalds,2025-07-11T16:19:33Z,"Merge tag 'pm-6.16-rc6' of git://git.kernel.org/pub/scm/linux/kernel/git/rafael/linux-pm  Pull power management fix from Rafael Wysocki:  ""Fix a coding mistake in a previous fix related to system suspend and   hibernation merged recently""  * tag 'pm-6.16-rc6' of git://git.kernel.org/pub/scm/linux/kernel/git/rafael/linux-pm:   PM: sleep: Call pm_restore_gfp_mask() after dpm_resume()",1,1,2
torvalds/linux,a0f8361c3ce4cf706608edb81c4334783cb093cf,Linus Torvalds,2025-07-11T15:49:25Z,Merge tag 'dma-mapping-6.16-2025-07-11' of git://git.kernel.org/pub/scm/linux/kernel/git/mszyprowski/linux  Pull dma-mapping fix from Marek Szyprowski:   - small fix relevant to arm64 server and custom CMA configuration (Feng    Tang)  * tag 'dma-mapping-6.16-2025-07-11' of git://git.kernel.org/pub/scm/linux/kernel/git/mszyprowski/linux:   dma-contiguous: hornor the cma address limit setup by user,4,1,5
torvalds/linux,a215b5723922f8099078478122f02100e489cb80,Jakub Kicinski,2025-07-11T00:11:21Z,"netlink: make sure we allow at least one dump skb  Commit under Fixes tightened up the memory accounting for Netlink sockets. Looks like the accounting is too strict for some existing use cases, Marek reported issues with nl80211 / WiFi iw CLI.  To reduce number of iterations Netlink dumps try to allocate messages based on the size of the buffer passed to previous recvmsg() calls. If user space uses a larger buffer in recvmsg() than sk_rcvbuf we will allocate an skb we won't be able to queue.  Make sure we always allow at least one skb to be queued. Same workaround is already present in netlink_attachskb(). Alternative would be to cap the allocation size to   rcvbuf - rmem_alloc but as I said, the workaround is already present in other places.  Reported-by: Marek Szyprowski <m.szyprowski@samsung.com> Link: https://lore.kernel.org/9794af18-4905-46c6-b12c-365ea2f05858@samsung.com Fixes: ae8f160e7eb2 (""netlink: Fix wraparounds of sk->sk_rmem_alloc."") Tested-by: Marek Szyprowski <m.szyprowski@samsung.com> Reviewed-by: Kuniyuki Iwashima <kuniyu@google.com> Link: https://patch.msgid.link/20250711001121.3649033-1-kuba@kernel.org Signed-off-by: Jakub Kicinski <kuba@kernel.org>",3,2,5
torvalds/linux,a3c4a125ec725cefb40047eb05ff9eafd57830b4,Kuniyuki Iwashima,2025-07-11T05:32:07Z,"netlink: Fix rmem check in netlink_broadcast_deliver().  We need to allow queuing at least one skb even when skb is larger than sk->sk_rcvbuf.  The cited commit made a mistake while converting a condition in netlink_broadcast_deliver().  Let's correct the rmem check for the allow-one-skb rule.  Fixes: ae8f160e7eb24 (""netlink: Fix wraparounds of sk->sk_rmem_alloc."") Signed-off-by: Kuniyuki Iwashima <kuniyu@google.com> Link: https://patch.msgid.link/20250711053208.2965945-1-kuniyu@google.com Signed-off-by: Jakub Kicinski <kuba@kernel.org>",1,1,2
torvalds/linux,52c14ea7d7580de164deab1e756eaf854dac85b2,Jakub Kicinski,2025-07-11T14:28:36Z,Merge branch 'bnxt_en-3-bug-fixes'  Michael Chan says:  ==================== bnxt_en: 3 bug fixes  The first one fixes a possible failure when setting DCB ETS. The second one fixes the ethtool coredump (-W 2) not containing all the FW traces.  The third one fixes the DMA unmap length when transmitting XDP_REDIRECT packets. ====================  Link: https://patch.msgid.link/20250710213938.1959625-1-michael.chan@broadcom.com Signed-off-by: Jakub Kicinski <kuba@kernel.org>,14,8,22
torvalds/linux,3cdf199d4755d477972ee87110b2aebc88b3cfad,Somnath Kotur,2025-07-10T21:39:38Z,"bnxt_en: Set DMA unmap len correctly for XDP_REDIRECT  When transmitting an XDP_REDIRECT packet, call dma_unmap_len_set() with the proper length instead of 0.  This bug triggers this warning on a system with IOMMU enabled:  WARNING: CPU: 36 PID: 0 at drivers/iommu/dma-iommu.c:842 __iommu_dma_unmap+0x159/0x170 RIP: 0010:__iommu_dma_unmap+0x159/0x170 Code: a8 00 00 00 00 48 c7 45 b0 00 00 00 00 48 c7 45 c8 00 00 00 00 48 c7 45 a0 ff ff ff ff 4c 89 45 b8 4c 89 45 c0 e9 77 ff ff ff <0f> 0b e9 60 ff ff ff e8 8b bf 6a 00 66 66 2e 0f 1f 84 00 00 00 00 RSP: 0018:ff22d31181150c88 EFLAGS: 00010206 RAX: 0000000000002000 RBX: 00000000e13a0000 RCX: 0000000000000000 RDX: 0000000000000000 RSI: 0000000000000000 RDI: 0000000000000000 RBP: ff22d31181150cf0 R08: ff22d31181150ca8 R09: 0000000000000000 R10: 0000000000000000 R11: ff22d311d36c9d80 R12: 0000000000001000 R13: ff13544d10645010 R14: ff22d31181150c90 R15: ff13544d0b2bac00 FS: 0000000000000000(0000) GS:ff13550908a00000(0000) knlGS:0000000000000000 CS: 0010 DS: 0000 ES: 0000 CR0: 0000000080050033 CR2: 00005be909dacff8 CR3: 0008000173408003 CR4: 0000000000f71ef0 PKRU: 55555554 Call Trace: <IRQ> ? show_regs+0x6d/0x80 ? __warn+0x89/0x160 ? __iommu_dma_unmap+0x159/0x170 ? report_bug+0x17e/0x1b0 ? handle_bug+0x46/0x90 ? exc_invalid_op+0x18/0x80 ? asm_exc_invalid_op+0x1b/0x20 ? __iommu_dma_unmap+0x159/0x170 ? __iommu_dma_unmap+0xb3/0x170 iommu_dma_unmap_page+0x4f/0x100 dma_unmap_page_attrs+0x52/0x220 ? srso_alias_return_thunk+0x5/0xfbef5 ? xdp_return_frame+0x2e/0xd0 bnxt_tx_int_xdp+0xdf/0x440 [bnxt_en] __bnxt_poll_work_done+0x81/0x1e0 [bnxt_en] bnxt_poll+0xd3/0x1e0 [bnxt_en]  Fixes: f18c2b77b2e4 (""bnxt_en: optimized XDP_REDIRECT support"") Signed-off-by: Somnath Kotur <somnath.kotur@broadcom.com> Signed-off-by: Michael Chan <michael.chan@broadcom.com> Link: https://patch.msgid.link/20250710213938.1959625-4-michael.chan@broadcom.com Signed-off-by: Jakub Kicinski <kuba@kernel.org>",1,1,2
torvalds/linux,100c08c89d173b7fdf953e7d9f9ca8f69f80d1c5,Shruti Parab,2025-07-10T21:39:37Z,"bnxt_en: Flush FW trace before copying to the coredump  bnxt_fill_drv_seg_record() calls bnxt_dbg_hwrm_log_buffer_flush() to flush the FW trace buffer.  This needs to be done before we call bnxt_copy_ctx_mem() to copy the trace data.  Without this fix, the coredump may not contain all the FW traces.  Fixes: 3c2179e66355 (""bnxt_en: Add FW trace coredump segments to the coredump"") Reviewed-by: Kalesh AP <kalesh-anakkur.purayil@broadcom.com> Signed-off-by: Shruti Parab <shruti.parab@broadcom.com> Signed-off-by: Michael Chan <michael.chan@broadcom.com> Link: https://patch.msgid.link/20250710213938.1959625-3-michael.chan@broadcom.com Signed-off-by: Jakub Kicinski <kuba@kernel.org>",11,7,18
torvalds/linux,b74c2a2e9cc471e847abd87e50a2354c07e02040,Shravya KN,2025-07-10T21:39:36Z,"bnxt_en: Fix DCB ETS validation  In bnxt_ets_validate(), the code incorrectly loops over all possible traffic classes to check and add the ETS settings.  Fix it to loop over the configured traffic classes only.  The unconfigured traffic classes will default to TSA_ETS with 0 bandwidth.  Looping over these unconfigured traffic classes may cause the validation to fail and trigger this error message:  ""rejecting ETS config starving a TC\n""  The .ieee_setets() will then fail.  Fixes: 7df4ae9fe855 (""bnxt_en: Implement DCBNL to support host-based DCBX."") Reviewed-by: Sreekanth Reddy <sreekanth.reddy@broadcom.com> Signed-off-by: Shravya KN <shravya.k-n@broadcom.com> Signed-off-by: Michael Chan <michael.chan@broadcom.com> Link: https://patch.msgid.link/20250710213938.1959625-2-michael.chan@broadcom.com Signed-off-by: Jakub Kicinski <kuba@kernel.org>",2,0,2
torvalds/linux,e81750b4e3826fedce7362dad839cb40384d60ae,Alok Tiwari,2025-07-10T18:06:17Z,"net: ll_temac: Fix missing tx_pending check in ethtools_set_ringparam()  The function ll_temac_ethtools_set_ringparam() incorrectly checked rx_pending twice, once correctly for RX and once mistakenly in place of tx_pending. This caused tx_pending to be left unchecked against TX_BD_NUM_MAX. As a result, invalid TX ring sizes may have been accepted or valid ones wrongly rejected based on the RX limit, leading to potential misconfiguration or unexpected results.  This patch corrects the condition to properly validate tx_pending.  Fixes: f7b261bfc35e (""net: ll_temac: Make RX/TX ring sizes configurable"") Signed-off-by: Alok Tiwari <alok.a.tiwari@oracle.com> Link: https://patch.msgid.link/20250710180621.2383000-1-alok.a.tiwari@oracle.com Signed-off-by: Jakub Kicinski <kuba@kernel.org>",1,1,2
torvalds/linux,5b81d59f02a075cd318e898dd1f3644a261bb9c4,Jakub Kicinski,2025-07-11T14:26:49Z,Merge branch 'mlx5-misc-fixes-2025-07-10'  Tariq Toukan says:  ==================== mlx5 misc fixes 2025-07-10  This small patchset provides misc bug fixes from the team to the mlx5 core and EN drivers. ====================  Link: https://patch.msgid.link/1752155624-24095-1-git-send-email-tariqt@nvidia.com Signed-off-by: Jakub Kicinski <kuba@kernel.org>,20,9,29
torvalds/linux,4c9fce56fa702059bbc5ab737265b68f79cbaac4,Jianbo Liu,2025-07-10T13:53:44Z,"net/mlx5e: Add new prio for promiscuous mode  An optimization for promiscuous mode adds a high-priority steering table with a single catch-all rule to steer all traffic directly to the TTC table.  However, a gap exists between the creation of this table and the insertion of the catch-all rule. Packets arriving in this brief window would miss as no rule was inserted yet, unnecessarily incrementing the 'rx_steer_missed_packets' counter and dropped.  This patch resolves the issue by introducing a new prio for this table, placing it between MLX5E_TC_PRIO and MLX5E_NIC_PRIO. By doing so, packets arriving during the window now fall through to the next prio (at MLX5E_NIC_PRIO) instead of being dropped.  Fixes: 1c46d7409f30 (""net/mlx5e: Optimize promiscuous mode"") Signed-off-by: Jianbo Liu <jianbol@nvidia.com> Reviewed-by: Mark Bloch <mbloch@nvidia.com> Signed-off-by: Tariq Toukan <tariqt@nvidia.com> Reviewed-by: Jacob Keller <jacob.e.keller@intel.com> Link: https://patch.msgid.link/1752155624-24095-4-git-send-email-tariqt@nvidia.com Signed-off-by: Jakub Kicinski <kuba@kernel.org>",17,7,24
torvalds/linux,eb41a264a3a576dc040ee37c3d9d6b7e2d9be968,Carolina Jubran,2025-07-10T13:53:43Z,"net/mlx5e: Fix race between DIM disable and net_dim()  There's a race between disabling DIM and NAPI callbacks using the dim pointer on the RQ or SQ.  If NAPI checks the DIM state bit and sees it still set, it assumes `rq->dim` or `sq->dim` is valid. But if DIM gets disabled right after that check, the pointer might already be set to NULL, leading to a NULL pointer dereference in net_dim().  Fix this by calling `synchronize_net()` before freeing the DIM context. This ensures all in-progress NAPI callbacks are finished before the pointer is cleared.  Kernel log:  BUG: kernel NULL pointer dereference, address: 0000000000000000 ... RIP: 0010:net_dim+0x23/0x190 ... Call Trace:  <TASK>  ? __die+0x20/0x60  ? page_fault_oops+0x150/0x3e0  ? common_interrupt+0xf/0xa0  ? sysvec_call_function_single+0xb/0x90  ? exc_page_fault+0x74/0x130  ? asm_exc_page_fault+0x22/0x30  ? net_dim+0x23/0x190  ? mlx5e_poll_ico_cq+0x41/0x6f0 [mlx5_core]  ? sysvec_apic_timer_interrupt+0xb/0x90  mlx5e_handle_rx_dim+0x92/0xd0 [mlx5_core]  mlx5e_napi_poll+0x2cd/0xac0 [mlx5_core]  ? mlx5e_poll_ico_cq+0xe5/0x6f0 [mlx5_core]  busy_poll_stop+0xa2/0x200  ? mlx5e_napi_poll+0x1d9/0xac0 [mlx5_core]  ? mlx5e_trigger_irq+0x130/0x130 [mlx5_core]  __napi_busy_loop+0x345/0x3b0  ? sysvec_call_function_single+0xb/0x90  ? asm_sysvec_call_function_single+0x16/0x20  ? sysvec_apic_timer_interrupt+0xb/0x90  ? pcpu_free_area+0x1e4/0x2e0  napi_busy_loop+0x11/0x20  xsk_recvmsg+0x10c/0x130  sock_recvmsg+0x44/0x70  __sys_recvfrom+0xbc/0x130  ? __schedule+0x398/0x890  __x64_sys_recvfrom+0x20/0x30  do_syscall_64+0x4c/0x100  entry_SYSCALL_64_after_hwframe+0x4b/0x53 ... ---[ end trace 0000000000000000 ]--- ... ---[ end Kernel panic - not syncing: Fatal exception in interrupt ]---  Fixes: 445a25f6e1a2 (""net/mlx5e: Support updating coalescing configuration without resetting channels"") Signed-off-by: Carolina Jubran <cjubran@nvidia.com> Reviewed-by: Cosmin Ratiu <cratiu@nvidia.com> Signed-off-by: Tariq Toukan <tariqt@nvidia.com> Reviewed-by: Jacob Keller <jacob.e.keller@intel.com> Link: https://patch.msgid.link/1752155624-24095-3-git-send-email-tariqt@nvidia.com Signed-off-by: Jakub Kicinski <kuba@kernel.org>",2,2,4
torvalds/linux,f7b76466894083c8f518cf29fef75fcd3ec670e5,Carolina Jubran,2025-07-10T13:53:42Z,"net/mlx5: Reset bw_share field when changing a node's parent  When changing a node's parent, its scheduling element is destroyed and re-created with bw_share 0. However, the node's bw_share field was not updated accordingly.  Set the node's bw_share to 0 after re-creation to keep the software state in sync with the firmware configuration.  Fixes: 9c7bbf4c3304 (""net/mlx5: Add support for setting parent of nodes"") Signed-off-by: Carolina Jubran <cjubran@nvidia.com> Reviewed-by: Cosmin Ratiu <cratiu@nvidia.com> Reviewed-by: Dragos Tatulea <dtatulea@nvidia.com> Signed-off-by: Tariq Toukan <tariqt@nvidia.com> Reviewed-by: Jacob Keller <jacob.e.keller@intel.com> Link: https://patch.msgid.link/1752155624-24095-2-git-send-email-tariqt@nvidia.com Signed-off-by: Jakub Kicinski <kuba@kernel.org>",1,0,1
torvalds/linux,71b976db8c6e683831e1492efdf1fe0a8487adef,Jakub Kicinski,2025-07-11T14:07:56Z,"Merge tag 'linux-can-fixes-for-6.16-20250711' of git://git.kernel.org/pub/scm/linux/kernel/git/mkl/linux-can  Marc Kleine-Budde says:  ==================== pull-request: can 2025-07-11  Sean Nyekjaer's patch targets the m_can driver and demotes the ""msg lost in rx"" message to debug level to prevent flooding the kernel log with error messages.  * tag 'linux-can-fixes-for-6.16-20250711' of git://git.kernel.org/pub/scm/linux/kernel/git/mkl/linux-can:   can: m_can: m_can_handle_lost_msg(): downgrade msg lost in rx message to debug level ====================  Link: https://patch.msgid.link/20250711102451.2828802-1-mkl@pengutronix.de Signed-off-by: Jakub Kicinski <kuba@kernel.org>",1,1,2
torvalds/linux,b7dc79a6332fe6f58f2e6b2a631bad101dc79107,Simona Vetter,2025-07-11T12:11:18Z,"Merge tag 'drm-misc-fixes-2025-07-10' of https://gitlab.freedesktop.org/drm/misc/kernel into drm-fixes  drm-misc-fixes for v6.16-rc6 or final: - Fix nouveau fail on debugfs errors. - Magic 50 ms to fix nouveau suspend. - Call rust destructor on drm device release. - Fix DMA api error handling in tegra/nvdec. - Fix PVR device reset. - Habanalabs maintainer update. - Small memory leak fix when nouveau acpi init fails. - Do not attempt to bind to any PCI device with AGP capability. - Make FB's acquire handles on backing object, same as i915/xe already does. - Fix race in drm_gem_handle_create_tail.  Signed-off-by: Simona Vetter <simona.vetter@ffwll.ch> From: Maarten Lankhorst <maarten.lankhorst@linux.intel.com> Link: https://patchwork.freedesktop.org/patch/msgid/e522cdc7-1787-48f2-97e5-0f94783970ab@linux.intel.com",130,62,192
torvalds/linux,58805e9cbc6f6a28f35d90e740956e983a0e036e,Sean Nyekjaer,2025-07-11T10:12:02Z,"can: m_can: m_can_handle_lost_msg(): downgrade msg lost in rx message to debug level  Downgrade the ""msg lost in rx"" message to debug level, to prevent flooding the kernel log with error messages.  Fixes: e0d1f4816f2a (""can: m_can: add Bosch M_CAN controller support"") Reviewed-by: Vincent Mailhol <mailhol.vincent@wanadoo.fr> Signed-off-by: Sean Nyekjaer <sean@geanix.com> Link: https://patch.msgid.link/20250711-mcan_ratelimit-v3-1-7413e8e21b84@geanix.com [mkl: enhance commit message] Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>",1,1,2
torvalds/linux,14e85fabee2b3e0e7055ab4c38b2a541ecd9c823,Simona Vetter,2025-07-11T09:35:39Z,"Merge tag 'drm-xe-fixes-2025-07-11' of https://gitlab.freedesktop.org/drm/xe/kernel into drm-fixes  Driver Changes: - Clear LMTT page to avoid leaking data from one VF to another - Align PF queue size to power of 2 - Disable Indirect Ring State to avoid intermittent issues on context   switch: feature is not currently needed, so can be disabled for now. - Fix compression handling when the BO pages are very fragmented - Restore display pm on error path - Fix runtime pm handling in xe devcoredump - Fix xe_pm_set_vram_threshold() doc - Recommend new minor versions of GuC firmware - Drop some workarounds on VF - Do not use verbose GuC logging by default: it should be only for   debugging  Signed-off-by: Simona Vetter <simona.vetter@ffwll.ch> From: Lucas De Marchi <lucas.demarchi@intel.com> Link: https://patchwork.freedesktop.org/patch/msgid/s6jyd24mimbzb4vxtgc5vupvbyqplfep2c6eupue7znnlbhuxy@lmvzexfzhrnn",53,23,76
torvalds/linux,3638e6a84b7368a4fb222f05c2febc06c434a10a,Simona Vetter,2025-07-11T09:28:41Z,Merge tag 'drm-intel-fixes-2025-07-10' of https://gitlab.freedesktop.org/drm/i915/kernel into drm-fixes  Short summary of fixes: - DSI panel's version 2 mipi-sequences fix (Hans)  Signed-off-by: Simona Vetter <simona.vetter@ffwll.ch> From: Rodrigo Vivi <rodrigo.vivi@intel.com> Link: https://patchwork.freedesktop.org/patch/msgid/aHA_eR0G7X2P6_ib@intel.com,4,4,8
torvalds/linux,edb471108cf1477c44b95e87e8cec261825eb079,Bartosz Golaszewski,2025-07-09T07:18:24Z,MAINTAINERS: remove bouncing address for Nandor Han  Nandor's address has been bouncing for some time now. Remove it from MAINTAINERS. The affected driver falls under the wider umbrella of GPIO modules.  Link: https://lore.kernel.org/r/20250709071825.16212-1-brgl@bgdev.pl Signed-off-by: Bartosz Golaszewski <bartosz.golaszewski@linaro.org>,0,7,7
torvalds/linux,74806f69b8668ea0e98cd9d461b7803ffa1fcdf3,Lucas De Marchi,2025-06-13T20:00:37Z,"drm/xe/guc: Default log level to non-verbose  Currently xe sets the guc log level to a verbose level since it's useful to debug hangs and general development. However the verbose level may already be too much and affect performance.  Michal Mrozek did some tests with the L0 compute stack for submission latency with ULLS disabled. Below are the normalized numbers with log level 3 (the current default) as baseline for each test:                            Test \ Log Level                        3      0      1      2  ----------------------------------------------------------- ------ ------ ------ ------   BestWalkerNthCommandListSubmission(CmdListCount=2)           1.00   0.63   0.63   0.96   BestWalkerNthSubmission(KernelCount=2)                       1.00   0.62   0.63   0.96   BestWalkerNthSubmissionImmediate(KernelCount=2)              1.00   0.58   0.58   0.85   BestWalkerSubmission                                         1.00   0.62   0.62   0.96   BestWalkerSubmissionImmediate                                1.00   0.63   0.62   0.96   BestWalkerSubmissionImmediateMultiCmdlists(cmdlistCount=2)   1.00   0.58   0.58   0.86   BestWalkerSubmissionImmediateMultiCmdlists(cmdlistCount=4)   1.00   0.70   0.70   0.83   BestWalkerSubmissionImmediateMultiCmdlists(cmdlistCount=8)   1.00   0.53   0.52   0.78  Log level 2 is the first ""verbose level"" for GuC, where the biggest difference happens. Keep log level 3 for CONFIG_DRM_XE_DEBUG, but switch to 1, i.e.  GUC_LOG_LEVEL_NON_VERBOSE, for ""normal"" builds.  Cc: Michal Mrozek <michal.mrozek@intel.com> Cc: John Harrison <John.C.Harrison@Intel.com> Reviewed-by: John Harrison <John.C.Harrison@Intel.com> Link: https://lore.kernel.org/r/20250613-guc-log-level-v2-1-cb84a63e49fe@intel.com Signed-off-by: Lucas De Marchi <lucas.demarchi@intel.com> (cherry picked from commit a37128ba613ad6a5f81f382fa3cfe5c4a6527310) Signed-off-by: Lucas De Marchi <lucas.demarchi@intel.com>",1,1,2
torvalds/linux,7a10175a4220b3f77d74a61ef767f6c43bf39a3e,Michal Wajdeczko,2025-07-10T10:30:39Z,drm/xe/bmg: Don't use WA 16023588340 and 22019338487 on VF  These workarounds are not applicable for use by the VFs.  Signed-off-by: Michal Wajdeczko <michal.wajdeczko@intel.com> Tested-by: Jakub Kolakowski <jakub1.kolakowski@intel.com> Reviewed-by: Satyanarayana K V P <satyanarayana.k.v.p@intel.com> Signed-off-by: Jakub Kolakowski <jakub1.kolakowski@intel.com> Link: https://lore.kernel.org/r/20250710103040.375610-2-jakub1.kolakowski@intel.com Signed-off-by: Lucas De Marchi <lucas.demarchi@intel.com> (cherry picked from commit 1d2e2503e506ddc499cbb7afdc8b70bcf6fe241f) Signed-off-by: Lucas De Marchi <lucas.demarchi@intel.com>,2,2,4
torvalds/linux,8c018805097f52d0d35fbc273b4e6dd154811638,Julia Filipchuk,2025-06-26T18:28:10Z,"drm/xe/guc: Recommend GuC v70.46.2 for BMG, LNL, DG2  UAPI compatibility version 1.22.2  Resolves various bugs. Recommend newer version.  Signed-off-by: Julia Filipchuk <julia.filipchuk@intel.com> Reviewed-by: Daniele Ceraolo Spurio <daniele.ceraolospurio@intel.com> Signed-off-by: Daniele Ceraolo Spurio <daniele.ceraolospurio@intel.com> Reviewed-by: Lucas De Marchi <lucas.demarchi@intel.com> Link: https://lore.kernel.org/r/20250626182805.1701096-13-daniele.ceraolospurio@intel.com (cherry picked from commit 0b64addcae7f04745bc5f62d41e27268052f812e) Signed-off-by: Lucas De Marchi <lucas.demarchi@intel.com>",3,3,6
torvalds/linux,0539c5eaf81f3f844213bf6b3137a53e5b04b083,Shuicheng Lin,2025-07-08T02:14:51Z,"drm/xe/pm: Correct comment of xe_pm_set_vram_threshold()  The parameter threshold is with size in MiB, not in bits. Correct it to avoid any confusion.  v2: s/mb/MiB, s/vram/VRAM, fix return section. (Michal)  Fixes: 30c399529f4c (""drm/xe: Document Xe PM component"") Cc: Michal Wajdeczko <michal.wajdeczko@intel.com> Cc: Rodrigo Vivi <rodrigo.vivi@intel.com> Signed-off-by: Shuicheng Lin <shuicheng.lin@intel.com> Link: https://lore.kernel.org/r/20250708021450.3602087-2-shuicheng.lin@intel.com Reviewed-by: Stuart Summers <stuart.summers@intel.com> Signed-off-by: Rodrigo Vivi <rodrigo.vivi@intel.com> (cherry picked from commit 0efec0500117947f924e5ac83be40f96378af85a) Signed-off-by: Lucas De Marchi <lucas.demarchi@intel.com>",5,3,8
torvalds/linux,253a174c06f8c37aa71521623205b890022b6987,Shuicheng Lin,2025-07-07T00:49:14Z,"drm/xe: Release runtime pm for error path of xe_devcoredump_read()  xe_pm_runtime_put() is missed to be called for the error path in xe_devcoredump_read(). Add function description comments for xe_devcoredump_read() to help understand it.  v2: more detail function comments and refine goto logic (Matt)  Fixes: c4a2e5f865b7 (""drm/xe: Add devcoredump chunking"") Cc: stable@vger.kernel.org Reviewed-by: Matthew Brost <matthew.brost@intel.com> Signed-off-by: Shuicheng Lin <shuicheng.lin@intel.com> Signed-off-by: Matthew Brost <matthew.brost@intel.com> Link: https://lore.kernel.org/r/20250707004911.3502904-6-shuicheng.lin@intel.com (cherry picked from commit 017ef1228d735965419ff118fe1b89089e772c42) Signed-off-by: Lucas De Marchi <lucas.demarchi@intel.com>",28,10,38
torvalds/linux,6d33df611a39a1b4ad9f2b609ded5d6efa04d97e,Shuicheng Lin,2025-07-08T03:54:25Z,"drm/xe/pm: Restore display pm if there is error after display suspend  xe_bo_evict_all() is called after xe_display_pm_suspend(). So if there is error with xe_bo_evict_all(), display pm should be restored.  Fixes: 51462211f4a9 (""drm/xe/pxp: add PXP PM support"") Fixes: cb8f81c17531 (""drm/xe/display: Make display suspend/resume work on discrete"") Cc: Maarten Lankhorst <maarten.lankhorst@linux.intel.com> Cc: Daniele Ceraolo Spurio <daniele.ceraolospurio@intel.com> Cc: John Harrison <John.C.Harrison@Intel.com> Signed-off-by: Shuicheng Lin <shuicheng.lin@intel.com> Reviewed-by: Daniele Ceraolo Spurio <daniele.ceraolospurio@intel.com> Link: https://lore.kernel.org/r/20250708035424.3608190-2-shuicheng.lin@intel.com Signed-off-by: Rodrigo Vivi <rodrigo.vivi@intel.com> (cherry picked from commit 83dcee17855c4e5af037ae3262809036de127903) Signed-off-by: Lucas De Marchi <lucas.demarchi@intel.com>",1,2,3
torvalds/linux,47c84997c686b4d43b225521b732492552b84758,Hangbin Liu,2025-07-09T09:12:44Z,"selftests: net: lib: fix shift count out of range  I got the following warning when writing other tests:    + handle_test_result_pass 'bond 802.3ad' '(lacp_active off)'   + local 'test_name=bond 802.3ad'   + shift   + local 'opt_str=(lacp_active off)'   + shift   + log_test_result 'bond 802.3ad' '(lacp_active off)' ' OK '   + local 'test_name=bond 802.3ad'   + shift   + local 'opt_str=(lacp_active off)'   + shift   + local 'result= OK '   + shift   + local retmsg=   + shift   /net/tools/testing/selftests/net/forwarding/../lib.sh: line 315: shift: shift count out of range  This happens because an extra shift is executed even after all arguments have been consumed. Remove the last shift in log_test_result() to avoid this warning.  Fixes: a923af1ceee7 (""selftests: forwarding: Convert log_test() to recognize RET values"") Signed-off-by: Hangbin Liu <liuhangbin@gmail.com> Link: https://patch.msgid.link/20250709091244.88395-1-liuhangbin@gmail.com Signed-off-by: Jakub Kicinski <kuba@kernel.org>",1,1,2
torvalds/linux,ce913b2292e9bdf2661af6e584ddfb4ed5978893,Jakub Kicinski,2025-07-11T01:10:48Z,"Merge branch 'gre-fix-default-ipv6-multicast-route-creation'  Guillaume Nault says:  ==================== gre: Fix default IPv6 multicast route creation.  When fixing IPv6 link-local address generation on GRE devices with commit 3e6a0243ff00 (""gre: Fix again IPv6 link-local address generation.""), I accidentally broke the default IPv6 multicast route creation on these GRE devices.  Fix that in patch 1, making the GRE specific code yet a bit closer to the generic code used by most other network interface types.  Then extend the selftest in patch 2 to cover this case. ====================  Link: https://patch.msgid.link/cover.1752070620.git.gnault@redhat.com Signed-off-by: Jakub Kicinski <kuba@kernel.org>",19,17,36
torvalds/linux,4d61a8a7334399f457867442445a4f916b40cddb,Guillaume Nault,2025-07-09T14:30:17Z,"selftests: Add IPv6 multicast route generation tests for GRE devices.  The previous patch fixes a bug that prevented the creation of the default IPv6 multicast route (ff00::/8) for some GRE devices. Now let's extend the GRE IPv6 selftests to cover this case.  Also, rename check_ipv6_ll_addr() to check_ipv6_device_config() and adapt comments and script output to take into account the fact that we're not limited to link-local address generation.  Signed-off-by: Guillaume Nault <gnault@redhat.com> Reviewed-by: Ido Schimmel <idosch@nvidia.com> Link: https://patch.msgid.link/65a89583bde3bf866a1922c2e5158e4d72c520e2.1752070620.git.gnault@redhat.com Signed-off-by: Jakub Kicinski <kuba@kernel.org>",17,10,27
torvalds/linux,4e914ef063de40397e25a025c70d9737a9e45a8c,Guillaume Nault,2025-07-09T14:30:10Z,"gre: Fix IPv6 multicast route creation.  Use addrconf_add_dev() instead of ipv6_find_idev() in addrconf_gre_config() so that we don't just get the inet6_dev, but also install the default ff00::/8 multicast route.  Before commit 3e6a0243ff00 (""gre: Fix again IPv6 link-local address generation.""), the multicast route was created at the end of the function by addrconf_add_mroute(). But this code path is now only taken in one particular case (gre devices not bound to a local IP address and in EUI64 mode). For all other cases, the function exits early and addrconf_add_mroute() is not called anymore.  Using addrconf_add_dev() instead of ipv6_find_idev() in addrconf_gre_config(), fixes the problem as it will create the default multicast route for all gre devices. This also brings addrconf_gre_config() a bit closer to the normal netdevice IPv6 configuration code (addrconf_dev_config()).  Cc: stable@vger.kernel.org Fixes: 3e6a0243ff00 (""gre: Fix again IPv6 link-local address generation."") Reported-by: Aiden Yang <ling@moedove.com> Closes: https://lore.kernel.org/netdev/CANR=AhRM7YHHXVxJ4DmrTNMeuEOY87K2mLmo9KMed1JMr20p6g@mail.gmail.com/ Reviewed-by: Gary Guo <gary@garyguo.net> Tested-by: Gary Guo <gary@garyguo.net> Signed-off-by: Guillaume Nault <gnault@redhat.com> Reviewed-by: Ido Schimmel <idosch@nvidia.com> Link: https://patch.msgid.link/027a923dcb550ad115e6d93ee8bb7d310378bd01.1752070620.git.gnault@redhat.com Signed-off-by: Jakub Kicinski <kuba@kernel.org>",2,7,9
torvalds/linux,2dfa4e31768bd73bc02a69f8f2cd11dd95f062bf,Jakub Kicinski,2025-07-11T01:08:18Z,"Merge branch 'net-phy-microchip-lan88xx-reliability-fixes'  Oleksij Rempel says:  ==================== net: phy: microchip: LAN88xx reliability fixes  This patch series improves the reliability of the Microchip LAN88xx PHYs, particularly in edge cases involving fixed link configurations or forced speed modes.  Patch 1 assigns genphy_soft_reset() to the .soft_reset hook to ensure that stale link partner advertisement (LPA) bits are properly cleared during reconfiguration. Without this, outdated autonegotiation bits may remain visible in some parallel detection cases.  Patch 2 restricts the 100 Mbps workaround (originally intended to handle cable length switching) to only run when the link transitions to the PHY_NOLINK state. This prevents repeated toggling that can confuse autonegotiating link partners such as the Intel i350, leading to unstable link cycles.  Both patches were tested on a LAN7850 (with integrated LAN88xx PHY) against an Intel I350 NIC. The full test suite - autonegotiation, fixed link, and parallel detection - passed successfully. ====================  Link: https://patch.msgid.link/20250709130753.3994461-1-o.rempel@pengutronix.de Signed-off-by: Jakub Kicinski <kuba@kernel.org>",2,1,3
torvalds/linux,dd4360c0e8504f2f7639c7f5d07c93cfd6a98333,Oleksij Rempel,2025-07-09T13:07:53Z,"net: phy: microchip: limit 100M workaround to link-down events on LAN88xx  Restrict the 100Mbit forced-mode workaround to link-down transitions only, to prevent repeated link reset cycles in certain configurations.  The workaround was originally introduced to improve signal reliability when switching cables between long and short distances. It temporarily forces the PHY into 10 Mbps before returning to 100 Mbps.  However, when used with autonegotiating link partners (e.g., Intel i350), executing this workaround on every link change can confuse the partner and cause constant renegotiation loops. This results in repeated link down/up transitions and the PHY never reaching a stable state.  Limit the workaround to only run during the PHY_NOLINK state. This ensures it is triggered only once per link drop, avoiding disruptive toggling while still preserving its intended effect.  Note: I am not able to reproduce the original issue that this workaround addresses. I can only confirm that 100 Mbit mode works correctly in my test setup. Based on code inspection, I assume the workaround aims to reset some internal state machine or signal block by toggling speeds. However, a PHY reset is already performed earlier in the function via phy_init_hw(), which may achieve a similar effect. Without a reproducer, I conservatively keep the workaround but restrict its conditions.  Fixes: e57cf3639c32 (""net: lan78xx: fix accessing the LAN7800's internal phy specific registers from the MAC driver"") Signed-off-by: Oleksij Rempel <o.rempel@pengutronix.de> Reviewed-by: Andrew Lunn <andrew@lunn.ch> Link: https://patch.msgid.link/20250709130753.3994461-3-o.rempel@pengutronix.de Signed-off-by: Jakub Kicinski <kuba@kernel.org>",1,1,2
torvalds/linux,b4517c363e0e005c7f81ae3be199eec68e87f122,Oleksij Rempel,2025-07-09T13:07:52Z,"net: phy: microchip: Use genphy_soft_reset() to purge stale LPA bits  Enable .soft_reset for the LAN88xx PHY driver by assigning genphy_soft_reset() to ensure that the phylib core performs a proper soft reset during reconfiguration.  Previously, the driver left .soft_reset unimplemented, so calls to phy_init_hw() (e.g., from lan88xx_link_change_notify()) did not fully reset the PHY. As a result, stale contents in the Link Partner Ability (LPA) register could persist, causing the PHY to incorrectly report that the link partner advertised autonegotiation even when it did not.  Using genphy_soft_reset() guarantees a clean reset of the PHY and corrects the false autoneg reporting in these scenarios.  Fixes: ccb989e4d1ef (""net: phy: microchip: Reset LAN88xx PHY to ensure clean link state on LAN7800/7850"") Signed-off-by: Oleksij Rempel <o.rempel@pengutronix.de> Reviewed-by: Andrew Lunn <andrew@lunn.ch> Link: https://patch.msgid.link/20250709130753.3994461-2-o.rempel@pengutronix.de Signed-off-by: Jakub Kicinski <kuba@kernel.org>",1,0,1
torvalds/linux,01b8114b432d7baaa5e51ab229c12c4f36b8e2c6,Mingming Cao,2025-07-09T15:33:32Z,"ibmvnic: Fix hardcoded NUM_RX_STATS/NUM_TX_STATS with dynamic sizeof  The previous hardcoded definitions of NUM_RX_STATS and NUM_TX_STATS were not updated when new fields were added to the ibmvnic_{rx,tx}_queue_stats structures. Specifically, commit 2ee73c54a615 (""ibmvnic: Add stat for tx direct vs tx batched"") added a fourth TX stat, but NUM_TX_STATS remained 3, leading to a mismatch.  This patch replaces the static defines with dynamic sizeof-based calculations to ensure the stat arrays are correctly sized. This fixes incorrect indexing and prevents incomplete stat reporting in tools like ethtool.  Fixes: 2ee73c54a615 (""ibmvnic: Add stat for tx direct vs tx batched"") Signed-off-by: Mingming Cao <mmc@linux.ibm.com> Reviewed-by: Dave Marquardt <davemarq@linux.ibm.com> Reviewed-by: Haren Myneni <haren@linux.ibm.com> Reviewed-by: Simon Horman <horms@kernel.org> Link: https://patch.msgid.link/20250709153332.73892-1-mmc@linux.ibm.com Signed-off-by: Jakub Kicinski <kuba@kernel.org>",6,2,8
torvalds/linux,711c80f7d8b163d3ecd463cd96f07230f488e750,Kito Xu,2025-07-09T03:52:51Z,"net: appletalk: Fix device refcount leak in atrtr_create()  When updating an existing route entry in atrtr_create(), the old device reference was not being released before assigning the new device, leading to a device refcount leak. Fix this by calling dev_put() to release the old device reference before holding the new one.  Fixes: c7f905f0f6d4 (""[ATALK]: Add missing dev_hold() to atrtr_create()."") Signed-off-by: Kito Xu <veritas501@foxmail.com> Link: https://patch.msgid.link/tencent_E1A26771CDAB389A0396D1681A90A49E5D09@qq.com Signed-off-by: Jakub Kicinski <kuba@kernel.org>",1,0,1
torvalds/linux,7ac5cc2616257cf80d32a8814e44474f07efed62,Jakub Kicinski,2025-07-11T00:13:46Z,Merge tag 'wireless-2025-07-10' of https://git.kernel.org/pub/scm/linux/kernel/git/wireless/wireless  Johannes Berg says:  ==================== Quite a number of fixes still:   - mt76 (hadn't sent any fixes so far)    - RCU    - scanning    - decapsulation offload    - interface combinations  - rt2x00: build fix (bad function pointer prototype)  - cfg80211: prevent A-MSDU flipping attacks in mesh  - zd1211rw: prevent race ending with NULL ptr deref  - cfg80211/mac80211: more S1G fixes  - mwifiex: avoid WARN on certain RX frames  - mac80211:    - avoid stack data leak in WARN cases    - fix non-transmitted BSSID search      (on certain multi-BSSID APs)    - always initialize key list so driver      iteration won't crash    - fix monitor interface in device restart    - fix __free() annotation usage  * tag 'wireless-2025-07-10' of https://git.kernel.org/pub/scm/linux/kernel/git/wireless/wireless: (26 commits)   wifi: mac80211: add the virtual monitor after reconfig complete   wifi: mac80211: always initialize sdata::key_list   wifi: mac80211: Fix uninitialized variable with __free() in ieee80211_ml_epcs()   wifi: mt76: mt792x: Limit the concurrent STA and SoftAP to operate on the same channel   wifi: mt76: mt7925: Fix null-ptr-deref in mt7925_thermal_init()   wifi: mt76: fix queue assignment for deauth packets   wifi: mt76: add a wrapper for wcid access with validation   wifi: mt76: mt7921: prevent decap offload config before STA initialization   wifi: mt76: mt7925: prevent NULL pointer dereference in mt7925_sta_set_decap_offload()   wifi: mt76: mt7925: fix incorrect scan probe IE handling for hw_scan   wifi: mt76: mt7925: fix invalid array index in ssid assignment during hw scan   wifi: mt76: mt7925: fix the wrong config for tx interrupt   wifi: mt76: Remove RCU section in mt7996_mac_sta_rc_work()   wifi: mt76: Move RCU section in mt7996_mcu_add_rate_ctrl()   wifi: mt76: Move RCU section in mt7996_mcu_add_rate_ctrl_fixed()   wifi: mt76: Move RCU section in mt7996_mcu_set_fixed_field()   wifi: mt76: Assume __mt76_connac_mcu_alloc_sta_req runs in atomic context   wifi: prevent A-MSDU attacks in mesh networks   wifi: rt2x00: fix remove callback type mismatch   wifi: mac80211: reject VHT opmode for unsupported channel widths   ... ====================  Link: https://patch.msgid.link/20250710122212.24272-3-johannes@sipsolutions.net Signed-off-by: Jakub Kicinski <kuba@kernel.org>,430,233,663
torvalds/linux,18cdb3d982da8976b28d57691eb256ec5688fad2,Eric Dumazet,2025-07-07T12:45:17Z,"netfilter: flowtable: account for Ethernet header in nf_flow_pppoe_proto()  syzbot found a potential access to uninit-value in nf_flow_pppoe_proto()  Blamed commit forgot the Ethernet header.  BUG: KMSAN: uninit-value in nf_flow_offload_inet_hook+0x7e4/0x940 net/netfilter/nf_flow_table_inet.c:27   nf_flow_offload_inet_hook+0x7e4/0x940 net/netfilter/nf_flow_table_inet.c:27   nf_hook_entry_hookfn include/linux/netfilter.h:157 [inline]   nf_hook_slow+0xe1/0x3d0 net/netfilter/core.c:623   nf_hook_ingress include/linux/netfilter_netdev.h:34 [inline]   nf_ingress net/core/dev.c:5742 [inline]   __netif_receive_skb_core+0x4aff/0x70c0 net/core/dev.c:5837   __netif_receive_skb_one_core net/core/dev.c:5975 [inline]   __netif_receive_skb+0xcc/0xac0 net/core/dev.c:6090   netif_receive_skb_internal net/core/dev.c:6176 [inline]   netif_receive_skb+0x57/0x630 net/core/dev.c:6235   tun_rx_batched+0x1df/0x980 drivers/net/tun.c:1485   tun_get_user+0x4ee0/0x6b40 drivers/net/tun.c:1938   tun_chr_write_iter+0x3e9/0x5c0 drivers/net/tun.c:1984   new_sync_write fs/read_write.c:593 [inline]   vfs_write+0xb4b/0x1580 fs/read_write.c:686   ksys_write fs/read_write.c:738 [inline]   __do_sys_write fs/read_write.c:749 [inline]  Reported-by: syzbot+bf6ed459397e307c3ad2@syzkaller.appspotmail.com Closes: https://lore.kernel.org/netdev/686bc073.a00a0220.c7b3.0086.GAE@google.com/T/#u Fixes: 87b3593bed18 (""netfilter: flowtable: validate pppoe header"") Signed-off-by: Eric Dumazet <edumazet@google.com> Reviewed-by: Pablo Neira Ayuso <pablo@netfilter.org> Link: https://patch.msgid.link/20250707124517.614489-1-edumazet@google.com Signed-off-by: Jakub Kicinski <kuba@kernel.org>",1,1,2
torvalds/linux,bc9ff192a6c940d9a26e21a0a82f2667067aaf5f,Linus Torvalds,2025-07-10T16:18:53Z,"Merge tag 'net-6.16-rc6' of git://git.kernel.org/pub/scm/linux/kernel/git/netdev/net  Pull networking fixes from Paolo Abeni:  ""Including fixes from Bluetooth.    Current release - regressions:     - tcp: refine sk_rcvbuf increase for ooo packets     - bluetooth: fix attempting to send HCI_Disconnect to BIS handle     - rxrpc: fix over large frame size warning     - eth: bcmgenet: initialize u64 stats seq counter    Previous releases - regressions:     - tcp: correct signedness in skb remaining space calculation     - sched: abort __tc_modify_qdisc if parent class does not exist     - vsock: fix transport_{g2h,h2g} TOCTOU     - rxrpc: fix bug due to prealloc collision     - tipc: fix use-after-free in tipc_conn_close().     - bluetooth: fix not marking Broadcast Sink BIS as connected     - phy: qca808x: fix WoL issue by utilizing at8031_set_wol()     - eth: am65-cpsw-nuss: fix skb size by accounting for skb_shared_info    Previous releases - always broken:     - netlink: fix wraparounds of sk->sk_rmem_alloc.     - atm: fix infinite recursive call of clip_push().     - eth:       - stmmac: fix interrupt handling for level-triggered mode in DWC_XGMAC2       - rtsn: fix a null pointer dereference in rtsn_probe()""  * tag 'net-6.16-rc6' of git://git.kernel.org/pub/scm/linux/kernel/git/netdev/net: (37 commits)   net/sched: sch_qfq: Fix null-deref in agg_dequeue   rxrpc: Fix oops due to non-existence of prealloc backlog struct   rxrpc: Fix bug due to prealloc collision   MAINTAINERS: remove myself as netronome maintainer   selftests/net: packetdrill: add tcp_ooo-before-and-after-accept.pkt   tcp: refine sk_rcvbuf increase for ooo packets   net/sched: Abort __tc_modify_qdisc if parent class does not exist   net: ethernet: ti: am65-cpsw-nuss: Fix skb size by accounting for skb_shared_info   net: thunderx: avoid direct MTU assignment after WRITE_ONCE()   selftests/tc-testing: Create test case for UAF scenario with DRR/NETEM/BLACKHOLE chain   atm: clip: Fix NULL pointer dereference in vcc_sendmsg()   atm: clip: Fix infinite recursive call of clip_push().   atm: clip: Fix memory leak of struct clip_vcc.   atm: clip: Fix potential null-ptr-deref in to_atmarpd().   net: phy: smsc: Fix link failure in forced mode with Auto-MDIX   net: phy: smsc: Force predictable MDI-X state on LAN87xx   net: phy: smsc: Fix Auto-MDIX configuration when disabled by strap   net: stmmac: Fix interrupt handling for level-triggered mode in DWC_XGMAC2   rxrpc: Fix over large frame size warning   net: airoha: Fix an error handling path in airoha_probe()   ...",421,175,596
torvalds/linux,73d7cf07109e79b093d1a1fb57a88d4048cd9b4b,Linus Torvalds,2025-07-10T16:06:53Z,"Merge tag 'for-linus' of git://git.kernel.org/pub/scm/virt/kvm/kvm  Pull KVM fixes from Paolo Bonzini:  ""Many patches, pretty much all of them small, that accumulated while I   was on vacation.    ARM:     - Remove the last leftovers of the ill-fated FPSIMD host state      mapping at EL2 stage-1     - Fix unexpected advertisement to the guest of unimplemented S2 base      granule sizes     - Gracefully fail initialising pKVM if the interrupt controller isn't      GICv3     - Also gracefully fail initialising pKVM if the carveout allocation      fails     - Fix the computing of the minimum MMIO range required for the host      on stage-2 fault     - Fix the generation of the GICv3 Maintenance Interrupt in nested      mode    x86:     - Reject SEV{-ES} intra-host migration if one or more vCPUs are      actively being created, so as not to create a non-SEV{-ES} vCPU in      an SEV{-ES} VM     - Use a pre-allocated, per-vCPU buffer for handling de-sparsification      of vCPU masks in Hyper-V hypercalls; fixes a ""stack frame too      large"" issue     - Allow out-of-range/invalid Xen event channel ports when configuring      IRQ routing, to avoid dictating a specific ioctl() ordering to      userspace     - Conditionally reschedule when setting memory attributes to avoid      soft lockups when userspace converts huge swaths of memory to/from      private     - Add back MWAIT as a required feature for the MONITOR/MWAIT selftest     - Add a missing field in struct sev_data_snp_launch_start that      resulted in the guest-visible workarounds field being filled at the      wrong offset     - Skip non-canonical address when processing Hyper-V PV TLB flushes      to avoid VM-Fail on INVVPID     - Advertise supported TDX TDVMCALLs to userspace     - Pass SetupEventNotifyInterrupt arguments to userspace     - Fix TSC frequency underflow""  * tag 'for-linus' of git://git.kernel.org/pub/scm/virt/kvm/kvm:   KVM: x86: avoid underflow when scaling TSC frequency   KVM: arm64: Remove kvm_arch_vcpu_run_map_fp()   KVM: arm64: Fix handling of FEAT_GTG for unimplemented granule sizes   KVM: arm64: Don't free hyp pages with pKVM on GICv2   KVM: arm64: Fix error path in init_hyp_mode()   KVM: arm64: Adjust range correctly during host stage-2 faults   KVM: arm64: nv: Fix MI line level calculation in vgic_v3_nested_update_mi()   KVM: x86/hyper-v: Skip non-canonical addresses during PV TLB flush   KVM: SVM: Add missing member in SNP_LAUNCH_START command structure   Documentation: KVM: Fix unexpected unindent warnings   KVM: selftests: Add back the missing check of MONITOR/MWAIT availability   KVM: Allow CPU to reschedule while setting per-page memory attributes   KVM: x86/xen: Allow 'out of range' event channel ports in IRQ routing table.   KVM: x86/hyper-v: Use preallocated per-vCPU buffer for de-sparsified vCPU masks   KVM: SVM: Initialize vmsa_pa in VMCB to INVALID_PAGE if VMSA page is NULL   KVM: SVM: Reject SEV{-ES} intra host migration if vCPU creation is in-flight   KVM: TDX: Report supported optional TDVMCALLs in TDX capabilities   KVM: TDX: Exit to userspace for SetupEventNotifyInterrupt",166,71,237
torvalds/linux,e778689390c71462a099b5d6e56d71c316486184,Hans de Goede,2025-07-07T21:14:12Z,"drm/i915/bios: Apply vlv_fixup_mipi_sequences() to v2 mipi-sequences too  It turns out that the fixup from vlv_fixup_mipi_sequences() is necessary for some DSI panel's with version 2 mipi-sequences too.  Specifically the Acer Iconia One 8 A1-840 (not to be confused with the A1-840FHD which is different) has the following sequences:  BDB block 53 (1284 bytes) - MIPI sequence block: 	Sequence block version v2 	Panel 0 *  Sequence 2 - MIPI_SEQ_INIT_OTP 	GPIO index 9, source 0, set 0 (0x00) 	Delay: 50000 us 	GPIO index 9, source 0, set 1 (0x01) 	Delay: 6000 us 	GPIO index 9, source 0, set 0 (0x00) 	Delay: 6000 us 	GPIO index 9, source 0, set 1 (0x01) 	Delay: 25000 us 	Send DCS: Port A, VC 0, LP, Type 39, Length 5, Data ff aa 55 a5 80 	Send DCS: Port A, VC 0, LP, Type 39, Length 3, Data 6f 11 00 	... 	Send DCS: Port A, VC 0, LP, Type 05, Length 1, Data 29 	Delay: 120000 us  Sequence 4 - MIPI_SEQ_DISPLAY_OFF 	Send DCS: Port A, VC 0, LP, Type 05, Length 1, Data 28 	Delay: 105000 us 	Send DCS: Port A, VC 0, LP, Type 05, Length 2, Data 10 00 	Delay: 10000 us  Sequence 5 - MIPI_SEQ_ASSERT_RESET 	Delay: 10000 us 	GPIO index 9, source 0, set 0 (0x00)  Notice how there is no MIPI_SEQ_DEASSERT_RESET, instead the deassert is done at the beginning of MIPI_SEQ_INIT_OTP, which is exactly what the fixup from vlv_fixup_mipi_sequences() fixes up.  Extend it to also apply to v2 sequences, this fixes the panel not working on the Acer Iconia One 8 A1-840.  Closes: https://gitlab.freedesktop.org/drm/i915/kernel/-/issues/14605 Signed-off-by: Hans de Goede <hansg@kernel.org> Acked-by: Jani Nikula <jani.nikula@intel.com> Link: https://lore.kernel.org/r/20250703143824.7121-1-hansg@kernel.org Signed-off-by: Rodrigo Vivi <rodrigo.vivi@intel.com> (cherry picked from commit 11895f375939d60efe7ed5dddc1cffe2e79f976c) Signed-off-by: Rodrigo Vivi <rodrigo.vivi@intel.com>",4,4,8
torvalds/linux,c07981af55d3ba3ec3be880cfe4a0cc10f1f7138,Miri Korenblit,2025-07-09T20:34:56Z,"wifi: mac80211: add the virtual monitor after reconfig complete  In reconfig we add the virtual monitor in 2 cases: 1. If we are resuming (it was deleted on suspend) 2. If it was added after an error but before the reconfig    (due to the last non-monitor interface removal).  In the second case, the removal of the non-monitor interface will succeed but the addition of the virtual monitor will fail, so we add it in the reconfig.  The problem is that we mislead the driver to think that this is an existing interface that is getting re-added - while it is actually a completely new interface from the drivers' point of view.  Some drivers act differently when a interface is re-added. For example, it might not initialize things because they were already initialized. Such drivers will - in this case - be left with a partialy initialized vif.  To fix it, add the virtual monitor after reconfig_complete, so the driver will know that this is a completely new interface.  Fixes: 3c3e21e7443b (""mac80211: destroy virtual monitor interface across suspend"") Reviewed-by: Johannes Berg <johannes.berg@intel.com> Signed-off-by: Miri Korenblit <miriam.rachel.korenblit@intel.com> Link: https://patch.msgid.link/20250709233451.648d39b041e8.I2e37b68375278987e303d6c00cc5f3d8334d2f96@changeid Signed-off-by: Johannes Berg <johannes.berg@intel.com>",4,5,9
torvalds/linux,d7a54d02db41f72f0581a3c77c75b0993ed3f6e2,Miri Korenblit,2025-07-09T20:34:10Z,"wifi: mac80211: always initialize sdata::key_list  This is currently not initialized for a virtual monitor, leading to a NULL pointer dereference when - for example - iterating over all the keys of all the vifs.  Reviewed-by: Johannes Berg <johannes.berg@intel.com> Signed-off-by: Miri Korenblit <miriam.rachel.korenblit@intel.com> Link: https://patch.msgid.link/20250709233400.8dcefe578497.I4c90a00ae3256520e063199d7f6f2580d5451acf@changeid Signed-off-by: Johannes Berg <johannes.berg@intel.com>",2,2,4
torvalds/linux,dd831ac8221e691e9e918585b1003c7071df0379,Xiang Mei,2025-07-05T21:21:43Z,"net/sched: sch_qfq: Fix null-deref in agg_dequeue  To prevent a potential crash in agg_dequeue (net/sched/sch_qfq.c) when cl->qdisc->ops->peek(cl->qdisc) returns NULL, we check the return value before using it, similar to the existing approach in sch_hfsc.c.  To avoid code duplication, the following changes are made:  1. Changed qdisc_warn_nonwc(include/net/pkt_sched.h) into a static inline function.  2. Moved qdisc_peek_len from net/sched/sch_hfsc.c to include/net/pkt_sched.h so that sch_qfq can reuse it.  3. Applied qdisc_peek_len in agg_dequeue to avoid crashing.  Signed-off-by: Xiang Mei <xmei5@asu.edu> Reviewed-by: Cong Wang <xiyou.wangcong@gmail.com> Link: https://patch.msgid.link/20250705212143.3982664-1-xmei5@asu.edu Signed-off-by: Paolo Abeni <pabeni@redhat.com>",25,28,53
torvalds/linux,0fda5ccf5425c7b92eaca868a3fba8a3c9f8b746,Jakub Kicinski,2025-07-10T02:41:45Z,Merge branch 'rxrpc-miscellaneous-fixes'  David Howells says:  ==================== rxrpc: Miscellaneous fixes  Here are some miscellaneous fixes for rxrpc:   (1) Fix assertion failure due to preallocation collision.   (2) Fix oops due to prealloc backlog struct not yet having been allocated      if no service calls have yet been preallocated. ====================  Link: https://patch.msgid.link/20250708211506.2699012-1-dhowells@redhat.com Signed-off-by: Jakub Kicinski <kuba@kernel.org>,4,0,4
torvalds/linux,880a88f318cf1d2a0f4c0a7ff7b07e2062b434a4,David Howells,2025-07-08T21:15:04Z,"rxrpc: Fix oops due to non-existence of prealloc backlog struct  If an AF_RXRPC service socket is opened and bound, but calls are preallocated, then rxrpc_alloc_incoming_call() will oops because the rxrpc_backlog struct doesn't get allocated until the first preallocation is made.  Fix this by returning NULL from rxrpc_alloc_incoming_call() if there is no backlog struct.  This will cause the incoming call to be aborted.  Reported-by: Junvyyang, Tencent Zhuque Lab <zhuque@tencent.com> Suggested-by: Junvyyang, Tencent Zhuque Lab <zhuque@tencent.com> Signed-off-by: David Howells <dhowells@redhat.com> cc: LePremierHomme <kwqcheii@proton.me> cc: Marc Dionne <marc.dionne@auristor.com> cc: Willy Tarreau <w@1wt.eu> cc: Simon Horman <horms@kernel.org> cc: linux-afs@lists.infradead.org Link: https://patch.msgid.link/20250708211506.2699012-3-dhowells@redhat.com Signed-off-by: Jakub Kicinski <kuba@kernel.org>",3,0,3
torvalds/linux,69e4186773c6445b258fb45b6e1df18df831ec45,David Howells,2025-07-08T21:15:03Z,"rxrpc: Fix bug due to prealloc collision  When userspace is using AF_RXRPC to provide a server, it has to preallocate incoming calls and assign to them call IDs that will be used to thread related recvmsg() and sendmsg() together.  The preallocated call IDs will automatically be attached to calls as they come in until the pool is empty.  To the kernel, the call IDs are just arbitrary numbers, but userspace can use the call ID to hold a pointer to prepared structs.  In any case, the user isn't permitted to create two calls with the same call ID (call IDs become available again when the call ends) and EBADSLT should result from sendmsg() if an attempt is made to preallocate a call with an in-use call ID.  However, the cleanup in the error handling will trigger both assertions in rxrpc_cleanup_call() because the call isn't marked complete and isn't marked as having been released.  Fix this by setting the call state in rxrpc_service_prealloc_one() and then marking it as being released before calling the cleanup function.  Fixes: 00e907127e6f (""rxrpc: Preallocate peers, conns and calls for incoming service requests"") Reported-by: Junvyyang, Tencent Zhuque Lab <zhuque@tencent.com> Signed-off-by: David Howells <dhowells@redhat.com> cc: LePremierHomme <kwqcheii@proton.me> cc: Marc Dionne <marc.dionne@auristor.com> cc: Simon Horman <horms@kernel.org> cc: linux-afs@lists.infradead.org Link: https://patch.msgid.link/20250708211506.2699012-2-dhowells@redhat.com Signed-off-by: Jakub Kicinski <kuba@kernel.org>",1,0,1
torvalds/linux,ee48b0abeca9afcd5a8bcb92345002d2667893ba,Louis Peens,2025-07-08T08:20:51Z,"MAINTAINERS: remove myself as netronome maintainer  I am moving on from Corigine to different things, for the moment slightly removed from kernel development. Right now there is nobody I can in good conscience recommend to take over the maintainer role, but there are still people available for review, so put the driver state to 'Odd Fixes'.  Additionally add Simon Horman as reviewer - thanks Simon.  Signed-off-by: Louis Peens <louis.peens@corigine.com> Reviewed-by: Simon Horman <horms@kernel.org> Signed-off-by: Jakub Kicinski <kuba@kernel.org>",2,2,4
torvalds/linux,95253dc7002408aec7cbb7281478f03797ca2519,Jakub Kicinski,2025-07-10T02:24:12Z,Merge branch 'tcp-better-memory-control-for-not-yet-accepted-sockets'  Eric Dumazet says:  ==================== tcp: better memory control for not-yet-accepted sockets  Address a possible OOM condition caused by a recent change.  Add a new packetdrill test checking the expected behavior. ====================  Link: https://patch.msgid.link/20250707213900.1543248-1-edumazet@google.com Signed-off-by: Jakub Kicinski <kuba@kernel.org>,56,1,57
torvalds/linux,b939c074efc160648de884a41aeb5e857f2c5c68,Eric Dumazet,2025-07-07T21:39:00Z,selftests/net: packetdrill: add tcp_ooo-before-and-after-accept.pkt  Test how new passive flows react to ooo incoming packets.  Their sk_rcvbuf can increase only after accept().  Signed-off-by: Eric Dumazet <edumazet@google.com> Link: https://patch.msgid.link/20250707213900.1543248-3-edumazet@google.com Signed-off-by: Jakub Kicinski <kuba@kernel.org>,53,0,53
torvalds/linux,1a03edeb84e6e3b9c6ca5a642557bced93d54434,Eric Dumazet,2025-07-07T21:38:59Z,"tcp: refine sk_rcvbuf increase for ooo packets  When a passive flow has not been accepted yet, it is not wise to increase sk_rcvbuf when receiving ooo packets.  A very busy server might tune down tcp_rmem[1] to better control how much memory can be used by sockets waiting in its listeners accept queues.  Fixes: 63ad7dfedfae (""tcp: adjust rcvbuf in presence of reorders"") Signed-off-by: Eric Dumazet <edumazet@google.com> Link: https://patch.msgid.link/20250707213900.1543248-2-edumazet@google.com Signed-off-by: Jakub Kicinski <kuba@kernel.org>",3,1,4
torvalds/linux,ffdde7bf5a439aaa1955ebd581f5c64ab1533963,Victor Nogueira,2025-07-07T21:08:01Z,"net/sched: Abort __tc_modify_qdisc if parent class does not exist  Lion's patch [1] revealed an ancient bug in the qdisc API. Whenever a user creates/modifies a qdisc specifying as a parent another qdisc, the qdisc API will, during grafting, detect that the user is not trying to attach to a class and reject. However grafting is performed after qdisc_create (and thus the qdiscs' init callback) is executed. In qdiscs that eventually call qdisc_tree_reduce_backlog during init or change (such as fq, hhf, choke, etc), an issue arises. For example, executing the following commands:  sudo tc qdisc add dev lo root handle a: htb default 2 sudo tc qdisc add dev lo parent a: handle beef fq  Qdiscs such as fq, hhf, choke, etc unconditionally invoke qdisc_tree_reduce_backlog() in their control path init() or change() which then causes a failure to find the child class; however, that does not stop the unconditional invocation of the assumed child qdisc's qlen_notify with a null class. All these qdiscs make the assumption that class is non-null.  The solution is ensure that qdisc_leaf() which looks up the parent class, and is invoked prior to qdisc_create(), should return failure on not finding the class. In this patch, we leverage qdisc_leaf to return ERR_PTRs whenever the parentid doesn't correspond to a class, so that we can detect it earlier on and abort before qdisc_create is called.  [1] https://lore.kernel.org/netdev/d912cbd7-193b-4269-9857-525bee8bbb6a@gmail.com/  Fixes: 5e50da01d0ce (""[NET_SCHED]: Fix endless loops (part 2): ""simple"" qdiscs"") Reported-by: syzbot+d8b58d7b0ad89a678a16@syzkaller.appspotmail.com Closes: https://lore.kernel.org/netdev/68663c93.a70a0220.5d25f.0857.GAE@google.com/ Reported-by: syzbot+5eccb463fa89309d8bdc@syzkaller.appspotmail.com Closes: https://lore.kernel.org/netdev/68663c94.a70a0220.5d25f.0858.GAE@google.com/ Reported-by: syzbot+1261670bbdefc5485a06@syzkaller.appspotmail.com Closes: https://lore.kernel.org/netdev/686764a5.a00a0220.c7b3.0013.GAE@google.com/ Reported-by: syzbot+15b96fc3aac35468fe77@syzkaller.appspotmail.com Closes: https://lore.kernel.org/netdev/686764a5.a00a0220.c7b3.0014.GAE@google.com/ Reported-by: syzbot+4dadc5aecf80324d5a51@syzkaller.appspotmail.com Closes: https://lore.kernel.org/netdev/68679e81.a70a0220.29cf51.0016.GAE@google.com/ Acked-by: Jamal Hadi Salim <jhs@mojatatu.com> Reviewed-by: Cong Wang <xiyou.wangcong@gmail.com> Signed-off-by: Victor Nogueira <victor@mojatatu.com> Link: https://patch.msgid.link/20250707210801.372995-1-victor@mojatatu.com Signed-off-by: Jakub Kicinski <kuba@kernel.org>",16,7,23
torvalds/linux,02c4d6c26f1f662da8885b299c224ca6628ad232,Chintan Vankar,2025-07-07T08:52:01Z,"net: ethernet: ti: am65-cpsw-nuss: Fix skb size by accounting for skb_shared_info  While transitioning from netdev_alloc_ip_align() to build_skb(), memory for the ""skb_shared_info"" member of an ""skb"" was not allocated. Fix this by allocating ""PAGE_SIZE"" as the skb length, accounting for the packet length, headroom and tailroom, thereby including the required memory space for skb_shared_info.  Fixes: 8acacc40f733 (""net: ethernet: ti: am65-cpsw: Add minimal XDP support"") Reviewed-by: Siddharth Vadapalli <s-vadapalli@ti.com> Signed-off-by: Chintan Vankar <c-vankar@ti.com> Link: https://patch.msgid.link/20250707085201.1898818-1-c-vankar@ti.com Signed-off-by: Jakub Kicinski <kuba@kernel.org>",1,3,4
torvalds/linux,849704b8b2115647e12436e5076b8e7a4944f21a,Alok Tiwari,2025-07-06T19:43:21Z,"net: thunderx: avoid direct MTU assignment after WRITE_ONCE()  The current logic in nicvf_change_mtu() writes the new MTU to netdev->mtu using WRITE_ONCE() before verifying if the hardware update succeeds. However on hardware update failure, it attempts to revert to the original MTU using a direct assignment (netdev->mtu = orig_mtu) which violates the intended of WRITE_ONCE protection introduced in commit 1eb2cded45b3 (""net: annotate writes on dev->mtu from ndo_change_mtu()"")  Additionally, WRITE_ONCE(netdev->mtu, new_mtu) is unnecessarily performed even when the device is not running.  Fix this by:   Only writing netdev->mtu after successfully updating the hardware.   Skipping hardware update when the device is down, and setting MTU   directly. Remove unused variable orig_mtu.  This ensures that all writes to netdev->mtu are consistent with WRITE_ONCE expectations and avoids unintended state corruption on failure paths.  Signed-off-by: Alok Tiwari <alok.a.tiwari@oracle.com> Reviewed-by: Jacob Keller <jacob.e.keller@intel.com> Link: https://patch.msgid.link/20250706194327.1369390-1-alok.a.tiwari@oracle.com Signed-off-by: Jakub Kicinski <kuba@kernel.org>",3,9,12
torvalds/linux,d55683866c79a3af1e334126f32841d05e7e4143,Victor Nogueira,2025-07-05T20:36:38Z,selftests/tc-testing: Create test case for UAF scenario with DRR/NETEM/BLACKHOLE chain  Create a tdc test for the UAF scenario with DRR/NETEM/BLACKHOLE chain shared by Lion on his report [1].  [1] https://lore.kernel.org/netdev/45876f14-cf28-4177-8ead-bb769fd9e57a@gmail.com/  Signed-off-by: Victor Nogueira <victor@mojatatu.com> Acked-by: Cong Wang <xiyou.wangcong@gmail.com> Link: https://patch.msgid.link/20250705203638.246350-1-victor@mojatatu.com Signed-off-by: Jakub Kicinski <kuba@kernel.org>,37,0,37
torvalds/linux,22fc46cea91df3dce140a7dc6847c6fcf0354505,Yue Haibing,2025-07-05T08:52:28Z,"atm: clip: Fix NULL pointer dereference in vcc_sendmsg()  atmarpd_dev_ops does not implement the send method, which may cause crash as bellow.  BUG: kernel NULL pointer dereference, address: 0000000000000000 PGD 0 P4D 0 Oops: Oops: 0010 [#1] SMP KASAN NOPTI CPU: 0 UID: 0 PID: 5324 Comm: syz.0.0 Not tainted 6.15.0-rc6-syzkaller-00346-g5723cc3450bc #0 PREEMPT(full) Hardware name: QEMU Standard PC (Q35 + ICH9, 2009), BIOS 1.16.3-debian-1.16.3-2~bpo12+1 04/01/2014 RIP: 0010:0x0 Code: Unable to access opcode bytes at 0xffffffffffffffd6. RSP: 0018:ffffc9000d3cf778 EFLAGS: 00010246 RAX: 1ffffffff1910dd1 RBX: 00000000000000c0 RCX: dffffc0000000000 RDX: ffffc9000dc82000 RSI: ffff88803e4c4640 RDI: ffff888052cd0000 RBP: ffffc9000d3cf8d0 R08: ffff888052c9143f R09: 1ffff1100a592287 R10: dffffc0000000000 R11: 0000000000000000 R12: 1ffff92001a79f00 R13: ffff888052cd0000 R14: ffff88803e4c4640 R15: ffffffff8c886e88 FS:  00007fbc762566c0(0000) GS:ffff88808d6c2000(0000) knlGS:0000000000000000 CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033 CR2: ffffffffffffffd6 CR3: 0000000041f1b000 CR4: 0000000000352ef0 DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000 DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400 Call Trace:  <TASK>  vcc_sendmsg+0xa10/0xc50 net/atm/common.c:644  sock_sendmsg_nosec net/socket.c:712 [inline]  __sock_sendmsg+0x219/0x270 net/socket.c:727  ____sys_sendmsg+0x52d/0x830 net/socket.c:2566  ___sys_sendmsg+0x21f/0x2a0 net/socket.c:2620  __sys_sendmmsg+0x227/0x430 net/socket.c:2709  __do_sys_sendmmsg net/socket.c:2736 [inline]  __se_sys_sendmmsg net/socket.c:2733 [inline]  __x64_sys_sendmmsg+0xa0/0xc0 net/socket.c:2733  do_syscall_x64 arch/x86/entry/syscall_64.c:63 [inline]  do_syscall_64+0xf6/0x210 arch/x86/entry/syscall_64.c:94  entry_SYSCALL_64_after_hwframe+0x77/0x7f  Fixes: 1da177e4c3f4 (""Linux-2.6.12-rc2"") Reported-by: syzbot+e34e5e6b5eddb0014def@syzkaller.appspotmail.com Closes: https://lore.kernel.org/all/682f82d5.a70a0220.1765ec.0143.GAE@google.com/T Signed-off-by: Yue Haibing <yuehaibing@huawei.com> Reviewed-by: Kuniyuki Iwashima <kuniyu@google.com> Link: https://patch.msgid.link/20250705085228.329202-1-yuehaibing@huawei.com Signed-off-by: Jakub Kicinski <kuba@kernel.org>",9,1,10
torvalds/linux,3aaea88f7dd1631301878231e6bf218d0124b9ca,Jakub Kicinski,2025-07-10T00:52:30Z,"Merge branch 'atm-clip-fix-infinite-recursion-potential-null-ptr-deref-and-memleak'  Kuniyuki Iwashima says:  ==================== atm: clip: Fix infinite recursion, potential null-ptr-deref, and memleak.  Patch 1 fixes racy access to atmarpd found while checking RTNL usage in clip.c.  Patch 2 fixes memory leak by ioctl(ATMARP_MKIP) and ioctl(ATMARPD_CTRL).  Patch 3 fixes infinite recursive call of clip_vcc->old_push(), which was reported by syzbot.  v1: https://lore.kernel.org/20250702020437.703698-1-kuniyu@google.com ====================  Link: https://patch.msgid.link/20250704062416.1613927-1-kuniyu@google.com Signed-off-by: Jakub Kicinski <kuba@kernel.org>",39,15,54
torvalds/linux,c489f3283dbfc0f3c00c312149cae90d27552c45,Kuniyuki Iwashima,2025-07-04T06:23:53Z,"atm: clip: Fix infinite recursive call of clip_push().  syzbot reported the splat below. [0]  This happens if we call ioctl(ATMARP_MKIP) more than once.  During the first call, clip_mkip() sets clip_push() to vcc->push(), and the second call copies it to clip_vcc->old_push().  Later, when the socket is close()d, vcc_destroy_socket() passes NULL skb to clip_push(), which calls clip_vcc->old_push(), triggering the infinite recursion.  Let's prevent the second ioctl(ATMARP_MKIP) by checking vcc->user_back, which is allocated by the first call as clip_vcc.  Note also that we use lock_sock() to prevent racy calls.  [0]: BUG: TASK stack guard page was hit at ffffc9000d66fff8 (stack is ffffc9000d670000..ffffc9000d678000) Oops: stack guard page: 0000 [#1] SMP KASAN NOPTI CPU: 0 UID: 0 PID: 5322 Comm: syz.0.0 Not tainted 6.16.0-rc4-syzkaller #0 PREEMPT(full) Hardware name: QEMU Standard PC (Q35 + ICH9, 2009), BIOS 1.16.3-debian-1.16.3-2~bpo12+1 04/01/2014 RIP: 0010:clip_push+0x5/0x720 net/atm/clip.c:191 Code: e0 8f aa 8c e8 1c ad 5b fa eb ae 66 2e 0f 1f 84 00 00 00 00 00 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 f3 0f 1e fa 55 <41> 57 41 56 41 55 41 54 53 48 83 ec 20 48 89 f3 49 89 fd 48 bd 00 RSP: 0018:ffffc9000d670000 EFLAGS: 00010246 RAX: 1ffff1100235a4a5 RBX: ffff888011ad2508 RCX: ffff8880003c0000 RDX: 0000000000000000 RSI: 0000000000000000 RDI: ffff888037f01000 RBP: dffffc0000000000 R08: ffffffff8fa104f7 R09: 1ffffffff1f4209e R10: dffffc0000000000 R11: ffffffff8a99b300 R12: ffffffff8a99b300 R13: ffff888037f01000 R14: ffff888011ad2500 R15: ffff888037f01578 FS:  000055557ab6d500(0000) GS:ffff88808d250000(0000) knlGS:0000000000000000 CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033 CR2: ffffc9000d66fff8 CR3: 0000000043172000 CR4: 0000000000352ef0 Call Trace:  <TASK>  clip_push+0x6dc/0x720 net/atm/clip.c:200  clip_push+0x6dc/0x720 net/atm/clip.c:200  clip_push+0x6dc/0x720 net/atm/clip.c:200 ...  clip_push+0x6dc/0x720 net/atm/clip.c:200  clip_push+0x6dc/0x720 net/atm/clip.c:200  clip_push+0x6dc/0x720 net/atm/clip.c:200  vcc_destroy_socket net/atm/common.c:183 [inline]  vcc_release+0x157/0x460 net/atm/common.c:205  __sock_release net/socket.c:647 [inline]  sock_close+0xc0/0x240 net/socket.c:1391  __fput+0x449/0xa70 fs/file_table.c:465  task_work_run+0x1d1/0x260 kernel/task_work.c:227  resume_user_mode_work include/linux/resume_user_mode.h:50 [inline]  exit_to_user_mode_loop+0xec/0x110 kernel/entry/common.c:114  exit_to_user_mode_prepare include/linux/entry-common.h:330 [inline]  syscall_exit_to_user_mode_work include/linux/entry-common.h:414 [inline]  syscall_exit_to_user_mode include/linux/entry-common.h:449 [inline]  do_syscall_64+0x2bd/0x3b0 arch/x86/entry/syscall_64.c:100  entry_SYSCALL_64_after_hwframe+0x77/0x7f RIP: 0033:0x7ff31c98e929 Code: ff ff c3 66 2e 0f 1f 84 00 00 00 00 00 0f 1f 40 00 48 89 f8 48 89 f7 48 89 d6 48 89 ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05 <48> 3d 01 f0 ff ff 73 01 c3 48 c7 c1 a8 ff ff ff f7 d8 64 89 01 48 RSP: 002b:00007fffb5aa1f78 EFLAGS: 00000246 ORIG_RAX: 00000000000001b4 RAX: 0000000000000000 RBX: 0000000000012747 RCX: 00007ff31c98e929 RDX: 0000000000000000 RSI: 000000000000001e RDI: 0000000000000003 RBP: 00007ff31cbb7ba0 R08: 0000000000000001 R09: 0000000db5aa226f R10: 00007ff31c7ff030 R11: 0000000000000246 R12: 00007ff31cbb608c R13: 00007ff31cbb6080 R14: ffffffffffffffff R15: 00007fffb5aa2090  </TASK> Modules linked in:  Fixes: 1da177e4c3f4 (""Linux-2.6.12-rc2"") Reported-by: syzbot+0c77cccd6b7cd917b35a@syzkaller.appspotmail.com Closes: https://syzkaller.appspot.com/bug?extid=2371d94d248d126c1eb1 Signed-off-by: Kuniyuki Iwashima <kuniyu@google.com> Reviewed-by: Simon Horman <horms@kernel.org> Link: https://patch.msgid.link/20250704062416.1613927-4-kuniyu@google.com Signed-off-by: Jakub Kicinski <kuba@kernel.org>",2,0,2
torvalds/linux,62dba28275a9a3104d4e33595c7b3328d4032d8d,Kuniyuki Iwashima,2025-07-04T06:23:52Z,"atm: clip: Fix memory leak of struct clip_vcc.  ioctl(ATMARP_MKIP) allocates struct clip_vcc and set it to vcc->user_back.  The code assumes that vcc_destroy_socket() passes NULL skb to vcc->push() when the socket is close()d, and then clip_push() frees clip_vcc.  However, ioctl(ATMARPD_CTRL) sets NULL to vcc->push() in atm_init_atmarp(), resulting in memory leak.  Let's serialise two ioctl() by lock_sock() and check vcc->push() in atm_init_atmarp() to prevent memleak.  Fixes: 1da177e4c3f4 (""Linux-2.6.12-rc2"") Signed-off-by: Kuniyuki Iwashima <kuniyu@google.com> Reviewed-by: Simon Horman <horms@kernel.org> Link: https://patch.msgid.link/20250704062416.1613927-3-kuniyu@google.com Signed-off-by: Jakub Kicinski <kuba@kernel.org>",8,0,8
torvalds/linux,706cc36477139c1616a9b2b96610a8bb520b7119,Kuniyuki Iwashima,2025-07-04T06:23:51Z,"atm: clip: Fix potential null-ptr-deref in to_atmarpd().  atmarpd is protected by RTNL since commit f3a0592b37b8 (""[ATM]: clip causes unregister hang"").  However, it is not enough because to_atmarpd() is called without RTNL, especially clip_neigh_solicit() / neigh_ops->solicit() is unsleepable.  Also, there is no RTNL dependency around atmarpd.  Let's use a private mutex and RCU to protect access to atmarpd in to_atmarpd().  Fixes: 1da177e4c3f4 (""Linux-2.6.12-rc2"") Signed-off-by: Kuniyuki Iwashima <kuniyu@google.com> Reviewed-by: Simon Horman <horms@kernel.org> Link: https://patch.msgid.link/20250704062416.1613927-2-kuniyu@google.com Signed-off-by: Jakub Kicinski <kuba@kernel.org>",29,15,44
torvalds/linux,ec3cae639482a8da11a3ae30d28ceceb9d6a3f56,Rafael J. Wysocki,2025-07-09T17:12:47Z,"PM: sleep: Call pm_restore_gfp_mask() after dpm_resume()  Commit 12ffc3b1513e (""PM: Restrict swap use to later in the suspend sequence"") changed two pm_restore_gfp_mask() calls in enter_state() and hibernation_restore() into one pm_restore_gfp_mask() call in dpm_resume_end(), but it put that call before the dpm_resume() invocation which is too early (some swap-backing devices may not be ready at that point).  Moreover, this code ordering change was not even mentioned in the changelog of the commit mentioned above.  Address this by moving that call after the dpm_resume() one.  Fixes: 12ffc3b1513e (""PM: Restrict swap use to later in the suspend sequence"") Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com> Reviewed-by: Mario Limonciello <mario.limonciello@amd.com> Link: https://patch.msgid.link/2797018.mvXUDI8C0e@rjwysocki.net",1,1,2
torvalds/linux,4578a747f3c7950be3feb93c2db32eb597a3e55b,Paolo Bonzini,2025-07-09T17:45:14Z,"KVM: x86: avoid underflow when scaling TSC frequency  In function kvm_guest_time_update(), __scale_tsc() is used to calculate a TSC *frequency* rather than a TSC value.  With low-enough ratios, a TSC value that is less than 1 would underflow to 0 and to an infinite while loop in kvm_get_time_scale():    kvm_guest_time_update(struct kvm_vcpu *v)     if (kvm_caps.has_tsc_control)       tgt_tsc_khz = kvm_scale_tsc(tgt_tsc_khz,                                   v->arch.l1_tsc_scaling_ratio);         __scale_tsc(u64 ratio, u64 tsc)           ratio=122380531, tsc=2299998, N=48           ratio*tsc >> N = 0.999... -> 0  Later in the function:    Call Trace:    <TASK>    kvm_get_time_scale arch/x86/kvm/x86.c:2458 [inline]    kvm_guest_time_update+0x926/0xb00 arch/x86/kvm/x86.c:3268    vcpu_enter_guest.constprop.0+0x1e70/0x3cf0 arch/x86/kvm/x86.c:10678    vcpu_run+0x129/0x8d0 arch/x86/kvm/x86.c:11126    kvm_arch_vcpu_ioctl_run+0x37a/0x13d0 arch/x86/kvm/x86.c:11352    kvm_vcpu_ioctl+0x56b/0xe60 virt/kvm/kvm_main.c:4188    vfs_ioctl fs/ioctl.c:51 [inline]    __do_sys_ioctl fs/ioctl.c:871 [inline]    __se_sys_ioctl+0x12d/0x190 fs/ioctl.c:857    do_syscall_x64 arch/x86/entry/common.c:51 [inline]    do_syscall_64+0x59/0x110 arch/x86/entry/common.c:81    entry_SYSCALL_64_after_hwframe+0x78/0xe2  This can really happen only when fuzzing, since the TSC frequency would have to be nonsensically low.  Fixes: 35181e86df97 (""KVM: x86: Add a common TSC scaling function"") Reported-by: Yuntao Liu <liuyuntao12@huawei.com> Suggested-by: Sean Christopherson <seanjc@google.com> Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>",3,1,4
torvalds/linux,8c2e52ebbe885c7eeaabd3b7ddcdc1246fc400d2,Linus Torvalds,2025-07-09T17:38:29Z,"eventpoll: don't decrement ep refcount while still holding the ep mutex  Jann Horn points out that epoll is decrementing the ep refcount and then doing a      mutex_unlock(&ep->mtx);  afterwards. That's very wrong, because it can lead to a use-after-free.  That pattern is actually fine for the very last reference, because the code in question will delay the actual call to ""ep_free(ep)"" until after it has unlocked the mutex.  But it's wrong for the much subtler ""next to last"" case when somebody *else* may also be dropping their reference and free the ep while we're still using the mutex.  Note that this is true even if that other user is also using the same ep mutex: mutexes, unlike spinlocks, can not be used for object ownership, even if they guarantee mutual exclusion.  A mutex ""unlock"" operation is not atomic, and as one user is still accessing the mutex as part of unlocking it, another user can come in and get the now released mutex and free the data structure while the first user is still cleaning up.  See our mutex documentation in Documentation/locking/mutex-design.rst, in particular the section [1] about semantics:  	""mutex_unlock() may access the mutex structure even after it has 	 internally released the lock already - so it's not safe for 	 another context to acquire the mutex and assume that the 	 mutex_unlock() context is not using the structure anymore""  So if we drop our ep ref before the mutex unlock, but we weren't the last one, we may then unlock the mutex, another user comes in, drops _their_ reference and releases the 'ep' as it now has no users - all while the mutex_unlock() is still accessing it.  Fix this by simply moving the ep refcount dropping to outside the mutex: the refcount itself is atomic, and doesn't need mutex protection (that's the whole _point_ of refcounts: unlike mutexes, they are inherently about object lifetimes).  Reported-by: Jann Horn <jannh@google.com> Link: https://docs.kernel.org/locking/mutex-design.html#semantics [1] Cc: Alexander Viro <viro@zeniv.linux.org.uk> Cc: Christian Brauner <brauner@kernel.org> Cc: Jan Kara <jack@suse.cz> Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>",5,7,12
torvalds/linux,f69f5aab1fad379bbef9339f66bc8323daffe56e,Linus Torvalds,2025-07-09T15:37:48Z,Merge tag 'arm64-fixes' of git://git.kernel.org/pub/scm/linux/kernel/git/arm64/linux  Pull arm64 fixes from Will Deacon:   - Fix bogus KASAN splat on EFI runtime stack   - Select JUMP_LABEL unconditionally to avoid boot failure with pKVM and    the legacy implementation of static keys   - Avoid touching GCS registers when 'arm64.nogcs' has been passed on    the command-line   - Move a 'cpumask_t' off the stack in smp_send_stop()   - Don't advertise SME-related hwcaps to userspace when ID_AA64PFR1_EL1    indicates that SME is not implemented   - Always check the VMA when handling an Overlay fault   - Avoid corrupting TCR2_EL1 during boot  * tag 'arm64-fixes' of git://git.kernel.org/pub/scm/linux/kernel/git/arm64/linux:   arm64/mm: Drop wrong writes into TCR2_EL1   arm64: poe: Handle spurious Overlay faults   arm64: Filter out SME hwcaps when FEAT_SME isn't implemented   arm64: move smp_send_stop() cpu mask off stack   arm64/gcs: Don't try to access GCS registers if arm64.nogcs is enabled   arm64: Unconditionally select CONFIG_JUMP_LABEL   arm64: efi: Fix KASAN false positive for EFI runtime stack,76,53,129
torvalds/linux,9adf143357bf5ea6400f276ca60bfbc7cd92c19a,Linus Torvalds,2025-07-09T15:33:08Z,"Merge tag 'pinctrl-v6.16-3' of git://git.kernel.org/pub/scm/linux/kernel/git/linusw/linux-pinctrl  Pull pin control fixes from Linus Walleij:   - Mark som pins as invalid for IRQ use in the Qualcomm driver   - Fix up the use of device properties on the MA35DX Nuvoton, apparently    something went sidewise   - Clear the GPIO debounce settings when going down for suspend in the    AMD driver. Very good for some AMD laptops that now wake up from    suspend again!   - Add the compulsory .can_sleep bool flag in the AW9523 driver, should    have been there from the beginning, now there are users finding the    bug   - Drop some bouncing email address from MAINTAINERS  * tag 'pinctrl-v6.16-3' of git://git.kernel.org/pub/scm/linux/kernel/git/linusw/linux-pinctrl:   pinctrl: aw9523: fix can_sleep flag for GPIO chip   pinctrl: amd: Clear GPIO debounce for suspend   pinctrl: nuvoton: Fix boot on ma35dx platforms   MAINTAINERS: drop bouncing Lakshmi Sowjanya D   pinctrl: qcom: msm: mark certain pins as invalid for interrupts",41,5,46
torvalds/linux,d563e7f95c933816efe531c3a48e22bc099c0f55,Alexander Stein,2025-07-08T08:38:29Z,"gpio: of: initialize local variable passed to the .of_xlate() callback  of_flags is passed down to GPIO chip's xlate function, so ensure this one is properly initialized as - if the xlate callback does nothing with it - we may end up with various configuration errors like:      gpio-720 (enable): multiple pull-up, pull-down or pull-disable enabled, invalid configuration  Signed-off-by: Alexander Stein <alexander.stein@ew.tq-group.com> Link: https://lore.kernel.org/r/20250708083829.658051-1-alexander.stein@ew.tq-group.com [Bartosz: tweaked the commit message] Signed-off-by: Bartosz Golaszewski <bartosz.golaszewski@linaro.org>",1,1,2
torvalds/linux,bd46cece51a36ef088f22ef0416ac13b0a46d5b0,Simona Vetter,2025-07-07T15:18:13Z,"drm/gem: Fix race in drm_gem_handle_create_tail()  Object creation is a careful dance where we must guarantee that the object is fully constructed before it is visible to other threads, and GEM buffer objects are no difference.  Final publishing happens by calling drm_gem_handle_create(). After that the only allowed thing to do is call drm_gem_object_put() because a concurrent call to the GEM_CLOSE ioctl with a correctly guessed id (which is trivial since we have a linear allocator) can already tear down the object again.  Luckily most drivers get this right, the very few exceptions I've pinged the relevant maintainers for. Unfortunately we also need drm_gem_handle_create() when creating additional handles for an already existing object (e.g. GETFB ioctl or the various bo import ioctl), and hence we cannot have a drm_gem_handle_create_and_put() as the only exported function to stop these issues from happening.  Now unfortunately the implementation of drm_gem_handle_create() isn't living up to standards: It does correctly finishe object initialization at the global level, and hence is safe against a concurrent tear down. But it also sets up the file-private aspects of the handle, and that part goes wrong: We fully register the object in the drm_file.object_idr before calling drm_vma_node_allow() or obj->funcs->open, which opens up races against concurrent removal of that handle in drm_gem_handle_delete().  Fix this with the usual two-stage approach of first reserving the handle id, and then only registering the object after we've completed the file-private setup.  Jacek reported this with a testcase of concurrently calling GEM_CLOSE on a freshly-created object (which also destroys the object), but it should be possible to hit this with just additional handles created through import or GETFB without completed destroying the underlying object with the concurrent GEM_CLOSE ioctl calls.  Note that the close-side of this race was fixed in f6cd7daecff5 (""drm: Release driver references to handle before making it available again""), which means a cool 9 years have passed until someone noticed that we need to make this symmetry or there's still gaps left :-/ Without the 2-stage close approach we'd still have a race, therefore that's an integral part of this bugfix.  More importantly, this means we can have NULL pointers behind allocated id in our drm_file.object_idr. We need to check for that now:  - drm_gem_handle_delete() checks for ERR_OR_NULL already  - drm_gem.c:object_lookup() also chekcs for NULL  - drm_gem_release() should never be called if there's another thread   still existing that could call into an IOCTL that creates a new   handle, so cannot race. For paranoia I added a NULL check to   drm_gem_object_release_handle() though.  - most drivers (etnaviv, i915, msm) are find because they use   idr_find(), which maps both ENOENT and NULL to NULL.  - drivers using idr_for_each_entry() should also be fine, because   idr_get_next does filter out NULL entries and continues the   iteration.  - The same holds for drm_show_memory_stats().  v2: Use drm_WARN_ON (Thomas)  Reported-by: Jacek Lawrynowicz <jacek.lawrynowicz@linux.intel.com> Tested-by: Jacek Lawrynowicz <jacek.lawrynowicz@linux.intel.com> Reviewed-by: Thomas Zimmermann <tzimmermann@suse.de> Cc: stable@vger.kernel.org Cc: Jacek Lawrynowicz <jacek.lawrynowicz@linux.intel.com> Cc: Maarten Lankhorst <maarten.lankhorst@linux.intel.com> Cc: Maxime Ripard <mripard@kernel.org> Cc: Thomas Zimmermann <tzimmermann@suse.de> Cc: David Airlie <airlied@gmail.com> Cc: Simona Vetter <simona@ffwll.ch> Signed-off-by: Simona Vetter <simona.vetter@intel.com> Signed-off-by: Simona Vetter <simona.vetter@ffwll.ch> Link: https://patchwork.freedesktop.org/patch/msgid/20250707151814.603897-1-simona.vetter@ffwll.ch",12,1,13
torvalds/linux,f6bfc9afc7510cb5e6fbe0a17c507917b0120280,Thomas Zimmermann,2025-07-07T13:11:55Z,"drm/framebuffer: Acquire internal references on GEM handles  Acquire GEM handles in drm_framebuffer_init() and release them in the corresponding drm_framebuffer_cleanup(). Ties the handle's lifetime to the framebuffer. Not all GEM buffer objects have GEM handles. If not set, no refcounting takes place. This is the case for some fbdev emulation. This is not a problem as these GEM objects do not use dma-bufs and drivers will not release them while fbdev emulation is running. Framebuffer flags keep a bit per color plane of which the framebuffer holds a GEM handle reference.  As all drivers use drm_framebuffer_init(), they will now all hold dma-buf references as fixed in commit 5307dce878d4 (""drm/gem: Acquire references on GEM handles for framebuffers"").  In the GEM framebuffer helpers, restore the original ref counting on buffer objects. As the helpers for handle refcounting are now no longer called from outside the DRM core, unexport the symbols.  v3: - don't mix internal flags with mode flags (Christian) v2: - track framebuffer handle refs by flag - drop gma500 cleanup (Christian)  Signed-off-by: Thomas Zimmermann <tzimmermann@suse.de> Fixes: 5307dce878d4 (""drm/gem: Acquire references on GEM handles for framebuffers"") Reported-by: Bert Karwatzki <spasswolf@web.de> Closes: https://lore.kernel.org/dri-devel/20250703115915.3096-1-spasswolf@web.de/ Tested-by: Bert Karwatzki <spasswolf@web.de> Tested-by: Mario Limonciello <superm1@kernel.org> Tested-by: Borislav Petkov (AMD) <bp@alien8.de> Cc: Thomas Zimmermann <tzimmermann@suse.de> Cc: Anusha Srivatsa <asrivats@redhat.com> Cc: Christian KÃ¶nig <christian.koenig@amd.com> Cc: Maarten Lankhorst <maarten.lankhorst@linux.intel.com> Cc: Maxime Ripard <mripard@kernel.org> Cc: Sumit Semwal <sumit.semwal@linaro.org> Cc: ""Christian KÃ¶nig"" <christian.koenig@amd.com> Cc: linux-media@vger.kernel.org Cc: dri-devel@lists.freedesktop.org Cc: linaro-mm-sig@lists.linaro.org Cc: <stable@vger.kernel.org> Reviewed-by: Christian KÃ¶nig <christian.koenig@amd.com> Link: https://lore.kernel.org/r/20250707131224.249496-1-tzimmermann@suse.de",68,26,94
torvalds/linux,a066917360ed5000c4f73fb190773cfac004c885,Pagadala Yesu Anjaneyulu,2025-06-09T18:35:14Z,wifi: mac80211: Fix uninitialized variable with __free() in ieee80211_ml_epcs()  The cleanup attribute runs kfree() when the variable goes out of scope. There is a possibility that the link_elems variable is uninitialized if the loop ends before an assignment is made to this variable. This leads to uninitialized variable bug.  Fix this by assigning link_elems to NULL.  Signed-off-by: Pagadala Yesu Anjaneyulu <pagadala.yesu.anjaneyulu@intel.com> Reviewed-by: Ilan Peer <ilan.peer@intel.com> Signed-off-by: Miri Korenblit <miriam.rachel.korenblit@intel.com> Link: https://patch.msgid.link/20250609213231.eeacd3738a7b.I0f876fa1359daeec47ab3aef098255a9c23efd70@changeid Signed-off-by: Johannes Berg <johannes.berg@intel.com>,1,1,2
torvalds/linux,d88dfb756d557e40e88406e8c962c0684bc9eb87,Lukas Wunner,2025-07-02T05:02:15Z,"agp/amd64: Check AGP Capability before binding to unsupported devices  Since commit 172efbb40333 (""AGP: Try unsupported AGP chipsets on x86-64 by default""), the AGP driver for AMD Opteron/Athlon64 CPUs has attempted to bind to any PCI device possessing an AGP Capability.  Commit 6fd024893911 (""amd64-agp: Probe unknown AGP devices the right way"") subsequently reworked the driver to perform a bind attempt to any PCI device (regardless of AGP Capability) and reject a device in the driver's ->probe() hook if it lacks the AGP Capability.  On modern CPUs exposing an AMD IOMMU, this subtle change results in an annoying message with KERN_CRIT severity:    pci 0000:00:00.2: Resources present before probing  The message is emitted by the driver core prior to invoking a driver's ->probe() hook.  The check for an AGP Capability in the ->probe() hook happens too late to prevent the message.  The message has appeared only recently with commit 3be5fa236649 (Revert ""iommu/amd: Prevent binding other PCI drivers to IOMMU PCI devices""). Prior to the commit, no driver could bind to AMD IOMMUs.  The reason for the message is that an MSI is requested early on for the AMD IOMMU, which results in a call from msi_sysfs_create_group() to devm_device_add_group().  A devres resource is thus attached to the driver-less AMD IOMMU, which is normally not allowed, but presumably cannot be avoided because requesting the MSI from a regular PCI driver might be too late.  Avoid the message by once again checking for an AGP Capability *before* binding to an unsupported device.  Achieve that by way of the PCI core's dynid functionality.  pci_add_dynid() can fail only with -ENOMEM (on allocation failure) or -EINVAL (on bus_to_subsys() failure).  It doesn't seem worth the extra code to propagate those error codes out of the for_each_pci_dev() loop, so simply error out with -ENODEV if there was no successful bind attempt. In the -ENOMEM case, a splat is emitted anyway, and the -EINVAL case can never happen because it requires failure of bus_register(&pci_bus_type), in which case there's no driver probing of PCI devices.  Hans has voiced a preference to no longer probe unsupported devices by default (i.e. set agp_try_unsupported = 0).  In fact, the help text for CONFIG_AGP_AMD64 pretends this to be the default.  Alternatively, he proposes probing only devices with PCI_CLASS_BRIDGE_HOST.  However these approaches risk regressing users who depend on the existing behavior.  Fixes: 3be5fa236649 (Revert ""iommu/amd: Prevent binding other PCI drivers to IOMMU PCI devices"") Reported-by: Fedor Pchelkin <pchelkin@ispras.ru> Closes: https://lore.kernel.org/r/wpoivftgshz5b5aovxbkxl6ivvquinukqfvb5z6yi4mv7d25ew@edtzr2p74ckg/ Reported-by: Hans de Goede <hansg@kernel.org> Closes: https://lore.kernel.org/r/20250625112411.4123-1-hansg@kernel.org/ Tested-by: Hans de Goede <hansg@kernel.org> Signed-off-by: Lukas Wunner <lukas@wunner.de> Reviewed-by: Hans de Goede <hansg@kernel.org> Link: https://lore.kernel.org/r/b29e7fbfc6d146f947603d0ebaef44cbd2f0d754.1751468802.git.lukas@wunner.de",8,8,16
torvalds/linux,3c78f91e82d65d8927dc7976636bc5fae666370a,Jakub Kicinski,2025-07-09T01:12:55Z,"Merge branch 'net-phy-smsc-robustness-fixes-for-lan87xx-lan9500'  Oleksij Rempel says:  ==================== net: phy: smsc: robustness fixes for LAN87xx/LAN9500  The SMSC 10/100 PHYs (LAN87xx family) found in smsc95xx (lan95xx) USB-Ethernet adapters show several quirks around the Auto-MDIX feature:  - A hardware strap (AUTOMDIX_EN) may boot the PHY in fixed-MDI mode, and   the current driver cannot always override it.  - When Auto-MDIX is left enabled while autonegotiation is forced off,   the PHY endlessly swaps the TX/RX pairs and never links up.  - The driver sets the enable bit for Auto-MDIX but forgets the override   bit, so userspace requests are silently ignored.  - Rapid configuration changes can wedge the link if PHY IRQs are   enabled.  The four patches below make the MDIX state fully predictable and prevent link failures in every tested strap / autoneg / MDI-X permutation.  Tested on LAN9512 Eval board. ====================  Link: https://patch.msgid.link/20250703114941.3243890-1-o.rempel@pengutronix.de Signed-off-by: Jakub Kicinski <kuba@kernel.org>",52,5,57
torvalds/linux,9dfe110cc0f6ef42af8e81ce52aef34a647d0b8a,Oleksij Rempel,2025-07-03T11:49:41Z,"net: phy: smsc: Fix link failure in forced mode with Auto-MDIX  Force a fixed MDI-X mode when auto-negotiation is disabled to prevent link instability.  When forcing the link speed and duplex on a LAN9500 PHY (e.g., with `ethtool -s eth0 autoneg off ...`) while leaving MDI-X control in auto mode, the PHY fails to establish a stable link. This occurs because the PHY's Auto-MDIX algorithm is not designed to operate when auto-negotiation is disabled. In this state, the PHY continuously toggles the TX/RX signal pairs, which prevents the link partner from synchronizing.  This patch resolves the issue by detecting when auto-negotiation is disabled. If the MDI-X control mode is set to 'auto', the driver now forces a specific, stable mode (ETH_TP_MDI) to prevent the pair toggling. This choice of a fixed MDI mode mirrors the behavior the hardware would exhibit if the AUTOMDIX_EN strap were configured for a fixed MDI connection.  Fixes: 05b35e7eb9a1 (""smsc95xx: add phylib support"") Signed-off-by: Oleksij Rempel <o.rempel@pengutronix.de> Cc: Andre Edich <andre.edich@microchip.com> Reviewed-by: Andrew Lunn <andrew@lunn.ch> Link: https://patch.msgid.link/20250703114941.3243890-4-o.rempel@pengutronix.de Signed-off-by: Jakub Kicinski <kuba@kernel.org>",22,3,25
torvalds/linux,0713e55533c88a20edb53eea6517dc56786a0078,Oleksij Rempel,2025-07-03T11:49:40Z,"net: phy: smsc: Force predictable MDI-X state on LAN87xx  Override the hardware strap configuration for MDI-X mode to ensure a predictable initial state for the driver. The initial mode of the LAN87xx PHY is determined by the AUTOMDIX_EN strap pin, but the driver has no documented way to read its latched status.  This unpredictability means the driver cannot know if the PHY has initialized with Auto-MDIX enabled or disabled, preventing it from providing a reliable interface to the user.  This patch introduces a `config_init` hook that forces the PHY into a known state by explicitly enabling Auto-MDIX.  Fixes: 05b35e7eb9a1 (""smsc95xx: add phylib support"") Signed-off-by: Oleksij Rempel <o.rempel@pengutronix.de> Cc: Andre Edich <andre.edich@microchip.com> Reviewed-by: Andrew Lunn <andrew@lunn.ch> Link: https://patch.msgid.link/20250703114941.3243890-3-o.rempel@pengutronix.de Signed-off-by: Jakub Kicinski <kuba@kernel.org>",28,1,29
torvalds/linux,a141af8eb2272ab0f677a7f2653874840bc9b214,Oleksij Rempel,2025-07-03T11:49:39Z,"net: phy: smsc: Fix Auto-MDIX configuration when disabled by strap  Correct the Auto-MDIX configuration to ensure userspace settings are respected when the feature is disabled by the AUTOMDIX_EN hardware strap.  The LAN9500 PHY allows its default MDI-X mode to be configured via a hardware strap. If this strap sets the default to ""MDI-X off"", the driver was previously unable to enable Auto-MDIX from userspace.  When handling the ETH_TP_MDI_AUTO case, the driver would set the SPECIAL_CTRL_STS_AMDIX_ENABLE_ bit but neglected to set the required SPECIAL_CTRL_STS_OVRRD_AMDIX_ bit. Without the override flag, the PHY falls back to its hardware strap default, ignoring the software request.  This patch corrects the behavior by also setting the override bit when enabling Auto-MDIX. This ensures that the userspace configuration takes precedence over the hardware strap, allowing Auto-MDIX to be enabled correctly in all scenarios.  Fixes: 05b35e7eb9a1 (""smsc95xx: add phylib support"") Signed-off-by: Oleksij Rempel <o.rempel@pengutronix.de> Cc: Andre Edich <andre.edich@microchip.com> Reviewed-by: Maxime Chevallier <maxime.chevallier@bootlin.com> Link: https://patch.msgid.link/20250703114941.3243890-2-o.rempel@pengutronix.de Signed-off-by: Jakub Kicinski <kuba@kernel.org>",2,1,3
torvalds/linux,78b7920a03351a8402de2f81914c1d2e2bdf24b7,EricChan,2025-07-03T02:04:49Z,"net: stmmac: Fix interrupt handling for level-triggered mode in DWC_XGMAC2  According to the Synopsys Controller IP XGMAC-10G Ethernet MAC Databook v3.30a (section 2.7.2), when the INTM bit in the DMA_Mode register is set to 2, the sbd_perch_tx_intr_o[] and sbd_perch_rx_intr_o[] signals operate in level-triggered mode. However, in this configuration, the DMA does not assert the XGMAC_NIS status bit for Rx or Tx interrupt events.  This creates a functional regression where the condition if (likely(intr_status & XGMAC_NIS)) in dwxgmac2_dma_interrupt() will never evaluate to true, preventing proper interrupt handling for level-triggered mode. The hardware specification explicitly states that ""The DMA does not assert the NIS status bit for the Rx or Tx interrupt events"" (Synopsys DWC_XGMAC2 Databook v3.30a, sec. 2.7.2).  The fix ensures correct handling of both edge and level-triggered interrupts while maintaining backward compatibility with existing configurations. It has been tested on the hardware device (not publicly available), and it can properly trigger the RX and TX interrupt handling in both the INTM=0 and INTM=2 configurations.  Fixes: d6ddfacd95c7 (""net: stmmac: Add DMA related callbacks for XGMAC2"") Tested-by: EricChan <chenchuangyu@xiaomi.com> Signed-off-by: EricChan <chenchuangyu@xiaomi.com> Reviewed-by: Simon Horman <horms@kernel.org> Link: https://patch.msgid.link/20250703020449.105730-1-chenchuangyu@xiaomi.com Signed-off-by: Jakub Kicinski <kuba@kernel.org>",11,13,24
torvalds/linux,733923397fd95405a48f165c9b1fbc8c4b0a4681,Linus Torvalds,2025-07-08T20:31:29Z,"Merge tag 'pwm/for-6.16-rc6-fixes' of git://git.kernel.org/pub/scm/linux/kernel/git/ukleinek/linux  Pull pwm fixes from Uwe Kleine-KÃ¶nig:  ""Two fixes for v6.16-rc6    The first patch fixes an embarrassing bug in the pwm core. I really   wonder this wasn't found earlier since it's introduction in v6.11-rc1   as it greatly disturbs driving a PWM via sysfs.    The second and last patch fixes a clock balance issue in an error path   of the Mediatek PWM driver""  * tag 'pwm/for-6.16-rc6-fixes' of git://git.kernel.org/pub/scm/linux/kernel/git/ukleinek/linux:   pwm: mediatek: Ensure to disable clocks in error path   pwm: Fix invalid state detection",9,6,15
torvalds/linux,72782127388d96e971f0186996a5bd44e64a1665,Linus Torvalds,2025-07-08T20:10:32Z,"Merge tag 'modules-6.16-rc6.fixes' of git://git.kernel.org/pub/scm/linux/kernel/git/modules/linux  Pull modules fixes from Daniel Gomez:  ""This includes two fixes: one introduced in the current release cycle   and another introduced back in v6.4-rc1. Additionally, as Petr and   Luis mentioned in previous pull requests, add myself (Daniel Gomez) to   the list of modules maintainers.    The first was reported by Intel's kernel test robot, and it addresses   a crash exposed by Sebastian's commit c50d295c37f2 (""rds: Use   nested-BH locking for rds_page_remainder"") by allowing relocations for   the per-CPU section even if it lacks the SHF_ALLOC flag.    Petr and Sebastian went down to the archive history (before Git) and   found the commit that broke it at [1] / [2] (""Don't relocate   non-allocated regions in modules."").    The second fix, reported and fixed by Petr (with additional cleanup),   resolves a memory leak by ensuring proper deallocation if module   loading fails.    We couldn't find a reproducer other than forcing it manually or   leveraging eBPF. So, I tested it by enabling error injection in the   codetag functions through the error path that produces the leak and   made it fail until execmem is unable to allocate more memory""  Link: https://git.kernel.org/pub/scm/linux/kernel/git/mpe/linux-fullhistory.git/commit/?id=b3b91325f3c7 [1] Link: https://git.kernel.org/pub/scm/linux/kernel/git/tglx/history.git/commit/?id=1a6100caae [2]  * tag 'modules-6.16-rc6.fixes' of git://git.kernel.org/pub/scm/linux/kernel/git/modules/linux:   MAINTAINERS: update Daniel Gomez's role and email address   module: Make sure relocations are applied to the per-CPU section   module: Avoid unnecessary return value initialization in move_module()   module: Fix memory deallocation on error path in move_module()",12,7,19
torvalds/linux,31ec70afaaad11fb08970bd1b0dc9ebae3501e16,David Howells,2025-07-07T10:24:33Z,"rxrpc: Fix over large frame size warning  Under some circumstances, the compiler will emit the following warning for rxrpc_send_response():     net/rxrpc/output.c: In function 'rxrpc_send_response':    net/rxrpc/output.c:974:1: warning: the frame size of 1160 bytes is larger than 1024 bytes  This occurs because the local variables include a 16-element scatterlist array and a 16-element bio_vec array.  It's probably not actually a problem as this function is only called by the rxrpc I/O thread function in a kernel thread and there won't be much on the stack before it.  Fix this by overlaying the bio_vec array over the kvec array in the rxrpc_local struct.  There is one of these per I/O thread and the kvec array is intended for pointing at bits of a packet to be transmitted, typically a DATA or an ACK packet.  As packets for a local endpoint are only transmitted by its specific I/O thread, there can be no race, and so overlaying this bit of memory should be no problem.  Fixes: 5800b1cf3fd8 (""rxrpc: Allow CHALLENGEs to the passed to the app for a RESPONSE"") Reported-by: kernel test robot <lkp@intel.com> Closes: https://lore.kernel.org/oe-kbuild-all/202506240423.E942yKJP-lkp@intel.com/ Signed-off-by: David Howells <dhowells@redhat.com> cc: Marc Dionne <marc.dionne@auristor.com> cc: Simon Horman <horms@kernel.org> cc: linux-afs@lists.infradead.org Link: https://patch.msgid.link/20250707102435.2381045-2-dhowells@redhat.com Signed-off-by: Jakub Kicinski <kuba@kernel.org>",13,7,20
torvalds/linux,2dbae28a1d263902d647822937f9c42090c4adcc,Linus Torvalds,2025-07-08T19:22:16Z,"Merge tag 'bitmap-for-6.16-rc6' of https://github.com/norov/linux  Pull bitops UAPI fix from Yury Norov:  ""Fix BITS_PER_LONG merge error    Tomas' fix for __BITS_PER_LONG was effectively reverted by a wrong   merge. Fix it and add the related files to MAINTAINERS""  * tag 'bitmap-for-6.16-rc6' of https://github.com/norov/linux:   MAINTAINERS: bitmap: add UAPI headers   uapi: bitops: use UAPI-safe variant of BITS_PER_LONG again (2)",6,4,10
torvalds/linux,af1ccf546e5f2915fbbde26841db43a971d81cf3,Daniel Gomez,2025-07-04T19:39:59Z,MAINTAINERS: update Daniel Gomez's role and email address  Update Daniel Gomez's modules reviewer role to maintainer. This is according to the plan [1][2][3] of scaling with more reviewers for modules (for the incoming Rust support [4]) and rotate [5] every 6 months.  Acked-by: Luis Chamberlain <mcgrof@kernel.org> Link: https://lore.kernel.org/linux-modules/ZsPANzx4-5DrOl5m@bombadil.infradead.org [1] Link: https://lore.kernel.org/linux-modules/20240821174021.2371547-1-mcgrof@kernel.org [2] Link: https://lore.kernel.org/linux-modules/458901be-1da8-4987-9c72-5aa3da6db15e@suse.com [3] Link: https://lore.kernel.org/linux-modules/20250702-module-params-v3-v14-0-5b1cc32311af@kernel.org [4] Link: https://lore.kernel.org/linux-modules/Z3gDAnPlA3SZEbgl@bombadil.infradead.org [5] Acked-by: Petr Pavlu <petr.pavlu@suse.com> Signed-off-by: Daniel Gomez <da.gomez@samsung.com>,1,1,2
torvalds/linux,570db4b39f535a8bb722adb8be0280d09e34ca99,Sebastian Andrzej Siewior,2025-06-10T16:33:28Z,"module: Make sure relocations are applied to the per-CPU section  The per-CPU data section is handled differently than the other sections. The memory allocations requires a special __percpu pointer and then the section is copied into the view of each CPU. Therefore the SHF_ALLOC flag is removed to ensure move_module() skips it.  Later, relocations are applied and apply_relocations() skips sections without SHF_ALLOC because they have not been copied. This also skips the per-CPU data section. The missing relocations result in a NULL pointer on x86-64 and very small values on x86-32. This results in a crash because it is not skipped like NULL pointer would and can't be dereferenced.  Such an assignment happens during static per-CPU lock initialisation with lockdep enabled.  Allow relocation processing for the per-CPU section even if SHF_ALLOC is missing.  Reported-by: kernel test robot <oliver.sang@intel.com> Closes: https://lore.kernel.org/oe-lkp/202506041623.e45e4f7d-lkp@intel.com Fixes: 1a6100caae425 (""Don't relocate non-allocated regions in modules."") #v2.6.1-rc3 Signed-off-by: Sebastian Andrzej Siewior <bigeasy@linutronix.de> Reviewed-by: Petr Pavlu <petr.pavlu@suse.com> Link: https://lore.kernel.org/r/20250610163328.URcsSUC1@linutronix.de Signed-off-by: Daniel Gomez <da.gomez@samsung.com> Message-ID: <20250610163328.URcsSUC1@linutronix.de>",8,2,10
torvalds/linux,eb0994a954978f0edd3efb38d0cbe6744df8b83d,Petr Pavlu,2025-06-18T12:26:27Z,"module: Avoid unnecessary return value initialization in move_module()  All error conditions in move_module() set the return value by updating the ret variable. Therefore, it is not necessary to the initialize the variable when declaring it.  Remove the unnecessary initialization.  Signed-off-by: Petr Pavlu <petr.pavlu@suse.com> Reviewed-by: Sami Tolvanen <samitolvanen@google.com> Reviewed-by: Daniel Gomez <da.gomez@samsung.com> Link: https://lore.kernel.org/r/20250618122730.51324-3-petr.pavlu@suse.com Signed-off-by: Daniel Gomez <da.gomez@samsung.com> Message-ID: <20250618122730.51324-3-petr.pavlu@suse.com>",1,2,3
torvalds/linux,ca3881f6fd8e9b6eb2d51e8718d07d3b8029d886,Petr Pavlu,2025-06-18T12:26:26Z,"module: Fix memory deallocation on error path in move_module()  The function move_module() uses the variable t to track how many memory types it has allocated and consequently how many should be freed if an error occurs.  The variable is initially set to 0 and is updated when a call to module_memory_alloc() fails. However, move_module() can fail for other reasons as well, in which case t remains set to 0 and no memory is freed.  Fix the problem by initializing t to MOD_MEM_NUM_TYPES. Additionally, make the deallocation loop more robust by not relying on the mod_mem_type_t enum having a signed integer as its underlying type.  Fixes: c7ee8aebf6c0 (""module: add stop-grap sanity check on module memcpy()"") Signed-off-by: Petr Pavlu <petr.pavlu@suse.com> Reviewed-by: Sami Tolvanen <samitolvanen@google.com> Reviewed-by: Daniel Gomez <da.gomez@samsung.com> Link: https://lore.kernel.org/r/20250618122730.51324-2-petr.pavlu@suse.com Signed-off-by: Daniel Gomez <da.gomez@samsung.com> Message-ID: <20250618122730.51324-2-petr.pavlu@suse.com>",2,2,4
torvalds/linux,a3b5b88ea9bc9da00bd89d94738bf7181b2516f7,Linus Torvalds,2025-07-08T18:50:27Z,"Merge tag 'libcrypto-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/ebiggers/linux  Pull crypto library fix from Eric Biggers:  ""Fix an uninitialized variable in the s390 optimized SHA-1 and SHA-2.    Note that my librarification changes also fix this by greatly   simplifying how the s390 optimized SHA code is integrated. However, we   need this separate fix for 6.16 and older versions""  * tag 'libcrypto-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/ebiggers/linux:   crypto: s390/sha - Fix uninitialized variable in SHA-1 and SHA-2",5,0,5
torvalds/linux,9dff55ebaef7e94e5dedb6be28a1cafff65cc467,Jens Axboe,2025-07-08T17:04:45Z,"Revert ""io_uring: gate REQ_F_ISREG on !S_ANON_INODE as well""  This reverts commit 6f11adcc6f36ffd8f33dbdf5f5ce073368975bc3.  The problematic commit was fixed in mainline, so the work-around in io_uring can be removed at this point. Anonymous inodes no longer pretend to be regular files after:  1e7ab6f67824 (""anon_inode: rework assertions"")  Signed-off-by: Jens Axboe <axboe@kernel.dk>",1,2,3
torvalds/linux,fc582cd26e888b0652bc1494f252329453fd3b23,Jens Axboe,2025-07-08T17:00:32Z,"io_uring/msg_ring: ensure io_kiocb freeing is deferred for RCU  syzbot reports that defer/local task_work adding via msg_ring can hit a request that has been freed:  CPU: 1 UID: 0 PID: 19356 Comm: iou-wrk-19354 Not tainted 6.16.0-rc4-syzkaller-00108-g17bbde2e1716 #0 PREEMPT(full) Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 05/07/2025 Call Trace:  <TASK>  dump_stack_lvl+0x189/0x250 lib/dump_stack.c:120  print_address_description mm/kasan/report.c:408 [inline]  print_report+0xd2/0x2b0 mm/kasan/report.c:521  kasan_report+0x118/0x150 mm/kasan/report.c:634  io_req_local_work_add io_uring/io_uring.c:1184 [inline]  __io_req_task_work_add+0x589/0x950 io_uring/io_uring.c:1252  io_msg_remote_post io_uring/msg_ring.c:103 [inline]  io_msg_data_remote io_uring/msg_ring.c:133 [inline]  __io_msg_ring_data+0x820/0xaa0 io_uring/msg_ring.c:151  io_msg_ring_data io_uring/msg_ring.c:173 [inline]  io_msg_ring+0x134/0xa00 io_uring/msg_ring.c:314  __io_issue_sqe+0x17e/0x4b0 io_uring/io_uring.c:1739  io_issue_sqe+0x165/0xfd0 io_uring/io_uring.c:1762  io_wq_submit_work+0x6e9/0xb90 io_uring/io_uring.c:1874  io_worker_handle_work+0x7cd/0x1180 io_uring/io-wq.c:642  io_wq_worker+0x42f/0xeb0 io_uring/io-wq.c:696  ret_from_fork+0x3fc/0x770 arch/x86/kernel/process.c:148  ret_from_fork_asm+0x1a/0x30 arch/x86/entry/entry_64.S:245  </TASK>  which is supposed to be safe with how requests are allocated. But msg ring requests alloc and free on their own, and hence must defer freeing to a sane time.  Add an rcu_head and use kfree_rcu() in both spots where requests are freed. Only the one in io_msg_tw_complete() is strictly required as it has been visible on the other ring, but use it consistently in the other spot as well.  This should not cause any other issues outside of KASAN rightfully complaining about it.  Link: https://lore.kernel.org/io-uring/686cd2ea.a00a0220.338033.0007.GAE@google.com/ Reported-by: syzbot+54cbbfb4db9145d26fc2@syzkaller.appspotmail.com Cc: stable@vger.kernel.org Fixes: 0617bb500bfa (""io_uring/msg_ring: improve handling of target CQE posting"") Signed-off-by: Jens Axboe <axboe@kernel.dk>",4,2,6
torvalds/linux,3ef07434c7dbfba302df477bb6c70e082965f232,Christophe JAILLET,2025-07-05T08:34:32Z,"net: airoha: Fix an error handling path in airoha_probe()  If an error occurs after a successful airoha_hw_init() call, airoha_ppe_deinit() needs to be called as already done in the remove function.  Fixes: 00a7678310fe (""net: airoha: Introduce flowtable offload support"") Signed-off-by: Christophe JAILLET <christophe.jaillet@wanadoo.fr> Reviewed-by: Simon Horman <horms@kernel.org> Acked-by: Lorenzo Bianconi <lorenzo@kernel.org> Link: https://patch.msgid.link/1c940851b4fa3c3ed2a142910c821493a136f121.1746715755.git.christophe.jaillet@wanadoo.fr Signed-off-by: Jakub Kicinski <kuba@kernel.org>",1,0,1
torvalds/linux,d006330be3f782ff3fb7c3ed51e617e01f29a465,Linus Torvalds,2025-07-08T15:55:18Z,"Merge tag 'sound-6.16-rc6' of git://git.kernel.org/pub/scm/linux/kernel/git/tiwai/sound  Pull sound fixes from Takashi Iwai:  ""Here are device-specific small fixes, including HD-audio, USB-audio   and ASoC Intel quirks, as well as ASoC fsl, Cirrus codec and the   legacy AD driver fixes.    All look safe and easy""  * tag 'sound-6.16-rc6' of git://git.kernel.org/pub/scm/linux/kernel/git/tiwai/sound:   ALSA: hda/realtek: Enable headset Mic on Positivo K116J   ALSA: hda/tas2781: Fix calibration data parser issue   ALSA: ad1816a: Fix potential NULL pointer deref in snd_card_ad1816a_pnp()   ASoC: cs35l56: probe() should fail if the device ID is not recognized   ALSA: hda/realtek: Add quirk for ASUS ExpertBook B9403CVAR   ASoC: Intel: sof_sdw: Add quirks for Lenovo P1 and P16   ALSA: usb-audio: Improve filtering of sample rates on Focusrite devices   ASoC: Intel: soc-acpi: arl: Correct order of cs42l43 matches   MAINTAINERS: update Qualcomm audio codec drivers list   ASoC: fsl_sai: Force a software reset when starting in consumer mode   ASoC: Intel: SND_SOC_INTEL_SOF_BOARD_HELPERS select SND_SOC_ACPI_INTEL_MATCH   ASoC: fsl_asrc: use internal measured ratio for non-ideal ratio mode   ALSA: hda/realtek - Add mute LED support for HP Victus 15-fb2xxx   ALSA: hda: Add missing NVIDIA HDA codec IDs",64,41,105
torvalds/linux,40c47232772e45385757e8c979d8871895c78823,Jakub Kicinski,2025-07-08T15:39:53Z,"Merge branch 'vsock-fix-transport_-h2g-g2h-dgram-local-toctou-issues'  Michal Luczaj says:  ==================== vsock: Fix transport_{h2g,g2h,dgram,local} TOCTOU issues  transport_{h2g,g2h,dgram,local} may become NULL on vsock_core_unregister(). Make sure a poorly timed `rmmod transport` won't lead to a NULL/stale pointer dereference.  Note that these oopses are pretty unlikely to happen in the wild. Splats were collected after sprinkling kernel with mdelay()s.  v3: https://lore.kernel.org/20250702-vsock-transports-toctou-v3-0-0a7e2e692987@rbox.co v2: https://lore.kernel.org/20250620-vsock-transports-toctou-v2-0-02ebd20b1d03@rbox.co v1: https://lore.kernel.org/20250618-vsock-transports-toctou-v1-0-dd2d2ede9052@rbox.co ====================  Link: https://patch.msgid.link/20250703-vsock-transports-toctou-v4-0-98f0eb530747@rbox.co Signed-off-by: Jakub Kicinski <kuba@kernel.org>",46,11,57
torvalds/linux,1e7d9df379a04ccd0c2f82f39fbb69d482e864cc,Michal Luczaj,2025-07-03T15:18:20Z,"vsock: Fix IOCTL_VM_SOCKETS_GET_LOCAL_CID to check also `transport_local`  Support returning VMADDR_CID_LOCAL in case no other vsock transport is available.  Fixes: 0e12190578d0 (""vsock: add local transport support in the vsock core"") Suggested-by: Stefano Garzarella <sgarzare@redhat.com> Reviewed-by: Stefano Garzarella <sgarzare@redhat.com> Signed-off-by: Michal Luczaj <mhal@rbox.co> Link: https://patch.msgid.link/20250703-vsock-transports-toctou-v4-3-98f0eb530747@rbox.co Signed-off-by: Jakub Kicinski <kuba@kernel.org>",2,0,2
torvalds/linux,687aa0c5581b8d4aa87fd92973e4ee576b550cdf,Michal Luczaj,2025-07-03T15:18:19Z,"vsock: Fix transport_* TOCTOU  Transport assignment may race with module unload. Protect new_transport from becoming a stale pointer.  This also takes care of an insecure call in vsock_use_local_transport(); add a lockdep assert.  BUG: unable to handle page fault for address: fffffbfff8056000 Oops: Oops: 0000 [#1] SMP KASAN RIP: 0010:vsock_assign_transport+0x366/0x600 Call Trace:  vsock_connect+0x59c/0xc40  __sys_connect+0xe8/0x100  __x64_sys_connect+0x6e/0xc0  do_syscall_64+0x92/0x1c0  entry_SYSCALL_64_after_hwframe+0x4b/0x53  Fixes: c0cfa2d8a788 (""vsock: add multi-transports support"") Reviewed-by: Stefano Garzarella <sgarzare@redhat.com> Signed-off-by: Michal Luczaj <mhal@rbox.co> Link: https://patch.msgid.link/20250703-vsock-transports-toctou-v4-2-98f0eb530747@rbox.co Signed-off-by: Jakub Kicinski <kuba@kernel.org>",23,5,28
torvalds/linux,209fd720838aaf1420416494c5505096478156b4,Michal Luczaj,2025-07-03T15:18:18Z,"vsock: Fix transport_{g2h,h2g} TOCTOU  vsock_find_cid() and vsock_dev_do_ioctl() may race with module unload. transport_{g2h,h2g} may become NULL after the NULL check.  Introduce vsock_transport_local_cid() to protect from a potential null-ptr-deref.  KASAN: null-ptr-deref in range [0x0000000000000118-0x000000000000011f] RIP: 0010:vsock_find_cid+0x47/0x90 Call Trace:  __vsock_bind+0x4b2/0x720  vsock_bind+0x90/0xe0  __sys_bind+0x14d/0x1e0  __x64_sys_bind+0x6e/0xc0  do_syscall_64+0x92/0x1c0  entry_SYSCALL_64_after_hwframe+0x4b/0x53  KASAN: null-ptr-deref in range [0x0000000000000118-0x000000000000011f] RIP: 0010:vsock_dev_do_ioctl.isra.0+0x58/0xf0 Call Trace:  __x64_sys_ioctl+0x12d/0x190  do_syscall_64+0x92/0x1c0  entry_SYSCALL_64_after_hwframe+0x4b/0x53  Fixes: c0cfa2d8a788 (""vsock: add multi-transports support"") Suggested-by: Stefano Garzarella <sgarzare@redhat.com> Reviewed-by: Stefano Garzarella <sgarzare@redhat.com> Signed-off-by: Michal Luczaj <mhal@rbox.co> Link: https://patch.msgid.link/20250703-vsock-transports-toctou-v4-1-98f0eb530747@rbox.co Signed-off-by: Jakub Kicinski <kuba@kernel.org>",21,6,27
torvalds/linux,95a234f6affbf51f06338383537ab80d637bb785,Haoxiang Li,2025-07-03T10:01:09Z,"net: ethernet: rtsn: Fix a null pointer dereference in rtsn_probe()  Add check for the return value of rcar_gen4_ptp_alloc() to prevent potential null pointer dereference.  Fixes: b0d3969d2b4d (""net: ethernet: rtsn: Add support for Renesas Ethernet-TSN"") Cc: stable@vger.kernel.org Signed-off-by: Haoxiang Li <haoxiang_li2024@163.com> Reviewed-by: Niklas SÃ¶derlund <niklas.soderlund+renesas@ragnatech.se> Link: https://patch.msgid.link/20250703100109.2541018-1-haoxiang_li2024@163.com Signed-off-by: Jakub Kicinski <kuba@kernel.org>",5,0,5
torvalds/linux,462da827c6e2be59c7b0981ed39fff7a9488d013,Jakub Kicinski,2025-07-08T15:02:52Z,"Merge branch 'allwinner-a523-rename-emac0-to-gmac0'  Chen-Yu Tsai says:  ==================== allwinner: a523: Rename emac0 to gmac0  This small series aims to align the name of the first ethernet controller found on the Allwinner A523 SoC family with the name found in the datasheets. It renames the compatible string and any other references from ""emac0"" to ""gmac0"".  When support of the hardware was introduced, the name chosen was ""EMAC"", which followed previous generations. However the datasheets use the name ""GMAC"" instead, likely because there is another ""GMAC"" based on a newer DWMAC IP. ====================  Link: https://patch.msgid.link/20250628054438.2864220-1-wens@kernel.org Signed-off-by: Jakub Kicinski <kuba@kernel.org>",1,1,2
torvalds/linux,b3603c0466a85bed302e80226950092ceaf09b94,Chen-Yu Tsai,2025-06-28T05:44:37Z,"dt-bindings: net: sun8i-emac: Rename A523 EMAC0 to GMAC0  The datasheets refer to the first Ethernet controller as GMAC0, not EMAC0.  Rename the compatible string to align with the datasheets. A fix for the device trees will be sent separately.  Fixes: 0454b9057e98 (""dt-bindings: net: sun8i-emac: Add A523 EMAC0 compatible"") Signed-off-by: Chen-Yu Tsai <wens@csie.org> Acked-by: Rob Herring (Arm) <robh@kernel.org> Link: https://patch.msgid.link/20250628054438.2864220-2-wens@kernel.org Signed-off-by: Jakub Kicinski <kuba@kernel.org>",1,1,2
torvalds/linux,d3a5f2871adc0c61c61869f37f3e697d97f03d8c,Jiayuan Chen,2025-07-07T05:41:11Z,"tcp: Correct signedness in skb remaining space calculation  Syzkaller reported a bug [1] where sk->sk_forward_alloc can overflow.  When we send data, if an skb exists at the tail of the write queue, the kernel will attempt to append the new data to that skb. However, the code that checks for available space in the skb is flawed: ''' copy = size_goal - skb->len '''  The types of the variables involved are: ''' copy: ssize_t (s64 on 64-bit systems) size_goal: int skb->len: unsigned int '''  Due to C's type promotion rules, the signed size_goal is converted to an unsigned int to match skb->len before the subtraction. The result is an unsigned int.  When this unsigned int result is then assigned to the s64 copy variable, it is zero-extended, preserving its non-negative value. Consequently, copy is always >= 0.  Assume we are sending 2GB of data and size_goal has been adjusted to a value smaller than skb->len. The subtraction will result in copy holding a very large positive integer. In the subsequent logic, this large value is used to update sk->sk_forward_alloc, which can easily cause it to overflow.  The syzkaller reproducer uses TCP_REPAIR to reliably create this condition. However, this can also occur in real-world scenarios. The tcp_bound_to_half_wnd() function can also reduce size_goal to a small value. This would cause the subsequent tcp_wmem_schedule() to set sk->sk_forward_alloc to a value close to INT_MAX. Further memory allocation requests would then cause sk_forward_alloc to wrap around and become negative.  [1]: https://syzkaller.appspot.com/bug?extid=de6565462ab540f50e47  Reported-by: syzbot+de6565462ab540f50e47@syzkaller.appspotmail.com Fixes: 270a1c3de47e (""tcp: Support MSG_SPLICE_PAGES"") Signed-off-by: Jiayuan Chen <jiayuan.chen@linux.dev> Reviewed-by: Eric Dumazet <edumazet@google.com> Reviewed-by: David Howells <dhowells@redhat.com> Link: https://patch.msgid.link/20250707054112.101081-1-jiayuan.chen@linux.dev Signed-off-by: Jakub Kicinski <kuba@kernel.org>",1,1,2
torvalds/linux,5383fc057a0ea18e8eb9a0472ea853c24b59ee5e,Paolo Bonzini,2025-07-08T14:49:19Z,"Merge tag 'kvm-x86-fixes-6.16-rcN' of https://github.com/kvm-x86/linux into HEAD  KVM x86 fixes for 6.16-rcN  - Reject SEV{-ES} intra-host migration if one or more vCPUs are actively   being created so as not to create a non-SEV{-ES} vCPU in an SEV{-ES} VM.  - Use a pre-allocated, per-vCPU buffer for handling de-sparsified vCPU masks   when emulating Hyper-V hypercalls to fix a ""stack frame too large"" issue.  - Allow out-of-range/invalid Xen event channel ports when configuring IRQ   routing to avoid dictating a specific ioctl() ordering to userspace.  - Conditionally reschedule when setting memory attributes to avoid soft   lockups when userspace converts huge swaths of memory to/from private.  - Add back MWAIT as a required feature for the MONITOR/MWAIT selftest.  - Add a missing field in struct sev_data_snp_launch_start that resulted in   the guest-visible workarounds field being filled at the wrong offset.  - Skip non-canonical address when processing Hyper-V PV TLB flushes to avoid   VM-Fail on INVVPID.  - Advertise supported TDX TDVMCALLs to userspace.",117,23,140
torvalds/linux,7e7a7bf212cfd31183bd8e64295607d8e3153a66,Paolo Bonzini,2025-07-08T14:48:21Z,"Merge tag 'kvmarm-fixes-6.16-5' of https://git.kernel.org/pub/scm/linux/kernel/git/kvmarm/kvmarm into HEAD  KVM/arm64 fixes for 6.16, take #  - Remove the last leftovers from the ill-fated FPSIMD host state   mapping at EL2 stage-1  - Fix unexpected advertisement to the guest of unimplemented S2 base   granule sizes",23,34,57
torvalds/linux,8aed168bf7e6b4cbb4b46305f6fe9d8cbd6bd872,Paolo Bonzini,2025-07-08T14:46:40Z,"Merge tag 'kvmarm-fixes-6.16-4' of https://git.kernel.org/pub/scm/linux/kernel/git/kvmarm/kvmarm into HEAD  KVM/arm64 fixes for 6.16, take #4  - Gracefully fail initialising pKVM if the interrupt controller isn't   GICv3  - Also gracefully fail initialising pKVM if the carveout allocation   fails  - Fix the computing of the minimum MMIO range required for the host on   stage-2 fault  - Fix the generation of the GICv3 Maintenance Interrupt in nested mode",23,13,36
torvalds/linux,1afc85deecd32ff0f9972b38ecfbddb8be63143e,Thomas WeiÃschuh,2025-06-30T13:09:35Z,MAINTAINERS: bitmap: add UAPI headers  The UAPI headers have been split out from the kernel-only headers. They maintained as part of the bitmap library.  Signed-off-by: Thomas WeiÃschuh <thomas.weissschuh@linutronix.de> Signed-off-by: Yury Norov (NVIDIA) <yury.norov@gmail.com>,2,0,2
torvalds/linux,70b9c0c11e55167b9552ef395bc00f4920299177,Thomas WeiÃschuh,2025-06-30T13:02:18Z,"uapi: bitops: use UAPI-safe variant of BITS_PER_LONG again (2)  BITS_PER_LONG does not exist in UAPI headers, so can't be used by the UAPI __GENMASK(). Instead __BITS_PER_LONG needs to be used.  When __GENMASK() was introduced in commit 3c7a8e190bc5 (""uapi: introduce uapi-friendly macros for GENMASK""), the code was fine. A broken revert in 1e7933a575ed (""uapi: Revert ""bitops: avoid integer overflow in GENMASK(_ULL)"""") introduced the incorrect usage of BITS_PER_LONG. That was fixed in commit 11fcf368506d (""uapi: bitops: use UAPI-safe variant of BITS_PER_LONG again""). But a broken sync of the kernel headers with the tools/ headers in commit fc92099902fb (""tools headers: Synchronize linux/bits.h with the kernel sources"") undid the fix.  Reapply the fix and while at it also fix the tools header.  Fixes: fc92099902fb (""tools headers: Synchronize linux/bits.h with the kernel sources"") Signed-off-by: Thomas WeiÃschuh <thomas.weissschuh@linutronix.de> Acked-by: Yury Norov (NVIDIA) <yury.norov@gmail.com> Signed-off-by: Yury Norov (NVIDIA) <yury.norov@gmail.com>",4,4,8
torvalds/linux,5300e5e24b8122ba3f60ce455e968379434f322e,Johannes Berg,2025-07-08T07:22:40Z,Merge tag 'mt76-fixes-2025-07-07' of https://github.com/nbd168/wireless  Felix Fietkau says: =================== mt76 fixes for 6.16 ===================  Signed-off-by: Johannes Berg <johannes.berg@intel.com>,301,197,498
torvalds/linux,fee58ca135a7b979c8b75e6d2eac60d695f9209b,Matthew Auld,2025-07-01T10:39:50Z,"drm/xe/bmg: fix compressed VRAM handling  There looks to be an issue in our compression handling when the BO pages are very fragmented, where we choose to skip the identity map and instead fall back to emitting the PTEs by hand when migrating memory, such that we can hopefully do more work per blit operation. However in such a case we need to ensure the src PTEs are correctly tagged with a compression enabled PAT index on dgpu xe2+, otherwise the copy will simply treat the src memory as uncompressed, leading to corruption if the memory was compressed by the user.  To fix this pass along use_comp_pat into emit_pte() on the src side, to indicate that compression should be considered.  v2 (Jonathan): tweak the commit message  Fixes: 523f191cc0c7 (""drm/xe/xe_migrate: Handle migration logic for xe2+ dgfx"") Signed-off-by: Matthew Auld <matthew.auld@intel.com> Cc: Himal Prasad Ghimiray <himal.prasad.ghimiray@intel.com> Cc: Thomas HellstrÃ¶m <thomas.hellstrom@linux.intel.com> Cc: Akshata Jahagirdar <akshata.jahagirdar@intel.com> Cc: <stable@vger.kernel.org> # v6.12+ Reviewed-by: Jonathan Cavitt <jonathan.cavitt@intel.com> Link: https://lore.kernel.org/r/20250701103949.83116-2-matthew.auld@intel.com (cherry picked from commit f7a2fd776e57bd6468644bdecd91ab3aba57ba58) Signed-off-by: Lucas De Marchi <lucas.demarchi@intel.com>",1,1,2
torvalds/linux,daa099fed50a39256feb37d3fac146bf0d74152f,Matthew Brost,2025-07-02T03:58:46Z,"Revert ""drm/xe/xe2: Enable Indirect Ring State support for Xe2""  This reverts commit fe0154cf8222d9e38c60ccc124adb2f9b5272371.  Seeing some unexplained random failures during LRC context switches with indirect ring state enabled. The failures were always there, but the repro rate increased with the addition of WA BB as a separate BO. Commit 3a1edef8f4b5 (""drm/xe: Make WA BB part of LRC BO"") helped to reduce the issues in the context switches, but didn't eliminate them completely.  Indirect ring state is not required for any current features, so disable for now until failures can be root caused.  Cc: stable@vger.kernel.org Fixes: fe0154cf8222 (""drm/xe/xe2: Enable Indirect Ring State support for Xe2"") Signed-off-by: Matthew Brost <matthew.brost@intel.com> Reviewed-by: Lucas De Marchi <lucas.demarchi@intel.com> Link: https://lore.kernel.org/r/20250702035846.3178344-1-matthew.brost@intel.com Signed-off-by: Lucas De Marchi <lucas.demarchi@intel.com> (cherry picked from commit 03d85ab36bcbcbe9dc962fccd3f8e54d7bb93b35) Signed-off-by: Lucas De Marchi <lucas.demarchi@intel.com>",0,1,1
torvalds/linux,c9a95dbe06102cf01afee4cd83ecb29f8d587a72,Matthew Brost,2025-07-02T21:35:11Z,"drm/xe: Allocate PF queue size on pow2 boundary  CIRC_SPACE does not work unless the size argument is a power of 2, allocate PF queue size on power of 2 boundary.  Cc: stable@vger.kernel.org Fixes: 3338e4f90c14 (""drm/xe: Use topology to determine page fault queue size"") Fixes: 29582e0ea75c (""drm/xe: Add page queue multiplier"") Signed-off-by: Matthew Brost <matthew.brost@intel.com> Reviewed-by: Francois Dugast <francois.dugast@intel.com> Link: https://lore.kernel.org/r/20250702213511.3226167-1-matthew.brost@intel.com (cherry picked from commit 491b9783126303755717c0cbde0b08ee59b6abab) Signed-off-by: Lucas De Marchi <lucas.demarchi@intel.com>",1,0,1
torvalds/linux,705a412a367f383430fa34bada387af2e52eb043,Michal Wajdeczko,2025-07-01T22:00:52Z,"drm/xe/pf: Clear all LMTT pages on alloc  Our LMEM buffer objects are not cleared by default on alloc and during VF provisioning we only setup LMTT PTEs for the actually provisioned LMEM range. But beyond that valid range we might leave some stale data that could either point to some other VFs allocations or even to the PF pages.  Explicitly clear all new LMTT page to avoid the risk that a malicious VF would try to exploit that gap.  While around add asserts to catch any undesired PTE overwrites and low-level debug traces to track LMTT PT life-cycle.  Fixes: b1d204058218 (""drm/xe/pf: Introduce Local Memory Translation Table"") Signed-off-by: Michal Wajdeczko <michal.wajdeczko@intel.com> Cc: MichaÅ Winiarski <michal.winiarski@intel.com> Cc: Lukasz Laguna <lukasz.laguna@intel.com> Reviewed-by: MichaÅ Winiarski <michal.winiarski@intel.com> Reviewed-by: Piotr PiÃ³rkowski <piotr.piorkowski@intel.com> Link: https://lore.kernel.org/r/20250701220052.1612-1-michal.wajdeczko@intel.com (cherry picked from commit 3fae6918a3e27cce20ded2551f863fb05d4bef8d) Signed-off-by: Lucas De Marchi <lucas.demarchi@intel.com>",11,0,11
torvalds/linux,80852774ba0adc37dfdc230acceb7b2a90c900d8,Jakub Kicinski,2025-07-08T02:01:28Z,Merge tag 'for-net-2025-07-03' of git://git.kernel.org/pub/scm/linux/kernel/git/bluetooth/bluetooth  Luiz Augusto von Dentz says:  ==================== bluetooth pull request for net:   - hci_sync: Fix not disabling advertising instance  - hci_core: Remove check of BDADDR_ANY in hci_conn_hash_lookup_big_state  - hci_sync: Fix attempting to send HCI_Disconnect to BIS handle  - hci_event: Fix not marking Broadcast Sink BIS as connected  * tag 'for-net-2025-07-03' of git://git.kernel.org/pub/scm/linux/kernel/git/bluetooth/bluetooth:   Bluetooth: hci_event: Fix not marking Broadcast Sink BIS as connected   Bluetooth: hci_sync: Fix attempting to send HCI_Disconnect to BIS handle   Bluetooth: hci_core: Remove check of BDADDR_ANY in hci_conn_hash_lookup_big_state   Bluetooth: hci_sync: Fix not disabling advertising instance ====================  Link: https://patch.msgid.link/20250703160409.1791514-1-luiz.dentz@gmail.com Signed-off-by: Jakub Kicinski <kuba@kernel.org>,6,4,10
torvalds/linux,ffc2c8c4a714df53a715827d6334ab9474424f6a,Ryo Takakura,2025-07-02T09:24:17Z,"net: bcmgenet: Initialize u64 stats seq counter  Initialize u64 stats as it uses seq counter on 32bit machines as suggested by lockdep below.  [    1.830953][    T1] INFO: trying to register non-static key. [    1.830993][    T1] The code is fine but needs lockdep annotation, or maybe [    1.831027][    T1] you didn't initialize this object before use? [    1.831057][    T1] turning off the locking correctness validator. [    1.831090][    T1] CPU: 1 UID: 0 PID: 1 Comm: swapper/0 Tainted: G        W           6.16.0-rc2-v7l+ #1 PREEMPT [    1.831097][    T1] Tainted: [W]=WARN [    1.831099][    T1] Hardware name: BCM2711 [    1.831101][    T1] Call trace: [    1.831104][    T1]  unwind_backtrace from show_stack+0x18/0x1c [    1.831120][    T1]  show_stack from dump_stack_lvl+0x8c/0xcc [    1.831129][    T1]  dump_stack_lvl from register_lock_class+0x9e8/0x9fc [    1.831141][    T1]  register_lock_class from __lock_acquire+0x420/0x22c0 [    1.831154][    T1]  __lock_acquire from lock_acquire+0x130/0x3f8 [    1.831166][    T1]  lock_acquire from bcmgenet_get_stats64+0x4a4/0x4c8 [    1.831176][    T1]  bcmgenet_get_stats64 from dev_get_stats+0x4c/0x408 [    1.831184][    T1]  dev_get_stats from rtnl_fill_stats+0x38/0x120 [    1.831193][    T1]  rtnl_fill_stats from rtnl_fill_ifinfo+0x7f8/0x1890 [    1.831203][    T1]  rtnl_fill_ifinfo from rtmsg_ifinfo_build_skb+0xd0/0x138 [    1.831214][    T1]  rtmsg_ifinfo_build_skb from rtmsg_ifinfo+0x48/0x8c [    1.831225][    T1]  rtmsg_ifinfo from register_netdevice+0x8c0/0x95c [    1.831237][    T1]  register_netdevice from register_netdev+0x28/0x40 [    1.831247][    T1]  register_netdev from bcmgenet_probe+0x690/0x6bc [    1.831255][    T1]  bcmgenet_probe from platform_probe+0x64/0xbc [    1.831263][    T1]  platform_probe from really_probe+0xd0/0x2d4 [    1.831269][    T1]  really_probe from __driver_probe_device+0x90/0x1a4 [    1.831273][    T1]  __driver_probe_device from driver_probe_device+0x38/0x11c [    1.831278][    T1]  driver_probe_device from __driver_attach+0x9c/0x18c [    1.831282][    T1]  __driver_attach from bus_for_each_dev+0x84/0xd4 [    1.831291][    T1]  bus_for_each_dev from bus_add_driver+0xd4/0x1f4 [    1.831303][    T1]  bus_add_driver from driver_register+0x88/0x120 [    1.831312][    T1]  driver_register from do_one_initcall+0x78/0x360 [    1.831320][    T1]  do_one_initcall from kernel_init_freeable+0x2bc/0x314 [    1.831331][    T1]  kernel_init_freeable from kernel_init+0x1c/0x144 [    1.831339][    T1]  kernel_init from ret_from_fork+0x14/0x20 [    1.831344][    T1] Exception stack(0xf082dfb0 to 0xf082dff8) [    1.831349][    T1] dfa0:                                     00000000 00000000 00000000 00000000 [    1.831353][    T1] dfc0: 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 [    1.831356][    T1] dfe0: 00000000 00000000 00000000 00000000 00000013 00000000  Fixes: 59aa6e3072aa (""net: bcmgenet: switch to use 64bit statistics"") Reviewed-by: Florian Fainelli <florian.fainelli@broadcom.com> Signed-off-by: Ryo Takakura <ryotkkr98@gmail.com> Reviewed-by: Simon Horman <horms@kernel.org> Link: https://patch.msgid.link/20250702092417.46486-1-ryotkkr98@gmail.com Signed-off-by: Jakub Kicinski <kuba@kernel.org>",6,0,6
torvalds/linux,667eeab4999e981c96b447a4df5f20bdf5c26f13,Kuniyuki Iwashima,2025-07-02T01:43:40Z,"tipc: Fix use-after-free in tipc_conn_close().  syzbot reported a null-ptr-deref in tipc_conn_close() during netns dismantle. [0]  tipc_topsrv_stop() iterates tipc_net(net)->topsrv->conn_idr and calls tipc_conn_close() for each tipc_conn.  The problem is that tipc_conn_close() is called after releasing the IDR lock.  At the same time, there might be tipc_conn_recv_work() running and it could call tipc_conn_close() for the same tipc_conn and release its last ->kref.  Once we release the IDR lock in tipc_topsrv_stop(), there is no guarantee that the tipc_conn is alive.  Let's hold the ref before releasing the lock and put the ref after tipc_conn_close() in tipc_topsrv_stop().  [0]: BUG: KASAN: use-after-free in tipc_conn_close+0x122/0x140 net/tipc/topsrv.c:165 Read of size 8 at addr ffff888099305a08 by task kworker/u4:3/435  CPU: 0 PID: 435 Comm: kworker/u4:3 Not tainted 4.19.204-syzkaller #0 Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011 Workqueue: netns cleanup_net Call Trace:  __dump_stack lib/dump_stack.c:77 [inline]  dump_stack+0x1fc/0x2ef lib/dump_stack.c:118  print_address_description.cold+0x54/0x219 mm/kasan/report.c:256  kasan_report_error.cold+0x8a/0x1b9 mm/kasan/report.c:354  kasan_report mm/kasan/report.c:412 [inline]  __asan_report_load8_noabort+0x88/0x90 mm/kasan/report.c:433  tipc_conn_close+0x122/0x140 net/tipc/topsrv.c:165  tipc_topsrv_stop net/tipc/topsrv.c:701 [inline]  tipc_topsrv_exit_net+0x27b/0x5c0 net/tipc/topsrv.c:722  ops_exit_list+0xa5/0x150 net/core/net_namespace.c:153  cleanup_net+0x3b4/0x8b0 net/core/net_namespace.c:553  process_one_work+0x864/0x1570 kernel/workqueue.c:2153  worker_thread+0x64c/0x1130 kernel/workqueue.c:2296  kthread+0x33f/0x460 kernel/kthread.c:259  ret_from_fork+0x24/0x30 arch/x86/entry/entry_64.S:415  Allocated by task 23:  kmem_cache_alloc_trace+0x12f/0x380 mm/slab.c:3625  kmalloc include/linux/slab.h:515 [inline]  kzalloc include/linux/slab.h:709 [inline]  tipc_conn_alloc+0x43/0x4f0 net/tipc/topsrv.c:192  tipc_topsrv_accept+0x1b5/0x280 net/tipc/topsrv.c:470  process_one_work+0x864/0x1570 kernel/workqueue.c:2153  worker_thread+0x64c/0x1130 kernel/workqueue.c:2296  kthread+0x33f/0x460 kernel/kthread.c:259  ret_from_fork+0x24/0x30 arch/x86/entry/entry_64.S:415  Freed by task 23:  __cache_free mm/slab.c:3503 [inline]  kfree+0xcc/0x210 mm/slab.c:3822  tipc_conn_kref_release net/tipc/topsrv.c:150 [inline]  kref_put include/linux/kref.h:70 [inline]  conn_put+0x2cd/0x3a0 net/tipc/topsrv.c:155  process_one_work+0x864/0x1570 kernel/workqueue.c:2153  worker_thread+0x64c/0x1130 kernel/workqueue.c:2296  kthread+0x33f/0x460 kernel/kthread.c:259  ret_from_fork+0x24/0x30 arch/x86/entry/entry_64.S:415  The buggy address belongs to the object at ffff888099305a00  which belongs to the cache kmalloc-512 of size 512 The buggy address is located 8 bytes inside of  512-byte region [ffff888099305a00, ffff888099305c00) The buggy address belongs to the page: page:ffffea000264c140 count:1 mapcount:0 mapping:ffff88813bff0940 index:0x0 flags: 0xfff00000000100(slab) raw: 00fff00000000100 ffffea00028b6b88 ffffea0002cd2b08 ffff88813bff0940 raw: 0000000000000000 ffff888099305000 0000000100000006 0000000000000000 page dumped because: kasan: bad access detected  Memory state around the buggy address:  ffff888099305900: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb  ffff888099305980: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc >ffff888099305a00: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb                       ^  ffff888099305a80: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb  ffff888099305b00: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb  Fixes: c5fa7b3cf3cb (""tipc: introduce new TIPC server infrastructure"") Reported-by: syzbot+d333febcf8f4bc5f6110@syzkaller.appspotmail.com Closes: https://syzkaller.appspot.com/bug?extid=27169a847a70550d17be Signed-off-by: Kuniyuki Iwashima <kuniyu@google.com> Reviewed-by: Tung Nguyen <tung.quang.nguyen@est.tech> Link: https://patch.msgid.link/20250702014350.692213-1-kuniyu@google.com Signed-off-by: Jakub Kicinski <kuba@kernel.org>",2,0,2
torvalds/linux,eadb9fa7f775e39c2bdd9a43a947f03e86f9e37b,Linus Torvalds,2025-07-08T01:22:25Z,Merge tag 'efi-fixes-for-v6.16-1' of git://git.kernel.org/pub/scm/linux/kernel/git/efi/efi  Pull EFI fixes from Ard Biesheuvel:   - Drop preprocessor macros in zboot.lds which is not preprocessed   - Fix zboot .data section size and raw size when SBAT is enabled  * tag 'efi-fixes-for-v6.16-1' of git://git.kernel.org/pub/scm/linux/kernel/git/efi/efi:   efi: Fix .data section size calculations when .sbat is present   efi: Drop preprocessor directives from zboot.lds,2,4,6
torvalds/linux,6e9128ff9d8113ef208e5ec82573b96ead100072,Linus Torvalds,2025-07-08T00:08:36Z,"Merge tag 'tsa_x86_bugs_for_6.16' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip  Pull CPU speculation fixes from Borislav Petkov:  ""Add the mitigation logic for Transient Scheduler Attacks (TSA)    TSA are new aspeculative side channel attacks related to the execution   timing of instructions under specific microarchitectural conditions.   In some cases, an attacker may be able to use this timing information   to infer data from other contexts, resulting in information leakage.    Add the usual controls of the mitigation and integrate it into the   existing speculation bugs infrastructure in the kernel""  * tag 'tsa_x86_bugs_for_6.16' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip:   x86/process: Move the buffer clearing before MONITOR   x86/microcode/AMD: Add TSA microcode SHAs   KVM: SVM: Advertise TSA CPUID bits to guests   x86/bugs: Add a Transient Scheduler Attacks mitigation   x86/bugs: Rename MDS machinery to something more generic",418,53,471
torvalds/linux,1e3b66e326015f77bc4b36976bebeedc2ac0f588,Stefano Garzarella,2025-07-03T11:23:29Z,"vsock: fix `vsock_proto` declaration  From commit 634f1a7110b4 (""vsock: support sockmap""), `struct proto vsock_proto`, defined in af_vsock.c, is not static anymore, since it's used by vsock_bpf.c.  If CONFIG_BPF_SYSCALL is not defined, `make C=2` will print a warning:     $ make O=build C=2 W=1 net/vmw_vsock/       ...       CC [M]  net/vmw_vsock/af_vsock.o       CHECK   ../net/vmw_vsock/af_vsock.c     ../net/vmw_vsock/af_vsock.c:123:14: warning: symbol 'vsock_proto' was not declared. Should it be static?  Declare `vsock_proto` regardless of CONFIG_BPF_SYSCALL, since it's defined in af_vsock.c, which is built regardless of CONFIG_BPF_SYSCALL.  Fixes: 634f1a7110b4 (""vsock: support sockmap"") Signed-off-by: Stefano Garzarella <sgarzare@redhat.com> Acked-by: Michael S. Tsirkin <mst@redhat.com> Link: https://patch.msgid.link/20250703112329.28365-1-sgarzare@redhat.com Signed-off-by: Jakub Kicinski <kuba@kernel.org>",1,1,2
torvalds/linux,ae8f160e7eb24240a2a79fc4c815c6a0d4ee16cc,Kuniyuki Iwashima,2025-07-04T05:48:18Z,"netlink: Fix wraparounds of sk->sk_rmem_alloc.  Netlink has this pattern in some places    if (atomic_read(&sk->sk_rmem_alloc) > sk->sk_rcvbuf)   	atomic_add(skb->truesize, &sk->sk_rmem_alloc);  , which has the same problem fixed by commit 5a465a0da13e (""udp: Fix multiple wraparounds of sk->sk_rmem_alloc."").  For example, if we set INT_MAX to SO_RCVBUFFORCE, the condition is always false as the two operands are of int.  Then, a single socket can eat as many skb as possible until OOM happens, and we can see multiple wraparounds of sk->sk_rmem_alloc.  Let's fix it by using atomic_add_return() and comparing the two variables as unsigned int.  Before:   [root@fedora ~]# ss -f netlink   Recv-Q      Send-Q Local Address:Port                Peer Address:Port   -1668710080 0               rtnl:nl_wraparound/293               *  After:   [root@fedora ~]# ss -f netlink   Recv-Q     Send-Q Local Address:Port                Peer Address:Port   2147483072 0               rtnl:nl_wraparound/290               *   ^   `--- INT_MAX - 576  Fixes: 1da177e4c3f4 (""Linux-2.6.12-rc2"") Reported-by: Jason Baron <jbaron@akamai.com> Closes: https://lore.kernel.org/netdev/cover.1750285100.git.jbaron@akamai.com/ Signed-off-by: Kuniyuki Iwashima <kuniyu@google.com> Link: https://patch.msgid.link/20250704054824.1580222-1-kuniyu@google.com Signed-off-by: Jakub Kicinski <kuba@kernel.org>",49,32,81
torvalds/linux,4e2bba30b16935d18e59d137f607f8e10b6fda87,Jakub Kicinski,2025-07-07T23:43:51Z,"Merge branch 'fix-qca808x-wol-issue'  Luo Jie says:  ==================== Fix QCA808X WoL Issue  Restore WoL (Wake-on-LAN) enablement via MMD3 register 0x8012 BIT5 for the QCA808X PHY. This change resolves the issue where WoL functionality was not working due to its unintended removal in a previous commit.  Refactor at8031_set_wol() into a shared library to enable reuse of the Wake-on-LAN (WoL) functionality by the AT8031, QCA807X and QCA808X PHY drivers. ====================  Link: https://patch.msgid.link/20250704-qcom_phy_wol_support-v1-0-053342b1538d@quicinc.com Signed-off-by: Jakub Kicinski <kuba@kernel.org>",31,28,59
torvalds/linux,4ab9ada765b7acb5cd02fe27632ec2586b7868ee,Luo Jie,2025-07-04T05:31:14Z,"net: phy: qcom: qca808x: Fix WoL issue by utilizing at8031_set_wol()  The previous commit unintentionally removed the code responsible for enabling WoL via MMD3 register 0x8012 BIT5. As a result, Wake-on-LAN (WoL) support for the QCA808X PHY is no longer functional.  The WoL (Wake-on-LAN) feature for the QCA808X PHY is enabled via MMD3 register 0x8012, BIT5. This implementation is aligned with the approach used in at8031_set_wol().  Fixes: e58f30246c35 (""net: phy: at803x: fix the wol setting functions"") Signed-off-by: Luo Jie <quic_luoj@quicinc.com> Reviewed-by: Maxime Chevallier <maxime.chevallier@bootlin.com> Link: https://patch.msgid.link/20250704-qcom_phy_wol_support-v1-2-053342b1538d@quicinc.com Signed-off-by: Jakub Kicinski <kuba@kernel.org>",1,1,2
torvalds/linux,e31cf3cce2102af984656fed6e2254cbdd46da02,Luo Jie,2025-07-04T05:31:13Z,"net: phy: qcom: move the WoL function to shared library  Move the WoL (Wake-on-LAN) functionality to a shared library to enable its reuse by the QCA808X PHY driver, incorporating support for WoL functionality similar to the implementation in at8031_set_wol().  Reviewed-by: Maxime Chevallier <maxime.chevallier@bootlin.com> Signed-off-by: Luo Jie <quic_luoj@quicinc.com> Link: https://patch.msgid.link/20250704-qcom_phy_wol_support-v1-1-053342b1538d@quicinc.com Signed-off-by: Jakub Kicinski <kuba@kernel.org>",30,27,57
torvalds/linux,4cdf1bdd45ac78a088773722f009883af30ad318,Pankaj Raghav,2025-07-04T09:21:34Z,"block: reject bs > ps block devices when THP is disabled  If THP is disabled and when a block device with logical block size > page size is present, the following null ptr deref panic happens during boot:  [   [13.2 mK  AOSAN: null-ptr-deref in range [0x0000000000000000-0x0000000000K0 0 0[07] [   13.017749] RIP: 0010:create_empty_buffers+0x3b/0x380 <snip> [   13.025448] Call Trace: [   13.025692]  <TASK> [   13.025895]  block_read_full_folio+0x610/0x780 [   13.026379]  ? __pfx_blkdev_get_block+0x10/0x10 [   13.027008]  ? __folio_batch_add_and_move+0x1fa/0x2b0 [   13.027548]  ? __pfx_blkdev_read_folio+0x10/0x10 [   13.028080]  filemap_read_folio+0x9b/0x200 [   13.028526]  ? __pfx_filemap_read_folio+0x10/0x10 [   13.029030]  ? __filemap_get_folio+0x43/0x620 [   13.029497]  do_read_cache_folio+0x155/0x3b0 [   13.029962]  ? __pfx_blkdev_read_folio+0x10/0x10 [   13.030381]  read_part_sector+0xb7/0x2a0 [   13.030805]  read_lba+0x174/0x2c0 <snip> [   13.045348]  nvme_scan_ns+0x684/0x850 [nvme_core] [   13.045858]  ? __pfx_nvme_scan_ns+0x10/0x10 [nvme_core] [   13.046414]  ? _raw_spin_unlock+0x15/0x40 [   13.046843]  ? __switch_to+0x523/0x10a0 [   13.047253]  ? kvm_clock_get_cycles+0x14/0x30 [   13.047742]  ? __pfx_nvme_scan_ns_async+0x10/0x10 [nvme_core] [   13.048353]  async_run_entry_fn+0x96/0x4f0 [   13.048787]  process_one_work+0x667/0x10a0 [   13.049219]  worker_thread+0x63c/0xf60  As large folio support depends on THP, only allow bs > ps block devices if THP is enabled.  Fixes: 47dd67532303 (""block/bdev: lift block size restrictions to 64k"") Signed-off-by: Pankaj Raghav <p.raghav@samsung.com> Reviewed-by: Luis Chamberlain <mcgrof@kernel.org> Link: https://lore.kernel.org/r/20250704092134.289491-1-p.raghav@samsung.com Signed-off-by: Jens Axboe <axboe@kernel.dk>",5,0,5
torvalds/linux,aa9552438ebf015fc5f9f890dbfe39f0c53cf37e,Zheng Qixing,2025-06-12T13:24:05Z,"nbd: fix uaf in nbd_genl_connect() error path  There is a use-after-free issue in nbd:  block nbd6: Receive control failed (result -104) block nbd6: shutting down sockets ================================================================== BUG: KASAN: slab-use-after-free in recv_work+0x694/0xa80 drivers/block/nbd.c:1022 Write of size 4 at addr ffff8880295de478 by task kworker/u33:0/67  CPU: 2 UID: 0 PID: 67 Comm: kworker/u33:0 Not tainted 6.15.0-rc5-syzkaller-00123-g2c89c1b655c0 #0 PREEMPT(full) Hardware name: QEMU Standard PC (Q35 + ICH9, 2009), BIOS 1.16.3-debian-1.16.3-2~bpo12+1 04/01/2014 Workqueue: nbd6-recv recv_work Call Trace:  <TASK>  __dump_stack lib/dump_stack.c:94 [inline]  dump_stack_lvl+0x116/0x1f0 lib/dump_stack.c:120  print_address_description mm/kasan/report.c:408 [inline]  print_report+0xc3/0x670 mm/kasan/report.c:521  kasan_report+0xe0/0x110 mm/kasan/report.c:634  check_region_inline mm/kasan/generic.c:183 [inline]  kasan_check_range+0xef/0x1a0 mm/kasan/generic.c:189  instrument_atomic_read_write include/linux/instrumented.h:96 [inline]  atomic_dec include/linux/atomic/atomic-instrumented.h:592 [inline]  recv_work+0x694/0xa80 drivers/block/nbd.c:1022  process_one_work+0x9cc/0x1b70 kernel/workqueue.c:3238  process_scheduled_works kernel/workqueue.c:3319 [inline]  worker_thread+0x6c8/0xf10 kernel/workqueue.c:3400  kthread+0x3c2/0x780 kernel/kthread.c:464  ret_from_fork+0x45/0x80 arch/x86/kernel/process.c:153  ret_from_fork_asm+0x1a/0x30 arch/x86/entry/entry_64.S:245  </TASK>  nbd_genl_connect() does not properly stop the device on certain error paths after nbd_start_device() has been called. This causes the error path to put nbd->config while recv_work continue to use the config after putting it, leading to use-after-free in recv_work.  This patch moves nbd_start_device() after the backend file creation.  Reported-by: syzbot+48240bab47e705c53126@syzkaller.appspotmail.com Closes: https://lore.kernel.org/all/68227a04.050a0220.f2294.00b5.GAE@google.com/T/ Fixes: 6497ef8df568 (""nbd: provide a way for userspace processes to identify device backends"") Signed-off-by: Zheng Qixing <zhengqixing@huawei.com> Reviewed-by: Yu Kuai <yukuai3@huawei.com> Link: https://lore.kernel.org/r/20250612132405.364904-1-zhengqixing@huaweicloud.com Signed-off-by: Jens Axboe <axboe@kernel.dk>",3,3,6
torvalds/linux,eb8352ee2d1e70f916fac02094dca2b435076fa4,Leon Yen,2025-06-25T07:37:20Z,"wifi: mt76: mt792x: Limit the concurrent STA and SoftAP to operate on the same channel  Due to the lack of NoA(Notice of Absence) mechanism in SoftAP mode, it is inappropriate to allow concurrent SoftAP and STA to operate on the different channels.  This patch restricts the concurrent SoftAP and STA to be setup on the same channel only.  Signed-off-by: Leon Yen <leon.yen@mediatek.com> Signed-off-by: Ming Yen Hsieh <mingyen.hsieh@mediatek.com> Link: https://patch.msgid.link/20250625073720.1385210-1-mingyen.hsieh@mediatek.com Signed-off-by: Felix Fietkau <nbd@nbd.name>",27,5,32
torvalds/linux,03ee8f73801a8f46d83dfc2bf73fb9ffa5a21602,Henry Martin,2025-06-25T12:49:01Z,"wifi: mt76: mt7925: Fix null-ptr-deref in mt7925_thermal_init()  devm_kasprintf() returns NULL on error. Currently, mt7925_thermal_init() does not check for this case, which results in a NULL pointer dereference.  Add NULL check after devm_kasprintf() to prevent this issue.  Fixes: 396e41a74a88 (""wifi: mt76: mt7925: support temperature sensor"") Signed-off-by: Henry Martin <bsdhenryma@tencent.com> Reviewed-by: AngeloGioacchino Del Regno <angelogioacchino.delregno@collabora.com> Link: https://patch.msgid.link/20250625124901.1839832-1-bsdhenryma@tencent.com Signed-off-by: Felix Fietkau <nbd@nbd.name>",2,0,2
torvalds/linux,dedf2ec30fe417d181490896adf89cd6b9885b23,Felix Fietkau,2025-07-07T15:47:02Z,"wifi: mt76: fix queue assignment for deauth packets  When running in AP mode and deauthenticating a client that's in powersave mode, the disassoc/deauth packet can get stuck in a tx queue along with other buffered frames. This can fill up hardware queues with frames that are only released after the WTBL slot is reused for another client.  Fix this by moving deauth packets to the ALTX queue.  Reported-by: Chad Monroe <chad.monroe@adtran.com> Link: https://patch.msgid.link/20250707154702.1726-2-nbd@nbd.name Signed-off-by: Felix Fietkau <nbd@nbd.name>",2,1,3
torvalds/linux,dc66a129adf1f25e944d0b93cd2df2ee0f0bd4d6,Felix Fietkau,2025-07-07T15:47:01Z,"wifi: mt76: add a wrapper for wcid access with validation  Several places use rcu_dereference to get a wcid entry without validating if the index exceeds the array boundary. Fix this by using a helper function, which handles validation.  Link: https://patch.msgid.link/20250707154702.1726-1-nbd@nbd.name Signed-off-by: Felix Fietkau <nbd@nbd.name>",41,68,109
torvalds/linux,7035a082348acf1d43ffb9ff735899f8e3863f8f,Deren Wu,2025-05-25T06:11:22Z,"wifi: mt76: mt7921: prevent decap offload config before STA initialization  The decap offload configuration should only be applied after the STA has been successfully initialized. Attempting to configure it earlier can lead to corruption of the MAC configuration in the chip's hardware state.  Add an early check for `msta->deflink.wcid.sta` to ensure the station peer is properly initialized before proceeding with decapsulation offload configuration.  Cc: stable@vger.kernel.org Fixes: 24299fc869f7 (""mt76: mt7921: enable rx header traslation offload"") Signed-off-by: Deren Wu <deren.wu@mediatek.com> Link: https://patch.msgid.link/f23a72ba7a3c1ad38ba9e13bb54ef21d6ef44ffb.1748149855.git.deren.wu@mediatek.com Signed-off-by: Felix Fietkau <nbd@nbd.name>",3,0,3
torvalds/linux,35ad47c0b3da04b00b19a8b9ed5632e2f2520472,Deren Wu,2025-05-25T06:11:21Z,"wifi: mt76: mt7925: prevent NULL pointer dereference in mt7925_sta_set_decap_offload()  Add a NULL check for msta->vif before accessing its members to prevent a kernel panic in AP mode deployment. This also fix the issue reported in [1].  The crash occurs when this function is triggered before the station is fully initialized. The call trace shows a page fault at mt7925_sta_set_decap_offload() due to accessing resources when msta->vif is NULL.  Fix this by adding an early return if msta->vif is NULL and also check wcid.sta is ready. This ensures we only proceed with decap offload configuration when the station's state is properly initialized.  [14739.655703] Unable to handle kernel paging request at virtual address ffffffffffffffa0 [14739.811820] CPU: 0 UID: 0 PID: 895854 Comm: hostapd Tainted: G [14739.821394] Tainted: [C]=CRAP, [O]=OOT_MODULE [14739.825746] Hardware name: Raspberry Pi 4 Model B Rev 1.1 (DT) [14739.831577] pstate: 60000005 (nZCv daif -PAN -UAO -TCO -DIT -SSBS BTYPE=--) [14739.838538] pc : mt7925_sta_set_decap_offload+0xc0/0x1b8 [mt7925_common] [14739.845271] lr : mt7925_sta_set_decap_offload+0x58/0x1b8 [mt7925_common] [14739.851985] sp : ffffffc085efb500 [14739.855295] x29: ffffffc085efb500 x28: 0000000000000000 x27: ffffff807803a158 [14739.862436] x26: ffffff8041ececb8 x25: 0000000000000001 x24: 0000000000000001 [14739.869577] x23: 0000000000000001 x22: 0000000000000008 x21: ffffff8041ecea88 [14739.876715] x20: ffffff8041c19ca0 x19: ffffff8078031fe0 x18: 0000000000000000 [14739.883853] x17: 0000000000000000 x16: ffffffe2aeac1110 x15: 000000559da48080 [14739.890991] x14: 0000000000000001 x13: 0000000000000000 x12: 0000000000000000 [14739.898130] x11: 0a10020001008e88 x10: 0000000000001a50 x9 : ffffffe26457bfa0 [14739.905269] x8 : ffffff8042013bb0 x7 : ffffff807fb6cbf8 x6 : dead000000000100 [14739.912407] x5 : dead000000000122 x4 : ffffff80780326c8 x3 : 0000000000000000 [14739.919546] x2 : 0000000000000000 x1 : 0000000000000000 x0 : ffffff8041ececb8 [14739.926686] Call trace: [14739.929130]  mt7925_sta_set_decap_offload+0xc0/0x1b8 [mt7925_common] [14739.935505]  ieee80211_check_fast_rx+0x19c/0x510 [mac80211] [14739.941344]  _sta_info_move_state+0xe4/0x510 [mac80211] [14739.946860]  sta_info_move_state+0x1c/0x30 [mac80211] [14739.952116]  sta_apply_auth_flags.constprop.0+0x90/0x1b0 [mac80211] [14739.958708]  sta_apply_parameters+0x234/0x5e0 [mac80211] [14739.964332]  ieee80211_add_station+0xdc/0x190 [mac80211] [14739.969950]  nl80211_new_station+0x46c/0x670 [cfg80211] [14739.975516]  genl_family_rcv_msg_doit+0xdc/0x150 [14739.980158]  genl_rcv_msg+0x218/0x298 [14739.983830]  netlink_rcv_skb+0x64/0x138 [14739.987670]  genl_rcv+0x40/0x60 [14739.990816]  netlink_unicast+0x314/0x380 [14739.994742]  netlink_sendmsg+0x198/0x3f0 [14739.998664]  __sock_sendmsg+0x64/0xc0 [14740.002324]  ____sys_sendmsg+0x260/0x298 [14740.006242]  ___sys_sendmsg+0xb4/0x110  Cc: stable@vger.kernel.org Link: https://github.com/morrownr/USB-WiFi/issues/603 [1] Fixes: b859ad65309a (""wifi: mt76: mt7925: add link handling in mt7925_sta_set_decap_offload"") Signed-off-by: Deren Wu <deren.wu@mediatek.com> Link: https://patch.msgid.link/35aedbffa050e98939264300407a52ba4e236d52.1748149855.git.deren.wu@mediatek.com Signed-off-by: Felix Fietkau <nbd@nbd.name>",6,0,6
torvalds/linux,9f8f4a51f3c133030ac5a4bcd4759ae2b947b7bd,Ming Yen Hsieh,2025-06-16T06:36:49Z,"wifi: mt76: mt7925: fix incorrect scan probe IE handling for hw_scan  The IEs should be processed and filled into the command tlv separately according to each band.  Cc: stable@vger.kernel.org Fixes: c948b5da6bbe (""wifi: mt76: mt7925: add Mediatek Wi-Fi7 driver for mt7925 chips"") Signed-off-by: Ming Yen Hsieh <mingyen.hsieh@mediatek.com> Link: https://patch.msgid.link/20250616063649.1100503-1-mingyen.hsieh@mediatek.com Signed-off-by: Felix Fietkau <nbd@nbd.name>",63,19,82
torvalds/linux,c701574c54121af2720648572efbfe77564652d1,Michael Lo,2025-06-12T06:20:46Z,"wifi: mt76: mt7925: fix invalid array index in ssid assignment during hw scan  Update the destination index to use 'n_ssids', which is incremented only when a valid SSID is present. Previously, both mt76_connac_mcu_hw_scan() and mt7925_mcu_hw_scan() used the loop index 'i' for the destination array, potentially leaving gaps if any source SSIDs had zero length.  Cc: stable@vger.kernel.org Fixes: c948b5da6bbe (""wifi: mt76: mt7925: add Mediatek Wi-Fi7 driver for mt7925 chips"") Signed-off-by: Michael Lo <michael.lo@mediatek.com> Signed-off-by: Ming Yen Hsieh <mingyen.hsieh@mediatek.com> Link: https://patch.msgid.link/20250612062046.160598-1-mingyen.hsieh@mediatek.com Signed-off-by: Felix Fietkau <nbd@nbd.name>",4,4,8
torvalds/linux,d20de55332e92f9e614c34783c00bb6ce2fec067,Ming Yen Hsieh,2025-06-12T06:09:31Z,"wifi: mt76: mt7925: fix the wrong config for tx interrupt  MT_INT_TX_DONE_MCU_WM may cause tx interrupt to be mishandled during a reset failure, leading to the reset process failing. By using MT_INT_TX_DONE_MCU instead of MT_INT_TX_DONE_MCU_WM, the handling of tx interrupt is improved.  Cc: stable@vger.kernel.org Fixes: c948b5da6bbe (""wifi: mt76: mt7925: add Mediatek Wi-Fi7 driver for mt7925 chips"") Signed-off-by: Ming Yen Hsieh <mingyen.hsieh@mediatek.com> Link: https://patch.msgid.link/20250612060931.135635-1-mingyen.hsieh@mediatek.com Signed-off-by: Felix Fietkau <nbd@nbd.name>",1,1,2
torvalds/linux,71532576f41e5b0ec967a82ed49d5dfb1027ccdb,Lorenzo Bianconi,2025-06-05T11:14:20Z,"wifi: mt76: Remove RCU section in mt7996_mac_sta_rc_work()  Since mt7996_mcu_add_rate_ctrl() and mt7996_mcu_set_fixed_field() can't run in atomic context, move RCU critical section in mt7996_mcu_add_rate_ctrl() and mt7996_mcu_set_fixed_field(). This patch fixes a 'sleep while atomic' issue in mt7996_mac_sta_rc_work().  Fixes: 0762bdd30279 (""wifi: mt76: mt7996: rework mt7996_mac_sta_rc_work to support MLO"") Signed-off-by: Lorenzo Bianconi <lorenzo@kernel.org> Tested-by: Ben Greear <greearb@candelatech.com> Link: https://patch.msgid.link/20250605-mt7996-sleep-while-atomic-v1-5-d46d15f9203c@kernel.org Signed-off-by: Felix Fietkau <nbd@nbd.name>",7,28,35
torvalds/linux,3dd6f67c669c860b93ff533f790f23ee1cb36f25,Lorenzo Bianconi,2025-06-05T11:14:19Z,"wifi: mt76: Move RCU section in mt7996_mcu_add_rate_ctrl()  Since mt76_mcu_skb_send_msg() routine can't be executed in atomic context, move RCU section in mt7996_mcu_add_rate_ctrl() and execute mt76_mcu_skb_send_msg() in non-atomic context. This is a preliminary patch to fix a 'sleep while atomic' issue in mt7996_mac_sta_rc_work().  Fixes: 0762bdd30279 (""wifi: mt76: mt7996: rework mt7996_mac_sta_rc_work to support MLO"") Signed-off-by: Lorenzo Bianconi <lorenzo@kernel.org> Link: https://patch.msgid.link/20250605-mt7996-sleep-while-atomic-v1-4-d46d15f9203c@kernel.org Signed-off-by: Felix Fietkau <nbd@nbd.name>",45,27,72
torvalds/linux,28d519d0d493a8cf3f8ca01f10d962c56cec1825,Lorenzo Bianconi,2025-06-05T11:14:18Z,"wifi: mt76: Move RCU section in mt7996_mcu_add_rate_ctrl_fixed()  Since mt7996_mcu_set_fixed_field() can't be executed in a RCU critical section, move RCU section in mt7996_mcu_add_rate_ctrl_fixed() and run mt7996_mcu_set_fixed_field() in non-atomic context. This is a preliminary patch to fix a 'sleep while atomic' issue in mt7996_mac_sta_rc_work().  Fixes: 0762bdd30279 (""wifi: mt76: mt7996: rework mt7996_mac_sta_rc_work to support MLO"") Signed-off-by: Lorenzo Bianconi <lorenzo@kernel.org> Link: https://patch.msgid.link/20250605-mt7996-sleep-while-atomic-v1-3-d46d15f9203c@kernel.org Signed-off-by: Felix Fietkau <nbd@nbd.name>",57,29,86
torvalds/linux,c772cd726eea6fe8fb81d2aeeacb18cecff73a7b,Lorenzo Bianconi,2025-06-05T11:14:17Z,"wifi: mt76: Move RCU section in mt7996_mcu_set_fixed_field()  Since mt76_mcu_skb_send_msg() routine can't be executed in atomic context, move RCU section in mt7996_mcu_set_fixed_field() and execute mt76_mcu_skb_send_msg() in non-atomic context. This is a preliminary patch to fix a 'sleep while atomic' issue in mt7996_mac_sta_rc_work().  Fixes: 0762bdd30279 (""wifi: mt76: mt7996: rework mt7996_mac_sta_rc_work to support MLO"") Signed-off-by: Lorenzo Bianconi <lorenzo@kernel.org> Link: https://patch.msgid.link/20250605-mt7996-sleep-while-atomic-v1-2-d46d15f9203c@kernel.org Signed-off-by: Felix Fietkau <nbd@nbd.name>",57,29,86
torvalds/linux,a0c5eac9181025b6d65ff25c203a7f10274f80c1,Lorenzo Bianconi,2025-06-05T11:14:16Z,"wifi: mt76: Assume __mt76_connac_mcu_alloc_sta_req runs in atomic context  Rely on GFP_ATOMIC flag in __mt76_connac_mcu_alloc_sta_req since it can run in atomic context. This is a preliminary patch to fix a 'sleep while atomic' issue in mt7996_mac_sta_rc_work().  Fixes: 0762bdd30279 (""wifi: mt76: mt7996: rework mt7996_mac_sta_rc_work to support MLO"") Signed-off-by: Lorenzo Bianconi <lorenzo@kernel.org> Link: https://patch.msgid.link/20250605-mt7996-sleep-while-atomic-v1-1-d46d15f9203c@kernel.org Signed-off-by: Felix Fietkau <nbd@nbd.name>",1,1,2
torvalds/linux,d133036a0b23d3ef781d067ccdea6bbfb381e0cf,Ben Skeggs,2025-06-17T04:00:36Z,"drm/nouveau/gsp: fix potential leak of memory used during acpi init  If any of the ACPI calls fail, memory allocated for the input buffer would be leaked.  Fix failure paths to free allocated memory.  Also add checks to ensure the allocations succeeded in the first place.  Reported-by: Danilo Krummrich <dakr@kernel.org> Fixes: 176fdcbddfd2 (""drm/nouveau/gsp/r535: add support for booting GSP-RM"") Signed-off-by: Ben Skeggs <bskeggs@nvidia.com> Signed-off-by: Danilo Krummrich <dakr@kernel.org> Link: https://lore.kernel.org/r/20250617040036.2932-1-bskeggs@nvidia.com",14,6,20
torvalds/linux,203817de269539c062724d97dfa5af3cdf77a3ec,Pavel Begunkov,2025-07-07T08:52:33Z,"io_uring/zcrx: fix pp destruction warnings  With multiple page pools and in some other cases we can have allocated niovs on page pool destruction. Remove a misplaced warning checking that all niovs are returned to zcrx on io_pp_zc_destroy(). It was reported before but apparently got lost.  Reported-by: Pedro Tammela <pctammela@mojatatu.com> Fixes: 34a3e60821ab9 (""io_uring/zcrx: implement zerocopy receive pp memory provider"") Signed-off-by: Pavel Begunkov <asml.silence@gmail.com> Link: https://lore.kernel.org/r/b9e6d919d2964bc48ddbf8eb52fc9f5d118e9bc1.1751878185.git.asml.silence@gmail.com Signed-off-by: Jens Axboe <axboe@kernel.dk>",0,3,3
torvalds/linux,d78f76457d70d30e80b5d2e067d45de7a0505fc0,Edson Juliano Drosdeck,2025-07-07T11:45:37Z,"ALSA: hda/realtek: Enable headset Mic on Positivo K116J  Positivo K116J is equipped with ALC269VC, and needs a fix to make the headset mic to work. Also must to limits the internal microphone boost.  Signed-off-by: Edson Juliano Drosdeck <edson.drosdeck@gmail.com> Link: https://patch.msgid.link/20250707114537.8291-1-edson.drosdeck@gmail.com Signed-off-by: Takashi Iwai <tiwai@suse.de>",1,0,1
torvalds/linux,85e323bdbe28d4638aaefd8d9192763874efe9b0,Baojun Xu,2025-07-07T09:05:13Z,"ALSA: hda/tas2781: Fix calibration data parser issue  We will copy calibration data from position behind to front. We have created a variable (tmp_val) point on top of calibration data buffer, and tmp_val[1] is max of node number in original calibration data structure, it will be overwritten after first data copy, so can't be used as max node number check in for loop. So we create a new variable to save max of node number (tmp_val[1]), used to check if max node number was reached in for loop. And a point need to be increased to point at calibration data in node. Data saved position also need to be increased one byte.  Fixes: 4fe238513407 (""ALSA: hda/tas2781: Move and unified the calibrated-data getting function for SPI and I2C into the tas2781_hda lib"") Signed-off-by: Baojun Xu <baojun.xu@ti.com> Link: https://patch.msgid.link/20250707090513.1462-1-baojun.xu@ti.com Signed-off-by: Takashi Iwai <tiwai@suse.de>",5,3,8
torvalds/linux,737bb912ebbe4571195c56eba557c4d7315b26fb,Mathy Vanhoef,2025-06-16T00:46:35Z,"wifi: prevent A-MSDU attacks in mesh networks  This patch is a mitigation to prevent the A-MSDU spoofing vulnerability for mesh networks. The initial update to the IEEE 802.11 standard, in response to the FragAttacks, missed this case (CVE-2025-27558). It can be considered a variant of CVE-2020-24588 but for mesh networks.  This patch tries to detect if a standard MSDU was turned into an A-MSDU by an adversary. This is done by parsing a received A-MSDU as a standard MSDU, calculating the length of the Mesh Control header, and seeing if the 6 bytes after this header equal the start of an rfc1042 header. If equal, this is a strong indication of an ongoing attack attempt.  This defense was tested with mac80211_hwsim against a mesh network that uses an empty Mesh Address Extension field, i.e., when four addresses are used, and when using a 12-byte Mesh Address Extension field, i.e., when six addresses are used. Functionality of normal MSDUs and A-MSDUs was also tested, and confirmed working, when using both an empty and 12-byte Mesh Address Extension field.  It was also tested with mac80211_hwsim that A-MSDU attacks in non-mesh networks keep being detected and prevented.  Note that the vulnerability being patched, and the defense being implemented, was also discussed in the following paper and in the following IEEE 802.11 presentation:  https://papers.mathyvanhoef.com/wisec2025.pdf https://mentor.ieee.org/802.11/dcn/25/11-25-0949-00-000m-a-msdu-mesh-spoof-protection.docx  Cc: stable@vger.kernel.org Signed-off-by: Mathy Vanhoef <Mathy.Vanhoef@kuleuven.be> Link: https://patch.msgid.link/20250616004635.224344-1-Mathy.Vanhoef@kuleuven.be Signed-off-by: Johannes Berg <johannes.berg@intel.com>",50,2,52
torvalds/linux,2ce6ad9262256dd345cb104ba0ac6cf4aeed25a3,Felix Fietkau,2025-07-06T09:20:53Z,"wifi: rt2x00: fix remove callback type mismatch  The function is used as remove callback for a platform driver. It was missed during the conversion from int to void  Fixes: 0edb555a65d1 (""platform: Make platform_driver::remove() return void"") Signed-off-by: Felix Fietkau <nbd@nbd.name> Link: https://patch.msgid.link/20250706092053.97724-1-nbd@nbd.name Signed-off-by: Johannes Berg <johannes.berg@intel.com>",2,4,6
torvalds/linux,58fcb1b4287ce38850402bb2bb16d09bf77b91d9,Moon Hee Lee,2025-07-03T19:37:57Z,"wifi: mac80211: reject VHT opmode for unsupported channel widths  VHT operating mode notifications are not defined for channel widths below 20 MHz. In particular, 5 MHz and 10 MHz are not valid under the VHT specification and must be rejected.  Without this check, malformed notifications using these widths may reach ieee80211_chan_width_to_rx_bw(), leading to a WARN_ON due to invalid input. This issue was reported by syzbot.  Reject these unsupported widths early in sta_link_apply_parameters() when opmode_notif is used. The accepted set includes 20, 40, 80, 160, and 80+80 MHz, which are valid for VHT. While 320 MHz is not defined for VHT, it is allowed to avoid rejecting HE or EHT clients that may still send a VHT opmode notification.  Reported-by: syzbot+ededba317ddeca8b3f08@syzkaller.appspotmail.com Closes: https://syzkaller.appspot.com/bug?extid=ededba317ddeca8b3f08 Fixes: 751e7489c1d7 (""wifi: mac80211: expose ieee80211_chan_width_to_rx_bw() to drivers"") Tested-by: syzbot+ededba317ddeca8b3f08@syzkaller.appspotmail.com Signed-off-by: Moon Hee Lee <moonhee.lee.ca@gmail.com> Link: https://patch.msgid.link/20250703193756.46622-2-moonhee.lee.ca@gmail.com Signed-off-by: Johannes Berg <johannes.berg@intel.com>",14,0,14
torvalds/linux,3b602ddc0df723992721b0d286c90c9bdd755b34,Vitor Soares,2025-07-01T14:26:43Z,"wifi: mwifiex: discard erroneous disassoc frames on STA interface  When operating in concurrent STA/AP mode with host MLME enabled, the firmware incorrectly sends disassociation frames to the STA interface when clients disconnect from the AP interface. This causes kernel warnings as the STA interface processes disconnect events that don't apply to it:  [ 1303.240540] WARNING: CPU: 0 PID: 513 at net/wireless/mlme.c:141 cfg80211_process_disassoc+0x78/0xec [cfg80211] [ 1303.250861] Modules linked in: 8021q garp stp mrp llc rfcomm bnep btnxpuart nls_iso8859_1 nls_cp437 onboard_us [ 1303.327651] CPU: 0 UID: 0 PID: 513 Comm: kworker/u9:2 Not tainted 6.16.0-rc1+ #3 PREEMPT [ 1303.335937] Hardware name: Toradex Verdin AM62 WB on Verdin Development Board (DT) [ 1303.343588] Workqueue: MWIFIEX_RX_WORK_QUEUE mwifiex_rx_work_queue [mwifiex] [ 1303.350856] pstate: 60000005 (nZCv daif -PAN -UAO -TCO -DIT -SSBS BTYPE=--) [ 1303.357904] pc : cfg80211_process_disassoc+0x78/0xec [cfg80211] [ 1303.364065] lr : cfg80211_process_disassoc+0x70/0xec [cfg80211] [ 1303.370221] sp : ffff800083053be0 [ 1303.373590] x29: ffff800083053be0 x28: 0000000000000000 x27: 0000000000000000 [ 1303.380855] x26: 0000000000000000 x25: 00000000ffffffff x24: ffff000002c5b8ae [ 1303.388120] x23: ffff000002c5b884 x22: 0000000000000001 x21: 0000000000000008 [ 1303.395382] x20: ffff000002c5b8ae x19: ffff0000064dd408 x18: 0000000000000006 [ 1303.402646] x17: 3a36333a61623a30 x16: 32206d6f72662063 x15: ffff800080bfe048 [ 1303.409910] x14: ffff000003625300 x13: 0000000000000001 x12: 0000000000000000 [ 1303.417173] x11: 0000000000000002 x10: ffff000003958600 x9 : ffff000003625300 [ 1303.424434] x8 : ffff00003fd9ef40 x7 : ffff0000039fc280 x6 : 0000000000000002 [ 1303.431695] x5 : ffff0000038976d4 x4 : 0000000000000000 x3 : 0000000000003186 [ 1303.438956] x2 : 000000004836ba20 x1 : 0000000000006986 x0 : 00000000d00479de [ 1303.446221] Call trace: [ 1303.448722]  cfg80211_process_disassoc+0x78/0xec [cfg80211] (P) [ 1303.454894]  cfg80211_rx_mlme_mgmt+0x64/0xf8 [cfg80211] [ 1303.460362]  mwifiex_process_mgmt_packet+0x1ec/0x460 [mwifiex] [ 1303.466380]  mwifiex_process_sta_rx_packet+0x1bc/0x2a0 [mwifiex] [ 1303.472573]  mwifiex_handle_rx_packet+0xb4/0x13c [mwifiex] [ 1303.478243]  mwifiex_rx_work_queue+0x158/0x198 [mwifiex] [ 1303.483734]  process_one_work+0x14c/0x28c [ 1303.487845]  worker_thread+0x2cc/0x3d4 [ 1303.491680]  kthread+0x12c/0x208 [ 1303.495014]  ret_from_fork+0x10/0x20  Add validation in the STA receive path to verify that disassoc/deauth frames originate from the connected AP. Frames that fail this check are discarded early, preventing them from reaching the MLME layer and triggering WARN_ON().  This filtering logic is similar with that used in the ieee80211_rx_mgmt_disassoc() function in mac80211, which drops disassoc frames that don't match the current BSSID (!ether_addr_equal(mgmt->bssid, sdata->vif.cfg.ap_addr)), ensuring only relevant frames are processed.  Tested on: - 8997 with FW 16.68.1.p197  Fixes: 36995892c271 (""wifi: mwifiex: add host mlme for client mode"") Cc: stable@vger.kernel.org Signed-off-by: Vitor Soares <vitor.soares@toradex.com> Reviewed-by: Jeff Chen <jeff.chen_1@nxp.con> Reviewed-by: Francesco Dolcini <francesco.dolcini@toradex.com> Link: https://patch.msgid.link/20250701142643.658990-1-ivitro@gmail.com Signed-off-by: Johannes Berg <johannes.berg@intel.com>",3,1,4
torvalds/linux,e1e6ebf490e55fee1ae573aa443c1d4aea5e4a40,Johannes Berg,2025-06-30T13:45:01Z,"wifi: mac80211: fix non-transmitted BSSID profile search  When the non-transmitted BSSID profile is found, immediately return from the search to not return the wrong profile_len when the profile is found in a multiple BSSID element that isn't the last one in the frame.  Fixes: 5023b14cf4df (""mac80211: support profile split between elements"") Reported-by: Michael-CY Lee <michael-cy.lee@mediatek.com> Link: https://patch.msgid.link/20250630154501.f26cd45a0ecd.I28e0525d06e8a99e555707301bca29265cf20dc8@changeid Signed-off-by: Johannes Berg <johannes.berg@intel.com>",2,4,6
torvalds/linux,8af596e8ae44c3bcf36d1aea09fc9a6f17c555e5,Johannes Berg,2025-07-01T07:22:13Z,"wifi: mac80211: clear frame buffer to never leak stack  In disconnect paths paths, local frame buffers are used to build deauthentication frames to send them over the air and as notifications to userspace. Some internal error paths (that, given no other bugs, cannot happen) don't always initialize the buffers before sending them to userspace, so in the presence of other bugs they can leak stack content. Initialize the buffers to avoid the possibility of this happening.  Suggested-by: Zhongqiu Han <quic_zhonhan@quicinc.com> Link: https://patch.msgid.link/20250701072213.13004-2-johannes@sipsolutions.net Signed-off-by: Johannes Berg <johannes.berg@intel.com>",3,0,3
torvalds/linux,c5fd399a24c8e2865524361f7dc4d4a6899be4f4,Lachlan Hodges,2025-07-01T07:55:41Z,"wifi: mac80211: correctly identify S1G short beacon  mac80211 identifies a short beacon by the presence of the next TBTT field, however the standard actually doesn't explicitly state that the next TBTT can't be in a long beacon or even that it is required in a short beacon - and as a result this validation does not work for all vendor implementations.  The standard explicitly states that an S1G long beacon shall contain the S1G beacon compatibility element as the first element in a beacon transmitted at a TBTT that is not a TSBTT (Target Short Beacon Transmission Time) as per IEEE80211-2024 11.1.3.10.1. This is validated by 9.3.4.3 Table 9-76 which states that the S1G beacon compatibility element is only allowed in the full set and is not allowed in the minimum set of elements permitted for use within short beacons.  Correctly identify short beacons by the lack of an S1G beacon compatibility element as the first element in an S1G beacon frame.  Fixes: 9eaffe5078ca (""cfg80211: convert S1G beacon to scan results"") Signed-off-by: Simon Wadsworth <simon@morsemicro.com> Signed-off-by: Lachlan Hodges <lachlan.hodges@morsemicro.com> Link: https://patch.msgid.link/20250701075541.162619-1-lachlan.hodges@morsemicro.com Signed-off-by: Johannes Berg <johannes.berg@intel.com>",38,14,52
torvalds/linux,505b730ede7f5c4083ff212aa955155b5b92e574,Uwe Kleine-KÃ¶nig,2025-07-04T17:27:27Z,"pwm: mediatek: Ensure to disable clocks in error path  After enabling the clocks each error path must disable the clocks again. One of them failed to do so. Unify the error paths to use goto to make it harder for future changes to add a similar bug.  Fixes: 7ca59947b5fc (""pwm: mediatek: Prevent divide-by-zero in pwm_mediatek_config()"") Signed-off-by: Uwe Kleine-KÃ¶nig <u.kleine-koenig@baylibre.com> Link: https://lore.kernel.org/r/20250704172728.626815-2-u.kleine-koenig@baylibre.com Cc: stable@vger.kernel.org Signed-off-by: Uwe Kleine-KÃ¶nig <ukleinek@kernel.org>",8,5,13
torvalds/linux,9ee124caae1b0defd0e02c65686f539845a3ac9b,Uwe Kleine-KÃ¶nig,2025-07-04T17:24:17Z,"pwm: Fix invalid state detection  Commit 9dd42d019e63 (""pwm: Allow pwm state transitions from an invalid state"") intended to allow some state transitions that were not allowed before. The idea is sane and back then I also got the code comment right, but the check for enabled is bogus. This resulted in state transitions for enabled states to be allowed to have invalid duty/period settings and thus it can happen that low-level drivers get requests for invalid statesð.  Invert the check to allow state transitions for disabled states only.  Fixes: 9dd42d019e63 (""pwm: Allow pwm state transitions from an invalid state"") Signed-off-by: Uwe Kleine-KÃ¶nig <u.kleine-koenig@baylibre.com> Link: https://lore.kernel.org/r/20250704172416.626433-2-u.kleine-koenig@baylibre.com Cc: stable@vger.kernel.org Signed-off-by: Uwe Kleine-KÃ¶nig <ukleinek@kernel.org>",1,1,2
torvalds/linux,d7b8f8e20813f0179d8ef519541a3527e7661d3a,Linus Torvalds,2025-07-06T21:10:26Z,Linux 6.16-rc5,1,1,2
torvalds/linux,bab5cac627b36a96ffc344274953558906418495,Linus Torvalds,2025-07-06T20:10:39Z,"Merge tag 'pull-fixes' of git://git.kernel.org/pub/scm/linux/kernel/git/viro/vfs  Pull /proc/sys dcache lookup fix from Al Viro:  ""Fix for the breakage spotted by Neil in the interplay between   /proc/sys ->d_compare() weirdness and parallel lookups""  * tag 'pull-fixes' of git://git.kernel.org/pub/scm/linux/kernel/git/viro/vfs:   fix proc_sys_compare() handling of in-lookup dentries",12,8,20
torvalds/linux,772b78c2abd85586bb90b23adff89f7303c704c7,Linus Torvalds,2025-07-06T18:17:47Z,"Merge tag 'sched_urgent_for_v6.16_rc5' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip  Pull scheduler fixes from Borislav Petkov:   - Fix the calculation of the deadline server task's runtime as this    mishap was preventing realtime tasks from running   - Avoid a race condition during migrate-swapping two tasks   - Fix the string reported for the ""none"" dynamic preemption option  * tag 'sched_urgent_for_v6.16_rc5' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip:   sched/deadline: Fix dl_server runtime calculation formula   sched/core: Fix migrate_swap() vs. hotplug   sched: Fix preemption string of preempt_dynamic_none",21,16,37
torvalds/linux,95eb0d389b4a518a2630b18fbc5916a008f519f1,Linus Torvalds,2025-07-06T17:55:59Z,Merge tag 'objtool_urgent_for_v6.16_rc5' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip  Pull objtool fix from Borislav Petkov:   - Fix the compilation of an x86 kernel on a big engian machine due to a    missed endianness conversion  * tag 'objtool_urgent_for_v6.16_rc5' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip:   objtool: Add missing endian conversion to read_annotate(),1,0,1
torvalds/linux,a1639ce5e590300af45bebedfbacf8fabc1777ed,Linus Torvalds,2025-07-06T17:49:27Z,Merge tag 'perf_urgent_for_v6.16_rc5' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip  Pull perf fixes from Borislav Petkov:   - Revert uprobes to using CAP_SYS_ADMIN again as currently they can    destructively modify kernel code from an unprivileged process   - Move a warning to where it belongs  * tag 'perf_urgent_for_v6.16_rc5' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip:   perf: Revert to requiring CAP_SYS_ADMIN for uprobes   perf/core: Fix the WARN_ON_ONCE is out of lock protected region,3,3,6
torvalds/linux,5fc2e891a5badbcb585850995c609be78bd73006,Linus Torvalds,2025-07-06T17:44:20Z,"Merge tag 'x86_urgent_for_v6.16_rc5' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip  Pull x86 fix from Borislav Petkov:   - Make sure AMD SEV guests using secure TSC, include a TSC_FACTOR which    prevents their TSCs from going skewed from the hypervisor's  * tag 'x86_urgent_for_v6.16_rc5' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip:   x86/sev: Use TSC_FACTOR for Secure TSC frequency calculation",35,4,39
torvalds/linux,463b1b2af83866e6369e7764fb65f1d57449fb5b,Linus Torvalds,2025-07-06T17:38:04Z,Merge tag 'locking_urgent_for_v6.16_rc5' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip  Pull locking fixes from Borislav Petkov:   - Disable FUTEX_PRIVATE_HASH for this cycle due to a performance    regression   - Add a selftests compilation product to the corresponding .gitignore    file  * tag 'locking_urgent_for_v6.16_rc5' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip:   selftests/futex: Add futex_numa to .gitignore   futex: Temporary disable FUTEX_PRIVATE_HASH,5,0,5
torvalds/linux,c92bda4cb96970b78037d52cfae43844044744b1,Linus Torvalds,2025-07-06T16:29:24Z,Merge tag 'edac_urgent_for_v6.16_rc5' of git://git.kernel.org/pub/scm/linux/kernel/git/ras/ras  Pull EDAC fix from Borislav Petkov:   - Initialize sysfs attributes properly to avoid lockdep complaining    about an uninitialized lock class  * tag 'edac_urgent_for_v6.16_rc5' of git://git.kernel.org/pub/scm/linux/kernel/git/ras/ras:   EDAC: Initialize EDAC features sysfs attributes,5,1,6
torvalds/linux,bdde3141ceb992f494e9a949c89f99983a1d6604,Linus Torvalds,2025-07-06T16:17:48Z,"Merge tag 'ras_urgent_for_v6.16_rc5' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip  Pull RAS fixes from Borislav Petkov:   - Do not remove the MCE sysfs hierarchy if thresholding sysfs nodes    init fails due to new/unknown banks present, which in itself is not    fatal anyway; add default names for new banks   - Make sure MCE polling settings are honored after CMCI storms   - Make sure MCE threshold limit is reset after the thresholding    interrupt has been serviced   - Clean up properly and disable CMCI banks on shutdown so that a    second/kexec-ed kernel can rediscover those banks again  * tag 'ras_urgent_for_v6.16_rc5' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip:   x86/mce: Make sure CMCI banks are cleared during shutdown on Intel   x86/mce/amd: Fix threshold limit reset   x86/mce/amd: Add default names for MCA banks and blocks   x86/mce: Ensure user polling settings are honored when restarting timer   x86/mce: Don't remove sysfs if thresholding sysfs init fails",29,24,53
torvalds/linux,45a3f1254638523869fc2ba067713f4d467e5145,Linus Torvalds,2025-07-06T16:16:31Z,Merge tag 'irq_urgent_for_v6.16_rc5' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip  Pull irq fix from Borislav Petkov:   - Have irq-msi-lib select CONFIG_GENERIC_MSI_IRQ explicitly as it uses    its facilities  * tag 'irq_urgent_for_v6.16_rc5' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip:   irqchip/irq-msi-lib: Select CONFIG_GENERIC_MSI_IRQ,1,0,1
torvalds/linux,46b0a67e8f22d2dbc679b37b26c5ff0f50424847,Terry Tritton,2025-07-04T10:37:49Z,"selftests/futex: Add futex_numa to .gitignore  futex_numa was never added to the .gitignore file. Add it.  Fixes: 9140f57c1c13 (""futex,selftests: Add another FUTEX2_NUMA selftest"") Signed-off-by: Terry Tritton <terry.tritton@linaro.org> Signed-off-by: Thomas Gleixner <tglx@linutronix.de> Reviewed-by: AndrÃ© Almeida <andrealmeid@igalia.com> Link: https://lore.kernel.org/all/20250704103749.10341-1-terry.tritton@linaro.org",1,0,1
torvalds/linux,1f988d0788f50d8464f957e793fab356e2937369,Linus Torvalds,2025-07-05T23:14:03Z,"Merge tag 'hid-for-linus-2025070502' of git://git.kernel.org/pub/scm/linux/kernel/git/hid/hid  Pull HID fixes from Jiri Kosina:   - Memory corruption fixes in hid-appletb-kbd driver (Qasim Ijaz)   - New device ID in hid-elecom driver (Leonard Dizon)   - Fixed several HID debugfs contants (Vicki Pfau)  * tag 'hid-for-linus-2025070502' of git://git.kernel.org/pub/scm/linux/kernel/git/hid/hid:   HID: appletb-kbd: fix slab use-after-free bug in appletb_kbd_probe   HID: Fix debug name for BTN_GEAR_DOWN, BTN_GEAR_UP, BTN_WHEEL   HID: elecom: add support for ELECOM HUGE 019B variant   HID: appletb-kbd: fix memory corruption of input_handler_list",19,11,30
torvalds/linux,05df91921da664ebba2752a7e45b63e3dddb85de,Linus Torvalds,2025-07-05T20:05:28Z,Merge tag 'v6.16-rc4-smb3-client-fixes' of git://git.samba.org/sfrench/cifs-2.6  Pull smb client fixes from Steve French:   - Two reconnect fixes including one for a reboot/reconnect race   - Fix for incorrect file type that can be returned by SMB3.1.1 POSIX    extensions   - tcon initialization fix   - Fix for resolving Windows symlinks with absolute paths  * tag 'v6.16-rc4-smb3-client-fixes' of git://git.samba.org/sfrench/cifs-2.6:   smb: client: fix native SMB symlink traversal   smb: client: fix race condition in negotiate timeout by using more precise timing   cifs: all initializations for tcon should happen in tcon_info_alloc   smb: client: fix warning when reconnecting channel   smb: client: fix readdir returning wrong type with POSIX extensions,39,36,75
torvalds/linux,fd860cd78146605eeeeee3ac264ca166cc9fa943,Linus Torvalds,2025-07-05T19:54:24Z,"Merge tag 'i2c-for-6.16-rc5' of git://git.kernel.org/pub/scm/linux/kernel/git/wsa/linux  Pull i2c fixes from Wolfram Sang:   - designware: initialise msg_write_idx during transfer   - microchip: check return value from core xfer call   - realtek: add 'reg' property constraint to the device tree  * tag 'i2c-for-6.16-rc5' of git://git.kernel.org/pub/scm/linux/kernel/git/wsa/linux:   dt-bindings: i2c: realtek,rtl9301: Fix missing 'reg' constraint   i2c: microchip-core: re-fix fake detections w/ i2cdetect   i2c/designware: Fix an initialization issue",8,2,10
torvalds/linux,454706f1f8698eecc6cc00493c6dffbccdbbd416,Jens Axboe,2025-07-05T12:32:59Z,"Merge tag 'md-6.16-20250705' of gitolite.kernel.org:pub/scm/linux/kernel/git/mdraid/linux into block-6.16  Pull MD fixes from Yu:  "" - fix uaf due to stack memory used for bio mempool, from Jinchao   - fix raid10/raid1 nowait IO error path, from Nigel and Qixing   - fix kernel crash from reading bitmap sysfs entry, by HÃ¥kon""  * tag 'md-6.16-20250705' of gitolite.kernel.org:pub/scm/linux/kernel/git/mdraid/linux:   md/md-bitmap: fix GPF in bitmap_get_stats()   md/raid1,raid10: strip REQ_NOWAIT from member bios   raid10: cleanup memleak at raid10_make_request   md/raid1: Fix stack memory use after return in raid1_reshape",14,5,19
torvalds/linux,c17fb542dbd1db745c9feac15617056506dd7195,HÃ¥kon Bugge,2025-07-02T09:10:34Z,"md/md-bitmap: fix GPF in bitmap_get_stats()  The commit message of commit 6ec1f0239485 (""md/md-bitmap: fix stats collection for external bitmaps"") states:      Remove the external bitmap check as the statistics should be     available regardless of bitmap storage location.      Return -EINVAL only for invalid bitmap with no storage (neither in     superblock nor in external file).  But, the code does not adhere to the above, as it does only check for a valid super-block for ""internal"" bitmaps. Hence, we observe:  Oops: GPF, probably for non-canonical address 0x1cd66f1f40000028 RIP: 0010:bitmap_get_stats+0x45/0xd0 Call Trace:   seq_read_iter+0x2b9/0x46a  seq_read+0x12f/0x180  proc_reg_read+0x57/0xb0  vfs_read+0xf6/0x380  ksys_read+0x6d/0xf0  do_syscall_64+0x8c/0x1b0  entry_SYSCALL_64_after_hwframe+0x76/0x7e  We fix this by checking the existence of a super-block for both the internal and external case.  Fixes: 6ec1f0239485 (""md/md-bitmap: fix stats collection for external bitmaps"") Cc: stable@vger.kernel.org Reported-by: Gerald Gibson <gerald.gibson@oracle.com> Signed-off-by: HÃ¥kon Bugge <haakon.bugge@oracle.com> Link: https://lore.kernel.org/linux-raid/20250702091035.2061312-1-haakon.bugge@oracle.com Signed-off-by: Yu Kuai <yukuai3@huawei.com>",1,2,3
torvalds/linux,5fa31c49928139fa948f078b094d80f12ed83f5f,Zheng Qixing,2025-07-02T10:23:41Z,"md/raid1,raid10: strip REQ_NOWAIT from member bios  RAID layers don't implement proper non-blocking semantics for REQ_NOWAIT, making the flag potentially misleading when propagated to member disks.  This patch clear REQ_NOWAIT from cloned bios in raid1/raid10. Retain original bio's REQ_NOWAIT flag for upper layer error handling.  Maybe we can implement non-blocking I/O handling mechanisms within RAID in future work.  Fixes: 9f346f7d4ea7 (""md/raid1,raid10: don't handle IO error for REQ_RAHEAD and REQ_NOWAIT"") Signed-off-by: Zheng Qixing <zhengqixing@huawei.com> Link: https://lore.kernel.org/linux-raid/20250702102341.1969154-1-zhengqixing@huaweicloud.com Signed-off-by: Yu Kuai <yukuai3@huawei.com>",4,1,5
torvalds/linux,43806c3d5b9bb7d74ba4e33a6a8a41ac988bde24,Nigel Croxon,2025-07-03T15:23:04Z,"raid10: cleanup memleak at raid10_make_request  If raid10_read_request or raid10_write_request registers a new request and the REQ_NOWAIT flag is set, the code does not free the malloc from the mempool.  unreferenced object 0xffff8884802c3200 (size 192):    comm ""fio"", pid 9197, jiffies 4298078271    hex dump (first 32 bytes):      00 00 00 00 00 00 00 00 88 41 02 00 00 00 00 00  .........A......      08 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................    backtrace (crc c1a049a2):      __kmalloc+0x2bb/0x450      mempool_alloc+0x11b/0x320      raid10_make_request+0x19e/0x650 [raid10]      md_handle_request+0x3b3/0x9e0      __submit_bio+0x394/0x560      __submit_bio_noacct+0x145/0x530      submit_bio_noacct_nocheck+0x682/0x830      __blkdev_direct_IO_async+0x4dc/0x6b0      blkdev_read_iter+0x1e5/0x3b0      __io_read+0x230/0x1110      io_read+0x13/0x30      io_issue_sqe+0x134/0x1180      io_submit_sqes+0x48c/0xe90      __do_sys_io_uring_enter+0x574/0x8b0      do_syscall_64+0x5c/0xe0      entry_SYSCALL_64_after_hwframe+0x76/0x7e  V4: changing backing tree to see if CKI tests will pass. The patch code has not changed between any versions.  Fixes: c9aa889b035f (""md: raid10 add nowait support"") Signed-off-by: Nigel Croxon <ncroxon@redhat.com> Link: https://lore.kernel.org/linux-raid/c0787379-9caa-42f3-b5fc-369aed784400@redhat.com Signed-off-by: Yu Kuai <yukuai3@huawei.com>",8,2,10
torvalds/linux,d67ed2ccd2d1dcfda9292c0ea8697a9d0f2f0d98,Wang Jinchao,2025-06-12T11:28:40Z,"md/raid1: Fix stack memory use after return in raid1_reshape  In the raid1_reshape function, newpool is allocated on the stack and assigned to conf->r1bio_pool. This results in conf->r1bio_pool.wait.head pointing to a stack address. Accessing this address later can lead to a kernel panic.  Example access path:  raid1_reshape() { 	// newpool is on the stack 	mempool_t newpool, oldpool; 	// initialize newpool.wait.head to stack address 	mempool_init(&newpool, ...); 	conf->r1bio_pool = newpool; }  raid1_read_request() or raid1_write_request() { 	alloc_r1bio() 	{ 		mempool_alloc() 		{ 			// if pool->alloc fails 			remove_element() 			{ 				--pool->curr_nr; 			} 		} 	} }  mempool_free() { 	if (pool->curr_nr < pool->min_nr) { 		// pool->wait.head is a stack address 		// wake_up() will try to access this invalid address 		// which leads to a kernel panic 		return; 		wake_up(&pool->wait); 	} }  Fix: reinit conf->r1bio_pool.wait after assigning newpool.  Fixes: afeee514ce7f (""md: convert to bioset_init()/mempool_init()"") Signed-off-by: Wang Jinchao <wangjinchao600@gmail.com> Reviewed-by: Yu Kuai <yukuai3@huawei.com> Link: https://lore.kernel.org/linux-raid/20250612112901.3023950-1-wangjinchao600@gmail.com Signed-off-by: Yu Kuai <yukuai3@huawei.com>",1,0,1
torvalds/linux,3d44147494385b245f021a3a3a5c1408be1d50d1,Tamir Duberstein,2025-07-04T19:50:27Z,rust: drm: remove unnecessary imports  `kernel::str::CStr` is included in the prelude.  Signed-off-by: Tamir Duberstein <tamird@gmail.com> Signed-off-by: Danilo Krummrich <dakr@kernel.org> Link: https://lore.kernel.org/r/20250704-cstr-include-drm-v1-1-a279dfc4d753@gmail.com,1,2,3
torvalds/linux,162c90154422e67c3b2dc209a4304a95e293cd58,Ofir Bitton,2024-07-29T12:17:18Z,"MAINTAINERS: Change habanalabs maintainer  I will be leaving Intel soon, Yaron Avizrat will take the role of habanalabs driver maintainer.  Signed-off-by: Ofir Bitton <obitton@habana.ai> Signed-off-by: Lukas Wunner <lukas@wunner.de> Acked-by: Yaron Avizrat <yaron.avizrat@intel.com> Acked-by: Jani Nikula <jani.nikula@intel.com> Acked-by: Oded Gabbay <ogabbay@kernel.org> Link: https://lore.kernel.org/r/20240729121718.540489-2-obitton@habana.ai",1,1,2
torvalds/linux,a79a588fc1761dc12a3064fc2f648ae66cea3c5a,Linus Torvalds,2025-07-05T00:27:30Z,"Merge tag 'pm-6.16-rc5' of git://git.kernel.org/pub/scm/linux/kernel/git/rafael/linux-pm  Pull power management fixes from Rafael Wysocki:  ""These address system suspend failures under memory pressure in some   configurations, fix up RAPL handling on platforms where PL1 cannot be   disabled, and fix a documentation typo:     - Prevent the Intel RAPL power capping driver from allowing PL1 to be      exceeded by mistake on systems when PL1 cannot be disabled (Zhang      Rui)     - Fix a typo in the ABI documentation (Sumanth Gavini)     - Allow swap to be used a bit longer during system suspend and      hibernation to avoid suspend failures under memory pressure (Mario      Limonciello)""  * tag 'pm-6.16-rc5' of git://git.kernel.org/pub/scm/linux/kernel/git/rafael/linux-pm:   PM: sleep: docs: Replace ""diasble"" with ""disable""   powercap: intel_rapl: Do not change CLAMPING bit if ENABLE bit cannot be changed   PM: Restrict swap use to later in the suspend sequence",29,13,42
torvalds/linux,49dcc4f601017c3fb5dec6754a90403a07d043a6,Linus Torvalds,2025-07-05T00:25:41Z,"Merge tag 'acpi-6.16-rc5' of git://git.kernel.org/pub/scm/linux/kernel/git/rafael/linux-pm  Pull ACPI fix from Rafael Wysocki:  ""Revert a problematic ACPI battery driver change merged recently""  * tag 'acpi-6.16-rc5' of git://git.kernel.org/pub/scm/linux/kernel/git/rafael/linux-pm:   Revert ""ACPI: battery: negate current when discharging""",3,16,19
torvalds/linux,250d0579da5db2052cce2891a5eaa87450851354,Rafael J. Wysocki,2025-07-04T19:54:55Z,"Merge branch 'pm-sleep'  Merge fixes related to system sleep for 6.16-rc5:   - Fix typo in the ABI documentation (Sumanth Gavini).   - Allow swap to be used a bit longer during system suspend and    hibernation to avoid suspend failures under memory pressure (Mario    Limonciello).  * pm-sleep:   PM: sleep: docs: Replace ""diasble"" with ""disable""   PM: Restrict swap use to later in the suspend sequence",12,12,24
torvalds/linux,b1bf2ef6259e6aedc3f952ebd9bc056605563b74,Linus Torvalds,2025-07-04T19:05:36Z,"Merge tag 'soc-fixes-6.16' of git://git.kernel.org/pub/scm/linux/kernel/git/soc/soc  Pull SoC fixes from Arnd Bergmann:  ""A couple of fixes for firmware drivers have come up, addressing kernel   side bugs in op-tee and ff-a code, as well as compatibility issues   with exynos-acpm and ff-a protocols.    The only devicetree fixes are for the Apple platform, addressing   issues with conformance to the bindings for the wlan, spi and mipi   nodes""  * tag 'soc-fixes-6.16' of git://git.kernel.org/pub/scm/linux/kernel/git/soc/soc:   arm64: dts: apple: Move touchbar mipi {address,size}-cells from dtsi to dts   arm64: dts: apple: Drop {address,size}-cells from SPI NOR   arm64: dts: apple: t8103: Fix PCIe BCM4377 nodename   optee: ffa: fix sleep in atomic context   firmware: exynos-acpm: fix timeouts on xfers handling   arm64: defconfig: update renamed PHY_SNPS_EUSB2   firmware: arm_ffa: Fix the missing entry in struct ffa_indirect_msg_hdr   firmware: arm_ffa: Replace mutex with rwlock to avoid sleep in atomic context   firmware: arm_ffa: Move memory allocation outside the mutex locking   firmware: arm_ffa: Fix memory leak by freeing notifier callback node",86,68,154
torvalds/linux,c435a4f487e8c6a3b23dafbda87d971d4fd14e0b,Linus Torvalds,2025-07-04T17:23:29Z,"Merge tag 'riscv-for-linus-6.16-rc5' of git://git.kernel.org/pub/scm/linux/kernel/git/riscv/linux  Pull RISC-V fixes from Palmer Dabbelt:   - kCFI is restricted to clang-17 or newer, as earlier versions have    known bugs   - sbi_hsm_hart_start is now staticly allocated, to avoid tripping up    the SBI HSM page mapping on sparse systems.  * tag 'riscv-for-linus-6.16-rc5' of git://git.kernel.org/pub/scm/linux/kernel/git/riscv/linux:   riscv: cpu_ops_sbi: Use static array for boot_data   riscv: Require clang-17 or newer for kCFI",5,4,9
torvalds/linux,4b02ed4ab721f559e843251564a3ea6ae1769a83,Linus Torvalds,2025-07-04T17:14:49Z,"Merge tag 'regulator-fix-v6.16-rc4' of git://git.kernel.org/pub/scm/linux/kernel/git/broonie/regulator  Pull regulator fixes from Mark Brown:  ""A few driver fixes (the GPIO one being potentially nasty, though it   has been there for a while without anyone reporting it), and one core   fix for the rarely used combination of coupled regulators and   unbinding""  * tag 'regulator-fix-v6.16-rc4' of git://git.kernel.org/pub/scm/linux/kernel/git/broonie/regulator:   regulator: gpio: Fix the out-of-bounds access to drvdata::gpiods   regulator: mp886x: Fix ID table driver_data   regulator: sy8824x: Fix ID table driver_data   regulator: tps65219: Fix devm_kmalloc size allocation   regulator: core: fix NULL dereference on unbind due to stale coupling data",25,20,45
torvalds/linux,a1d8128f701682d34d9308c9e6b7385c0ffa4b4b,Linus Torvalds,2025-07-04T17:10:49Z,"Merge tag 'spi-fix-v6.16-rc4' of git://git.kernel.org/pub/scm/linux/kernel/git/broonie/spi  Pull spi fixes from Mark Brown:  ""As well as a few driver specific fixes we've got a core change here   which raises the hard coded limit on the number of devices we can   support on one SPI bus since some FPGA based systems are running into   the existing limit. This is not a good solution but it's one suitable   for this point in the release cycle, we should dynamically size the   relevant data structures which I hope will happen in the next couple   of merge windows.    We also pull in a MTD fix for the Qualcomm SNAND driver, the two fixes   cover the same issue and merging them together minimises bisection   issues""  * tag 'spi-fix-v6.16-rc4' of git://git.kernel.org/pub/scm/linux/kernel/git/broonie/spi:   spi: cadence-quadspi: fix cleanup of rx_chan on failure paths   spi: spi-fsl-dspi: Clear completion counter before initiating transfer   spi: Raise limit on number of chip selects to 24   mtd: nand: qpic_common: prevent out of bounds access of BAM arrays   spi: spi-qpic-snand: reallocate BAM transactions",61,11,72
torvalds/linux,df46426745ac58618c822ce3f93d2bb25b9a5060,Linus Torvalds,2025-07-04T17:05:31Z,"Merge tag 'platform-drivers-x86-v6.16-3' of git://git.kernel.org/pub/scm/linux/kernel/git/pdx86/platform-drivers-x86  Pull x86 platform drivers fixes from Ilpo JÃ¤rvinen:  ""Mostly a few lines fixed here and there except amd/isp4 which improves   swnodes relationships but that is a new driver not in any stable   kernels yet. The think-lmi driver changes also look relatively large   but there are just many fixes to it.    The i2c/piix4 change is a effectively a revert of the commit   7e173eb82ae9 (""i2c: piix4: Make CONFIG_I2C_PIIX4 dependent on   CONFIG_X86"") but that required moving the header out from arch/x86   under include/linux/platform_data/    Summary:     - amd/isp4: Improve swnode graph (new driver exception)     - asus-nb-wmi: Use duo keyboard quirk for Zenbook Duo UX8406CA     - dell-lis3lv02d: Add Latitude 5500 accelerometer address     - dell-wmi-sysman: Fix WMI data block retrieval and class dev unreg     - hp-bioscfg: Fix class device unregistration     - i2c: piix4: Re-enable on non-x86 + move FCH header under platform_data/     - intel/hid: Wildcat Lake support     - mellanox:       - mlxbf-pmc: Fix duplicate event ID       - mlxbf-tmfifo: Fix vring_desc.len assignment       - mlxreg-lc: Fix bit-not-set logic check       - nvsw-sn2201: Fix bus number in error message & spelling errors     - portwell-ec: Move watchdog device under correct platform hierarchy     - think-lmi: Error handling fixes (sysfs, kset, kobject, class dev unreg)     - thinkpad_acpi: Handle HKEY 0x1402 event (2025 Thinkpads)     - wmi: Fix WMI event enablement""  * tag 'platform-drivers-x86-v6.16-3' of git://git.kernel.org/pub/scm/linux/kernel/git/pdx86/platform-drivers-x86: (22 commits)   platform/x86: think-lmi: Fix sysfs group cleanup   platform/x86: think-lmi: Fix kobject cleanup   platform/x86: think-lmi: Create ksets consecutively   platform/mellanox: mlxreg-lc: Fix logic error in power state check   i2c: Re-enable piix4 driver on non-x86   Move FCH header to a location accessible by all archs   platform/x86/intel/hid: Add Wildcat Lake support   platform/x86: dell-wmi-sysman: Fix class device unregistration   platform/x86: think-lmi: Fix class device unregistration   platform/x86: hp-bioscfg: Fix class device unregistration   platform/x86: Update swnode graph for amd isp4   platform/x86: dell-wmi-sysman: Fix WMI data block retrieval in sysfs callbacks   platform/x86: wmi: Update documentation of WCxx/WExx ACPI methods   platform/x86: wmi: Fix WMI event enablement   platform/mellanox: nvsw-sn2201: Fix bus number in adapter error message   platform/mellanox: Fix spelling and comment clarity in Mellanox drivers   platform/mellanox: mlxbf-pmc: Fix duplicate event ID for CACHE_DATA1   platform/x86: thinkpad_acpi: handle HKEY 0x1402 event   platform/x86: asus-nb-wmi: add DMI quirk for ASUS Zenbook Duo UX8406CA   platform/x86: dell-lis3lv02d: Add Latitude 5500   ...",250,140,390
torvalds/linux,3c2bd251d2039ce2778c35ced5ef47b3a379f5df,Linus Torvalds,2025-07-04T16:57:12Z,"Merge tag 'usb-6.16-rc5' of git://git.kernel.org/pub/scm/linux/kernel/git/gregkh/usb  Pull USB fixes from Greg KH:  ""Here are some USB driver fixes for 6.16-rc5. I originally wanted this   to get into -rc4, but there were some regressions that had to be   handled first. Now all looks good. Included in here are the following   fixes:     - cdns3 driver fixes     - xhci driver fixes     - typec driver fixes     - USB hub fixes (this is what took the longest to get right)     - new USB driver quirks added     - chipidea driver fixes    All of these have been in linux-next for a while and now we have no   more reported problems with them""  * tag 'usb-6.16-rc5' of git://git.kernel.org/pub/scm/linux/kernel/git/gregkh/usb: (21 commits)   usb: hub: Fix flushing of delayed work used for post resume purposes   xhci: dbc: Flush queued requests before stopping dbc   xhci: dbctty: disable ECHO flag by default   xhci: Disable stream for xHC controller with XHCI_BROKEN_STREAMS   usb: xhci: quirk for data loss in ISOC transfers   usb: dwc3: gadget: Fix TRB reclaim logic for short transfers and ZLPs   usb: hub: Fix flushing and scheduling of delayed work that tunes runtime pm   usb: typec: displayport: Fix potential deadlock   usb: typec: altmodes/displayport: do not index invalid pin_assignments   usb: cdnsp: Fix issue with CV Bad Descriptor test   usb: typec: tcpm: apply vbus before data bringup in tcpm_src_attach   Revert ""usb: xhci: Implement xhci_handshake_check_state() helper""   usb: xhci: Skip xhci_reset in xhci_resume if xhci is being removed   usb: gadget: u_serial: Fix race condition in TTY wakeup   Revert ""usb: gadget: u_serial: Add null pointer check in gs_start_io""   usb: chipidea: udc: disconnect/reconnect from host when do suspend/resume   usb: acpi: fix device link removal   usb: hub: fix detection of high tier USB3 devices behind suspended hubs   Logitech C-270 even more broken   usb: dwc3: Abort suspend on soft disconnect failure   ...",160,85,245
torvalds/linux,d46971e0b6f574059d167ddda1355ed301a0bae6,Linus Torvalds,2025-07-04T16:54:15Z,Merge tag 'input-for-v6.16-rc4' of git://git.kernel.org/pub/scm/linux/kernel/git/dtor/input  Pull input updates from Dmitry Torokhov:   - support for Acer NGR 200 Controller added to xpad driver   - xpad driver will no longer log errors about URBs at sudden disconnect   - a fix for potential NULL dereference in cs40l50-vibra driver   - several drivers have been switched to using scnprintf() to suppress    warnings about potential output truncation  * tag 'input-for-v6.16-rc4' of git://git.kernel.org/pub/scm/linux/kernel/git/dtor/input:   Input: cs40l50-vibra - fix potential NULL dereference in cs40l50_upload_owt()   Input: alps - use scnprintf() to suppress truncation warning   Input: iqs7222 - explicitly define number of external channels   Input: xpad - support Acer NGR 200 Controller   Input: xpad - return errors from xpad_try_sending_next_out_packet() up   Input: xpad - adjust error handling for disconnect   Input: apple_z2 - drop default ARCH_APPLE in Kconfig   Input: Fully open-code compatible for grepping   dt-bindings: HID: i2c-hid: elan: Introduce Elan eKTH8D18   Input: psmouse - switch to use scnprintf() to suppress truncation warning   Input: lifebook - switch to use scnprintf() to suppress truncation warning   Input: alps - switch to use scnprintf() to suppress truncation warning   Input: atkbd - switch to use scnprintf() to suppress truncation warning   Input: fsia6b - suppress buffer truncation warning for phys   Input: iqs626a - replace snprintf() with scnprintf(),35,26,61
torvalds/linux,42bb9b630c4c6c0964cddca98d9d30aa992826de,Linus Torvalds,2025-07-04T16:48:36Z,"Merge tag 'drm-fixes-2025-07-04' of https://gitlab.freedesktop.org/drm/kernel  Pull drm fixes from Dave Airlie:  ""Weekly drm fixes, bit of a bumper crop, the usual amdgpu/xe/i915   suspects, then there is a large scattering of fixes across core and   drivers. I think the simple panel lookup fix is probably the largest,   the sched race fix is also fun, but I don't see anything standing out   too badly.    dma-buf:    - fix timeout handling    gem:    - fix framebuffer object references    sched:    - fix spsc queue job count race    bridge:    - fix aux hpd bridge of node    - panel: move missing flag handling    - samsung-dsim: fix %pK usage to %p    panel:    - fix problem with simple panel lookup    ttm:    - fix error path handling    amdgpu:    - SDMA 5.x reset fix    - Add missing firmware declaration    - Fix leak in amdgpu_ctx_mgr_entity_fini()    - Freesync fix    - OLED backlight fix    amdkfd:    - mtype fix for ext coherent system memory    - MMU notifier fix    - gfx7/8 fix    xe:    - Fix chunking the PTE updates and overflowing the maximum number of      dwords with with MI_STORE_DATA_IMM    - Move WA BB to the LRC BO to mitigate hangs on context switch    - Fix frequency/flush WAs for BMG    - Fix kconfig prompt title and description    - Do not require kunit    - Extend 14018094691 WA to BMG    - Fix wedging the device on signal    i915:    - Make mei interrupt top half irq disabled to fix RT builds    - Fix timeline left held on VMA alloc error    - Fix NULL pointer deref in vlv_dphy_param_init()    - Fix selftest mock_request() to avoid NULL deref    exynos:    - switch to using %p instead of %pK    - fix vblank NULL ptr race    - fix lockup on samsung peach-pit/pi chromebooks    vesadrm:    - NULL ptr fix    vmwgfx:    - fix encrypted memory allocation bug    v3d:    - fix irq enabled during reset""  * tag 'drm-fixes-2025-07-04' of https://gitlab.freedesktop.org/drm/kernel: (41 commits)   drm/xe: Do not wedge device on killed exec queues   drm/xe: Extend WA 14018094691 to BMG   drm/v3d: Disable interrupts before resetting the GPU   drm/gem: Acquire references on GEM handles for framebuffers   drm/sched: Increment job count before swapping tail spsc queue   drm/xe: Allow dropping kunit dependency as built-in   drm/xe: Fix kconfig prompt   drm/xe/bmg: Update Wa_22019338487   drm/xe/bmg: Update Wa_14022085890   drm/xe: Split xe_device_td_flush()   drm/xe/xe_guc_pc: Lock once to update stashed frequencies   drm/xe/guc_pc: Add _locked variant for min/max freq   drm/xe: Make WA BB part of LRC BO   drm/xe: Fix out-of-bounds field write in MI_STORE_DATA_IMM   drm/i915/gsc: mei interrupt top half should be in irq disabled context   drm/i915/gt: Fix timeline left held on VMA alloc error   drm/vmwgfx: Fix guests running with TDX/SEV   drm/amd/display: Don't allow OLED to go down to fully off   drm/amd/display: Added case for when RR equals panel's max RR using freesync   drm/amdkfd: add hqd_sdma_get_doorbell callbacks for gfx7/8   ...",632,293,925
torvalds/linux,923d401238c590f39833a2015f6f9493f146d98f,Linus Torvalds,2025-07-04T16:43:08Z,Merge tag 'iommu-fixes-v6.16-rc4' of git://git.kernel.org/pub/scm/linux/kernel/git/iommu/linux  Pull iommu fixes from Joerg Roedel:   - Rockchip: fix infinite loop caused by probing race condition   - Intel VT-d: assign devtlb cache tag on ATS enablement  * tag 'iommu-fixes-v6.16-rc4' of git://git.kernel.org/pub/scm/linux/kernel/git/iommu/linux:   iommu/vt-d: Assign devtlb cache tag on ATS enablement   iommu/rockchip: prevent iommus dead loop when two masters share one IOMMU,16,5,21
torvalds/linux,1880df2cf44af6266b48a905596726c267bc2b04,Linus Torvalds,2025-07-04T16:33:59Z,"Merge tag 'block-6.16-20250704' of git://git.kernel.dk/linux  Pull block fixes from Jens Axboe:   - NVMe fixes via Christoph:      - fix incorrect cdw15 value in passthru error logging (Alok Tiwari)      - fix memory leak of bio integrity in nvmet (Dmitry Bogdanov)      - refresh visible attrs after being checked (Eugen Hristev)      - fix suspicious RCU usage warning in the multipath code (Geliang Tang)      - correctly account for namespace head reference counter (Nilay Shroff)   - Fix for a regression introduced in ublk in this cycle, where it would    attempt to queue a canceled request.   - brd RCU sleeping fix, also introduced in this cycle. Bare bones fix,    should be improved upon for the next release.  * tag 'block-6.16-20250704' of git://git.kernel.dk/linux:   brd: fix sleeping function called from invalid context in brd_insert_page()   ublk: don't queue request if the associated uring_cmd is canceled   nvme-multipath: fix suspicious RCU usage warning   nvme-pci: refresh visible attrs after being checked   nvmet: fix memory leak of bio integrity   nvme: correctly account for namespace head reference counter   nvme: Fix incorrect cdw15 value in passthru error logging",38,13,51
torvalds/linux,534eb6de621954cde61c910dbeb8fb1700a0a0d6,Wolfram Sang,2025-07-04T16:31:22Z,Merge tag 'i2c-host-fixes-6.16-rc5' of git://git.kernel.org/pub/scm/linux/kernel/git/andi.shyti/linux into i2c/for-current  i2c-host-fixes for v6.16-rc5  designware: initialise msg_write_idx during transfer microchip: check return value from core xfer call realtek: add 'reg' property constraint to the device tree,8,2,10
torvalds/linux,482deed9dfa065cf3f68372dadac857541c7d504,Linus Torvalds,2025-07-04T16:29:22Z,"Merge tag 'bcachefs-2025-07-03' of git://evilpiepirate.org/bcachefs  Pull bcachefs fixes from Kent Overstreet:  ""The 'opts.casefold_disabled' patch is non critical, but would be a   6.15 backport; it's to address the casefolding + overlayfs   incompatibility that was discovvered late.    It's late because I was hoping that this would be addressed on the   overlayfs side (and will be in 6.17), but user reports keep coming in   on this one (lots of people are using docker these days)""  * tag 'bcachefs-2025-07-03' of git://evilpiepirate.org/bcachefs:   bcachefs: opts.casefold_disabled   bcachefs: Work around deadlock to btree node rewrites in journal replay   bcachefs: Fix incorrect transaction restart handling   bcachefs: fix btree_trans_peek_prev_journal()   bcachefs: mark invalid_btree_id autofix",93,54,147
torvalds/linux,2eb7f03acf4ac5db937974e99e75dac4c2c5a83d,Linus Torvalds,2025-07-04T16:06:49Z,"Merge tag 'vfs-6.16-rc5.fixes' of git://git.kernel.org/pub/scm/linux/kernel/git/vfs/vfs  Pull vfs fixes from Christian Brauner:   - Fix a regression caused by the anonymous inode rework. Making them    regular files causes various places in the kernel to tip over    starting with io_uring.     Revert to the former status quo and port our assertion to be based on    checking the inode so we don't lose the valuable VFS_*_ON_*()    assertions that have already helped discover weird behavior our    outright bugs.   - Fix the the upper bound calculation in fuse_fill_write_pages()   - Fix priority inversion issues in the eventpoll code   - Make secretmen use anon_inode_make_secure_inode() to avoid bypassing    the LSM layer   - Fix a netfs hang due to missing case in final DIO read result    collection   - Fix a double put of the netfs_io_request struct   - Provide some helpers to abstract out NETFS_RREQ_IN_PROGRESS flag    wrangling   - Fix infinite looping in netfs_wait_for_pause/request()   - Fix a netfs ref leak on an extra subrequest inserted into a request's    list of subreqs   - Fix various cifs RPC callbacks to set NETFS_SREQ_NEED_RETRY if a    subrequest fails retriably   - Fix a cifs warning in the workqueue code when reconnecting a channel   - Fix the updating of i_size in netfs to avoid a race between testing    if we should have extended the file with a DIO write and changing    i_size   - Merge the places in netfs that update i_size on write   - Fix coredump socket selftests  * tag 'vfs-6.16-rc5.fixes' of git://git.kernel.org/pub/scm/linux/kernel/git/vfs/vfs:   anon_inode: rework assertions   netfs: Update tracepoints in a number of ways   netfs: Renumber the NETFS_RREQ_* flags to make traces easier to read   netfs: Merge i_size update functions   netfs: Fix i_size updating   smb: client: set missing retry flag in cifs_writev_callback()   smb: client: set missing retry flag in cifs_readv_callback()   smb: client: set missing retry flag in smb2_writev_callback()   netfs: Fix ref leak on inserted extra subreq in write retry   netfs: Fix looping in wait functions   netfs: Provide helpers to perform NETFS_RREQ_IN_PROGRESS flag wangling   netfs: Fix double put of request   netfs: Fix hang due to missing case in final DIO read result collection   eventpoll: Fix priority inversion problem   fuse: fix fuse_fill_write_pages() upper bound calculation   fs: export anon_inode_make_secure_inode() and fix secretmem LSM bypass   selftests/coredump: Fix ""socket_detect_userspace_client"" test failure",351,438,789
torvalds/linux,4f5b1aa2e40651c8ec196c15e6e8c07e3a0314ca,Takashi Iwai,2025-07-04T15:53:03Z,"Merge tag 'asoc-fix-v6.16-rc4' of https://git.kernel.org/pub/scm/linux/kernel/git/broonie/sound into for-linus  ASoC: Fixes for v6.16  An update for the MAINTAINERS file, plus a number of small driver specific fixes and device quirks.",3434,2006,5440
torvalds/linux,9dd1757493416310a5e71146a08bc228869f8dae,Anshuman Khandual,2025-07-04T06:38:12Z,"arm64/mm: Drop wrong writes into TCR2_EL1  Register X0 contains PIE_E1_ASM and should not be written into REG_TCR2_EL1 which could have an adverse impact otherwise. This has remained undetected till now probably because current value for PIE_E1_ASM (0xcc880e0ac0800000) clears TCR2_EL1 which again gets set subsequently with 'tcr2' after testing for FEAT_TCR2.  Drop this unwarranted 'msr' which is a stray change from an earlier commit. This line got re-introduced when rebasing on top of the commit 926b66e2ebc8 (""arm64: setup: name 'tcr2' register"").  Cc: Catalin Marinas <catalin.marinas@arm.com> Cc: Will Deacon <will@kernel.org> Cc: Ryan Roberts <ryan.roberts@arm.com> Cc: Marc Zyngier <maz@kernel.org> Cc: Mark Rutland <mark.rutland@arm.com> Cc: linux-arm-kernel@lists.infradead.org Cc: linux-kernel@vger.kernel.org Fixes: 7052e808c446 (""arm64/sysreg: Get rid of the TCR2_EL1x SysregFields"") Acked-by: Marc Zyngier <maz@kernel.org> Signed-off-by: Anshuman Khandual <anshuman.khandual@arm.com> Link: https://lore.kernel.org/r/20250704063812.298914-1-anshuman.khandual@arm.com Signed-off-by: Will Deacon <will@kernel.org>",0,1,1
torvalds/linux,22f3a4f6085951eff28bd1e44d3f388c1d9a5f44,Kevin Brodsky,2025-06-19T16:00:41Z,"arm64: poe: Handle spurious Overlay faults  We do not currently issue an ISB after updating POR_EL0 when context-switching it, for instance. The rationale is that if the old value of POR_EL0 is more restrictive and causes a fault during uaccess, the access will be retried [1]. In other words, we are trading an ISB on every context-switching for the (unlikely) possibility of a spurious fault. We may also miss faults if the new value of POR_EL0 is more restrictive, but that's considered acceptable.  However, as things stand, a spurious Overlay fault results in uaccess failing right away since it causes fault_from_pkey() to return true. If an Overlay fault is reported, we therefore need to double check POR_EL0 against vma_pkey(vma) - this is what arch_vma_access_permitted() already does.  As it turns out, we already perform that explicit check if no Overlay fault is reported, and we need to keep that check (see comment added in fault_from_pkey()). Net result: the Overlay ISS2 bit isn't of much help to decide whether a pkey fault occurred.  Remove the check for the Overlay bit from fault_from_pkey() and add a comment to try and explain the situation. While at it, also add a comment to permission_overlay_switch() in case anyone gets surprised by the lack of ISB.  [1] https://lore.kernel.org/linux-arm-kernel/ZtYNGBrcE-j35fpw@arm.com/  Fixes: 160a8e13de6c (""arm64: context switch POR_EL0 register"") Signed-off-by: Kevin Brodsky <kevin.brodsky@arm.com> Link: https://lore.kernel.org/r/20250619160042.2499290-2-kevin.brodsky@arm.com Signed-off-by: Will Deacon <will@kernel.org>",26,9,35
torvalds/linux,a75ad2fc76a2ab70817c7eed3163b66ea84ca6ac,Mark Brown,2025-06-20T11:28:48Z,"arm64: Filter out SME hwcaps when FEAT_SME isn't implemented  We have a number of hwcaps for various SME subfeatures enumerated via ID_AA64SMFR0_EL1. Currently we advertise these without cross checking against the main SME feature, advertised in ID_AA64PFR1_EL1.SME which means that if the two are out of sync userspace can see a confusing situation where SME subfeatures are advertised without the base SME hwcap. This can be readily triggered by using the arm64.nosme override which only masks out ID_AA64PFR1_EL1.SME, and there have also been reports of VMMs which do the same thing.  Fix this as we did previously for SVE in 064737920bdb (""arm64: Filter out SVE hwcaps when FEAT_SVE isn't implemented"") by filtering out the SME subfeature hwcaps when FEAT_SME is not present.  Fixes: 5e64b862c482 (""arm64/sme: Basic enumeration support"") Reported-by: Yury Khrustalev <yury.khrustalev@arm.com> Signed-off-by: Mark Brown <broonie@kernel.org> Cc: stable@vger.kernel.org Link: https://lore.kernel.org/r/20250620-arm64-sme-filter-hwcaps-v1-1-02b9d3c2d8ef@kernel.org Signed-off-by: Will Deacon <will@kernel.org>",32,25,57
torvalds/linux,6c66bb655ca3fd5e9304163cf70796d08de512ed,Arnd Bergmann,2025-06-20T11:10:41Z,"arm64: move smp_send_stop() cpu mask off stack  For really large values of CONFIG_NR_CPUS, a CPU mask value should not be put on the stack:  arch/arm64/kernel/smp.c:1188:1: error: the frame size of 8544 bytes is larger than 1536 bytes [-Werror=frame-larger-than=]  This could be achieved using alloc_cpumask_var(), which makes it depend on CONFIG_CPUMASK_OFFSTACK, but as this function is already serialized and can only run on one CPU, making the variable 'static' is easier.  Signed-off-by: Arnd Bergmann <arnd@arndb.de> Reviewed-by: Catalin Marinas <catalin.marinas@arm.com> Link: https://lore.kernel.org/r/20250620111045.3364827-1-arnd@kernel.org Signed-off-by: Will Deacon <will@kernel.org>",1,1,2
torvalds/linux,d38376b3ee48d073c64e75e150510d7e6b4b04f7,Alessio Belle,2025-06-24T14:22:08Z,"drm/imagination: Fix kernel crash when hard resetting the GPU  The GPU hard reset sequence calls pm_runtime_force_suspend() and pm_runtime_force_resume(), which according to their documentation should only be used during system-wide PM transitions to sleep states.  The main issue though is that depending on some internal runtime PM state as seen by pm_runtime_force_suspend() (whether the usage count is <= 1), pm_runtime_force_resume() might not resume the device unless needed. If that happens, the runtime PM resume callback pvr_power_device_resume() is not called, the GPU clocks are not re-enabled, and the kernel crashes on the next attempt to access GPU registers as part of the power-on sequence.  Replace calls to pm_runtime_force_suspend() and pm_runtime_force_resume() with direct calls to the driver's runtime PM callbacks, pvr_power_device_suspend() and pvr_power_device_resume(), to ensure clocks are re-enabled and avoid the kernel crash.  Fixes: cc1aeedb98ad (""drm/imagination: Implement firmware infrastructure and META FW support"") Signed-off-by: Alessio Belle <alessio.belle@imgtec.com> Reviewed-by: Matt Coster <matt.coster@imgtec.com> Link: https://lore.kernel.org/r/20250624-fix-kernel-crash-gpu-hard-reset-v1-1-6d24810d72a6@imgtec.com Cc: stable@vger.kernel.org Signed-off-by: Matt Coster <matt.coster@imgtec.com>",2,2,4
torvalds/linux,0d1c86b840966a278d9b25a9d7c18881980f306e,Mark Brown,2025-06-19T21:15:41Z,"arm64/gcs: Don't try to access GCS registers if arm64.nogcs is enabled  During EL2 setup if GCS is advertised in the ID registers we will reset the GCS control registers GCSCR_EL1 and GCSCRE0_EL1 to known values in order to ensure it is disabled. This is done without taking into account overrides supplied on the command line, meaning that if the user has configured arm64.nogcs we will still access these GCS specific registers. If this was done because EL3 does not enable GCS this results in traps to EL3 and a failed boot which is not what users would expect from having set that parameter.  Move the writes to these registers to finalise_el2_state where we can pay attention to the command line overrides. For simplicity we leave the updates to the traps in HCRX_EL2 and the FGT registers in place since these should only be relevant for KVM guests and KVM will manage them itself for guests. This follows the existing practice for other similar traps for overridable features such as those for TPIDR2_EL0 and SMPRI_EL1.  Signed-off-by: Mark Brown <broonie@kernel.org> Link: https://lore.kernel.org/r/20250619-arm64-fix-nogcs-v1-1-febf2973672e@kernel.org Signed-off-by: Will Deacon <will@kernel.org>",7,12,19
torvalds/linux,727c2a53cf959f599493c50a80fe2a356b8b1df6,Marc Zyngier,2025-06-13T14:19:36Z,"arm64: Unconditionally select CONFIG_JUMP_LABEL  Aneesh reports that his kernel fails to boot in nVHE mode with KVM's protected mode enabled. Further investigation by Mostafa reveals that this fails because CONFIG_JUMP_LABEL=n and that we have static keys shared between EL1 and EL2.  While this can be worked around, it is obvious that we have long relied on having CONFIG_JUMP_LABEL enabled at all times, as all supported compilers now have 'asm goto' (which is the basic block for jump labels).  Let's simplify our lives once and for all by mandating jump labels. It's not like anyone else is testing anything without them, and we already rely on them for other things (kfence, xfs, preempt).  Link: https://lore.kernel.org/r/yq5ah60pkq03.fsf@kernel.org Reported-by: Aneesh Kumar K.V <aneesh.kumar@kernel.org> Reported-by: Mostafa Saleh <smostafa@google.com> Signed-off-by: Marc Zyngier <maz@kernel.org> Cc: Will Deacon <will@kernel.org> Cc: Catalin marinas <catalin.marinas@arm.com> Cc: Mark Rutland <mark.rutland@arm.com> Cc: Ard Biesheuvel <ardb@kernel.org> Acked-by: Mark Rutland <mark.rutland@arm.com> Link: https://lore.kernel.org/r/20250613141936.2219895-1-maz@kernel.org Signed-off-by: Will Deacon <will@kernel.org>",2,2,4
torvalds/linux,ef8923e6c051a98164c2889db943df9695a39888,Breno Leitao,2025-07-04T12:47:07Z,"arm64: efi: Fix KASAN false positive for EFI runtime stack  KASAN reports invalid accesses during arch_stack_walk() for EFI runtime services due to vmalloc tagging[1]. The EFI runtime stack must be allocated with KASAN tags reset to avoid false positives.  This patch uses arch_alloc_vmap_stack() instead of __vmalloc_node() for EFI stack allocation, which internally calls kasan_reset_tag()  The changes ensure EFI runtime stacks are properly sanitized for KASAN while maintaining functional consistency.  Link: https://lore.kernel.org/all/aFVVEgD0236LdrL6@gmail.com/ [1] Suggested-by: Andrey Konovalov <andreyknvl@gmail.com> Suggested-by: Catalin Marinas <catalin.marinas@arm.com> Reviewed-by: Catalin Marinas <catalin.marinas@arm.com> Signed-off-by: Breno Leitao <leitao@debian.org> Link: https://lore.kernel.org/r/20250704-arm_kasan-v2-1-32ebb4fd7607@debian.org Signed-off-by: Will Deacon <will@kernel.org>",8,3,11
torvalds/linux,b9fd9888a5654e59f6c6249337e36c53c1faa329,Jason Xing,2025-07-02T06:48:22Z,"bnxt_en: eliminate the compile warning in bnxt_request_irq due to CONFIG_RFS_ACCEL  I received a kernel-test-bot report[1] that shows the [-Wunused-but-set-variable] warning. Since the previous commit I made, as the 'Fixes' tag shows, gives users an option to turn on and off the CONFIG_RFS_ACCEL, the issue then can be discovered and reproduced with GCC specifically.  Like Simon and Jakub suggested, use fewer #ifdefs which leads to fewer bugs.  [1] All warnings (new ones prefixed by >>):     drivers/net/ethernet/broadcom/bnxt/bnxt.c: In function 'bnxt_request_irq': >> drivers/net/ethernet/broadcom/bnxt/bnxt.c:10703:9: warning: variable 'j' set but not used [-Wunused-but-set-variable]    10703 |  int i, j, rc = 0;          |         ^  Fixes: 9b6a30febddf (""net: allow rps/rfs related configs to be switched"") Reported-by: kernel test robot <lkp@intel.com> Closes: https://lore.kernel.org/oe-kbuild-all/202506282102.x1tXt0qz-lkp@intel.com/ Signed-off-by: Jason Xing <kernelxing@tencent.com> Reviewed-by: Simon Horman <horms@kernel.org> Signed-off-by: David S. Miller <davem@davemloft.net>",4,6,10
torvalds/linux,44306a684cd1699b8562a54945ddc43e2abc9eab,Mikko Perttunen,2025-07-02T02:08:07Z,"drm/tegra: nvdec: Fix dma_alloc_coherent error check  Check for NULL return value with dma_alloc_coherent, in line with Robin's fix for vic.c in 'drm/tegra: vic: Fix DMA API misuse'.  Fixes: 46f226c93d35 (""drm/tegra: Add NVDEC driver"") Signed-off-by: Mikko Perttunen <mperttunen@nvidia.com> Signed-off-by: Thierry Reding <treding@nvidia.com> Link: https://lore.kernel.org/r/20250702-nvdec-dma-error-check-v1-1-c388b402c53a@nvidia.com",2,4,6
torvalds/linux,fc975cfb36393db1db517fbbe366e550bcdcff14,kuyo chang,2025-07-02T02:12:25Z,"sched/deadline: Fix dl_server runtime calculation formula  In our testing with 6.12 based kernel on a big.LITTLE system, we were seeing instances of RT tasks being blocked from running on the LITTLE cpus for multiple seconds of time, apparently by the dl_server. This far exceeds the default configured 50ms per second runtime.  This is due to the fair dl_server runtime calculation being scaled for frequency & capacity of the cpu.  Consider the following case under a Big.LITTLE architecture: Assume the runtime is: 50,000,000 ns, and Frequency/capacity scale-invariance defined as below: Frequency scale-invariance: 100 Capacity scale-invariance: 50 First by Frequency scale-invariance, the runtime is scaled to 50,000,000 * 100 >> 10 = 4,882,812 Then by capacity scale-invariance, it is further scaled to 4,882,812 * 50 >> 10 = 238,418. So it will scaled to 238,418 ns.  This smaller ""accounted runtime"" value is what ends up being subtracted against the fair-server's runtime for the current period. Thus after 50ms of real time, we've only accounted ~238us against the fair servers runtime. This 209:1 ratio in this example means that on the smaller cpu the fair server is allowed to continue running, blocking RT tasks, for over 10 seconds before it exhausts its supposed 50ms of runtime.  And on other hardware configurations it can be even worse.  For the fair deadline_server, to prevent realtime tasks from being unexpectedly delayed, we really do want to use fixed time, and not scaled time for smaller capacity/frequency cpus. So remove the scaling from the fair server's accounting to fix this.  Fixes: a110a81c52a9 (""sched/deadline: Deferrable dl server"") Suggested-by: Peter Zijlstra <peterz@infradead.org> Suggested-by: John Stultz <jstultz@google.com> Signed-off-by: kuyo chang <kuyo.chang@mediatek.com> Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org> Acked-by: Juri Lelli <juri.lelli@redhat.com> Acked-by: John Stultz <jstultz@google.com> Tested-by: John Stultz <jstultz@google.com> Link: https://lore.kernel.org/r/20250702021440.2594736-1-kuyo.chang@mediatek.com",5,5,10
torvalds/linux,25b1b75bbaf96331750fb01302825069657b2ff8,Lu Baolu,2025-06-28T10:03:51Z,"iommu/vt-d: Assign devtlb cache tag on ATS enablement  Commit <4f1492efb495> (""iommu/vt-d: Revert ATS timing change to fix boot failure"") placed the enabling of ATS in the probe_finalize callback. This occurs after the default domain attachment, which is when the ATS cache tag is assigned. Consequently, the device TLB cache tag is missed when the domain is attached, leading to the device TLB not being invalidated in the iommu_unmap paths.  Fix this by assigning the CACHE_TAG_DEVTLB cache tag when ATS is enabled.  Fixes: 4f1492efb495 (""iommu/vt-d: Revert ATS timing change to fix boot failure"") Cc: stable@vger.kernel.org Suggested-by: Kevin Tian <kevin.tian@intel.com> Signed-off-by: Lu Baolu <baolu.lu@linux.intel.com> Tested-by: Shuicheng Lin <shuicheng.lin@intel.com> Reviewed-by: Kevin Tian <kevin.tian@intel.com> Link: https://lore.kernel.org/r/20250625050135.3129955-1-baolu.lu@linux.intel.com Link: https://lore.kernel.org/r/20250628100351.3198955-2-baolu.lu@linux.intel.com Signed-off-by: Joerg Roedel <joerg.roedel@amd.com>",14,4,18
torvalds/linux,5285b5ed04ab6ad40f7b654eefbccd6ae8cbf415,Milan Krstic,2025-07-03T14:30:39Z,"pinctrl: aw9523: fix can_sleep flag for GPIO chip  The GPIO expander is connected via I2C, thus the can_sleep flag has to be set to true. This fixes spurious ""scheduling while atomic"" bugs in the kernel ringbuffer.  Signed-off-by: David Bauer <mail@david-bauer.net> Signed-off-by: Milan Krstic <milan.krstic@gmail.com> Link: https://lore.kernel.org/20250703143039.5809-1-milan.krstic@gmail.com Signed-off-by: Linus Walleij <linus.walleij@linaro.org>",1,1,2
torvalds/linux,30e0fd3c0273dc106320081793793a424f1f1950,Hugo Villeneuve,2025-07-03T19:18:29Z,"gpiolib: fix performance regression when using gpio_chip_get_multiple()  commit 74abd086d2ee (""gpiolib: sanitize the return value of gpio_chip::get_multiple()"") altered the value returned by gc->get_multiple() in case it is positive (> 0), but failed to return for other cases (<= 0).  This may result in the ""if (gc->get)"" block being executed and thus negates the performance gain that is normally obtained by using gc->get_multiple().  Fix by returning the result of gc->get_multiple() if it is <= 0.  Also move the ""ret"" variable to the scope where it is used, which as an added bonus fixes an indentation error introduced by the aforementioned commit.  Fixes: 74abd086d2ee (""gpiolib: sanitize the return value of gpio_chip::get_multiple()"") Cc: stable@vger.kernel.org Signed-off-by: Hugo Villeneuve <hvilleneuve@dimonoff.com> Link: https://lore.kernel.org/r/20250703191829.2952986-1-hugo@hugovil.com Signed-off-by: Bartosz Golaszewski <bartosz.golaszewski@linaro.org>",3,2,5
torvalds/linux,043faef334a1f3d96ae88e1b7618bfa2b4946388,Thorsten Blum,2025-07-03T20:06:13Z,"ALSA: ad1816a: Fix potential NULL pointer deref in snd_card_ad1816a_pnp()  Use pr_warn() instead of dev_warn() when 'pdev' is NULL to avoid a potential NULL pointer dereference.  Cc: stable@vger.kernel.org Fixes: 20869176d7a7 (""ALSA: ad1816a: Use standard print API"") Signed-off-by: Thorsten Blum <thorsten.blum@linux.dev> Link: https://patch.msgid.link/20250703200616.304309-2-thorsten.blum@linux.dev Signed-off-by: Takashi Iwai <tiwai@suse.de>",1,1,2
torvalds/linux,4cf65845fdd09d711fc7546d60c9abe010956922,Yunshui Jiang,2025-07-04T04:56:02Z,"Input: cs40l50-vibra - fix potential NULL dereference in cs40l50_upload_owt()  The cs40l50_upload_owt() function allocates memory via kmalloc() without checking for allocation failure, which could lead to a NULL pointer dereference.  Return -ENOMEM in case allocation fails.  Signed-off-by: Yunshui Jiang <jiangyunshui@kylinos.cn> Fixes: c38fe1bb5d21 (""Input: cs40l50 - Add support for the CS40L50 haptic driver"") Link: https://lore.kernel.org/r/20250704024010.2353841-1-jiangyunshui@kylinos.cn Cc: stable@vger.kernel.org Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>",2,0,2
torvalds/linux,b969f9614885c20f903e1d1f9445611daf161d6d,Al Viro,2025-06-30T06:52:13Z,"fix proc_sys_compare() handling of in-lookup dentries  There's one case where ->d_compare() can be called for an in-lookup dentry; usually that's nothing special from ->d_compare() point of view, but... proc_sys_compare() is weird.  The thing is, /proc/sys subdirectories can look differently for different processes.  Up to and including having the same name resolve to different dentries - all of them hashed.  The way it's done is ->d_compare() refusing to admit a match unless this dentry is supposed to be visible to this caller.  The information needed to discriminate between them is stored in inode; it is set during proc_sys_lookup() and until it's done d_splice_alias() we really can't tell who should that dentry be visible for.  Normally there's no negative dentries in /proc/sys; we can run into a dying dentry in RCU dcache lookup, but those can be safely rejected.  However, ->d_compare() is also called for in-lookup dentries, before they get positive - or hashed, for that matter.  In case of match we will wait until dentry leaves in-lookup state and repeat ->d_compare() afterwards.  In other words, the right behaviour is to treat the name match as sufficient for in-lookup dentries; if dentry is not for us, we'll see that when we recheck once proc_sys_lookup() is done with it.  While we are at it, fix the misspelled READ_ONCE and WRITE_ONCE there.  Fixes: d9171b934526 (""parallel lookups machinery, part 4 (and last)"") Reported-by: NeilBrown <neilb@brown.name> Reviewed-by: Christian Brauner <brauner@kernel.org> Reviewed-by: NeilBrown <neil@brown.name> Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>",12,8,20
torvalds/linux,da8d8e9001c6a3741e9bec26a6cdcfd75ecabc88,Dave Airlie,2025-07-04T00:01:49Z,Merge tag 'drm-xe-fixes-2025-07-03' of https://gitlab.freedesktop.org/drm/xe/kernel into drm-fixes  Driver Changes: - Fix chunking the PTE updates and overflowing the maximum number of   dwords with with MI_STORE_DATA_IMM (Jia Yao) - Move WA BB to the LRC BO to mitigate hangs on context switch (Matthew   Brost) - Fix frequency/flush WAs for BMG (Vinay / Lucas) - Fix kconfig prompt title and description (Lucas) - Do not require kunit (Harry Austen / Lucas) - Extend 14018094691 WA to BMG (Daniele) - Fix wedging the device on signal (Matthew Brost)  Signed-off-by: Dave Airlie <airlied@redhat.com>  From: Lucas De Marchi <lucas.demarchi@intel.com> Link: https://lore.kernel.org/r/o5662wz6nrlf6xt5sjgxq5oe6qoujefzywuwblm3m626hreifv@foqayqydd6ig,310,135,445
torvalds/linux,3363da82e02f1bddc54faa92ea430c6532e2cd2e,Paulo Alcantara,2025-07-03T20:57:19Z,"smb: client: fix native SMB symlink traversal  We've seen customers having shares mounted in paths like /??/C:/ or /??/UNC/foo.example.com/share in order to get their native SMB symlinks successfully followed from different mounts.  After commit 12b466eb52d9 (""cifs: Fix creating and resolving absolute NT-style symlinks""), the client would then convert absolute paths from ""/??/C:/"" to ""/mnt/c/"" by default.  The absolute paths would vary depending on the value of symlinkroot= mount option.  Fix this by restoring old behavior of not trying to convert absolute paths by default.  Only do this if symlinkroot= was _explicitly_ set.  Before patch:    $ mount.cifs //w22-fs0/test2 /mnt/1 -o vers=3.1.1,username=xxx,password=yyy   $ ls -l /mnt/1/symlink2   lrwxr-xr-x 1 root root 15 Jun 20 14:22 /mnt/1/symlink2 -> /mnt/c/testfile   $ mkdir -p /??/C:; echo foo > //??/C:/testfile   $ cat /mnt/1/symlink2   cat: /mnt/1/symlink2: No such file or directory  After patch:    $ mount.cifs //w22-fs0/test2 /mnt/1 -o vers=3.1.1,username=xxx,password=yyy   $ ls -l /mnt/1/symlink2   lrwxr-xr-x 1 root root 15 Jun 20 14:22 /mnt/1/symlink2 -> '/??/C:/testfile'   $ mkdir -p /??/C:; echo foo > //??/C:/testfile   $ cat /mnt/1/symlink2   foo  Cc: linux-cifs@vger.kernel.org Reported-by: Pierguido Lambri <plambri@redhat.com> Cc: David Howells <dhowells@redhat.com> Cc: Stefan Metzmacher <metze@samba.org> Fixes: 12b466eb52d9 (""cifs: Fix creating and resolving absolute NT-style symlinks"") Signed-off-by: Paulo Alcantara (Red Hat) <pc@manguebit.org> Signed-off-by: Steve French <stfrench@microsoft.com>",20,19,39
torvalds/linux,266b5d02e14f3a0e07414e11f239397de0577a1d,Wang Zhaolong,2025-07-03T13:29:52Z,"smb: client: fix race condition in negotiate timeout by using more precise timing  When the SMB server reboots and the client immediately accesses the mount point, a race condition can occur that causes operations to fail with ""Host is down"" error.  Reproduction steps:   # Mount SMB share   mount -t cifs //192.168.245.109/TEST /mnt/ -o xxxx   ls /mnt    # Reboot server   ssh root@192.168.245.109 reboot   ssh root@192.168.245.109 /path/to/cifs_server_setup.sh   ssh root@192.168.245.109 systemctl stop firewalld    # Immediate access fails   ls /mnt   ls: cannot access '/mnt': Host is down    # But works if there is a delay  The issue is caused by a race condition between negotiate and reconnect. The 20-second negotiate timeout mechanism can interfere with the normal recovery process when both are triggered simultaneously.    ls                              cifsd ---------------------------------------------------  cifs_getattr  cifs_revalidate_dentry  cifs_get_inode_info  cifs_get_fattr  smb2_query_path_info  smb2_compound_op  SMB2_open_init  smb2_reconnect  cifs_negotiate_protocol   smb2_negotiate    cifs_send_recv     smb_send_rqst     wait_for_response                             cifs_demultiplex_thread                               cifs_read_from_socket                               cifs_readv_from_socket                                 server_unresponsive                                 cifs_reconnect                                   __cifs_reconnect                                   cifs_abort_connection                                     mid->mid_state = MID_RETRY_NEEDED                                     cifs_wake_up_task     cifs_sync_mid_result      // case MID_RETRY_NEEDED      rc = -EAGAIN;    // In smb2_negotiate()    rc = -EHOSTDOWN;  The server_unresponsive() timeout triggers cifs_reconnect(), which aborts ongoing mid requests and causes the ls command to receive -EAGAIN, leading to -EHOSTDOWN.  Fix this by introducing a dedicated `neg_start` field to precisely tracks when the negotiate process begins. The timeout check now uses this accurate timestamp instead of `lstrp`, ensuring that:  1. Timeout is only triggered after negotiate has actually run for 20s 2. The mechanism doesn't interfere with concurrent recovery processes 3. Uninitialized timestamps (value 0) don't trigger false timeouts  Fixes: 7ccc1465465d (""smb: client: fix hang in wait_for_response() for negproto"") Signed-off-by: Wang Zhaolong <wangzhaolong@huaweicloud.com> Signed-off-by: Steve French <stfrench@microsoft.com>",5,3,8
torvalds/linux,8f954c435f609656308b6f8fe3225e7e22c0076a,Dave Airlie,2025-07-03T23:40:17Z,"Merge tag 'samsung-dsim-fixes-for-v6.16-rc4' of git://git.kernel.org/pub/scm/linux/kernel/git/daeinki/drm-exynos into drm-fixes  - Fixed raw pointer leakage and unsafe behavior in printk()   . Switch from %pK to %p for pointer formatting, as %p is now safer     and prevents issues like raw pointer leakage and acquiring sleeping     locks in atomic contexts.  Signed-off-by: Dave Airlie <airlied@redhat.com>  From: Inki Dae <inki.dae@samsung.com> Link: https://lore.kernel.org/r/20250629091742.29956-1-inki.dae@samsung.com",2,2,4
torvalds/linux,ac2ad73e75596189603995cd4283949863fd7e55,Dave Airlie,2025-07-03T23:37:57Z,"Merge tag 'exynos-drm-fixes-for-v6.16-rc4' of git://git.kernel.org/pub/scm/linux/kernel/git/daeinki/drm-exynos into drm-fixes  Fixups - Fixed raw pointer leakage and unsafe behavior in printk()   . Switch from %pK to %p for pointer formatting, as %p is now safer     and prevents issues like raw pointer leakage and acquiring sleeping     locks in atomic contexts.  - Fixed kernel panic during boot   . A NULL pointer dereference issue occasionally occurred     when the vblank interrupt handler was called before     the DRM driver was fully initialized during boot.     So this patch fixes the issue by adding a check in the interrupt handler     to ensure the DRM driver is properly initialized.  - Fixed a lockup issue on Samsung Peach-Pit/Pi Chromebooks   . The issue occurred after commit c9b1150a68d9 changed     the call order of CRTC enable/disable and bridge pre_enable/post_disable     methods, causing fimd_dp_clock_enable() to be called     before the FIMD device was activated. To fix this,     runtime PM guards were added to fimd_dp_clock_enable()     to ensure proper operation even when CRTC is not enabled.  Signed-off-by: Dave Airlie <airlied@redhat.com>  From: Inki Dae <inki.dae@samsung.com> Link: https://lore.kernel.org/r/20250629083554.28628-1-inki.dae@samsung.com",33,17,50
torvalds/linux,afd30ace71eecc3ba06815c9b554e801e85ab73a,Dave Airlie,2025-07-03T23:26:57Z,Merge tag 'drm-intel-fixes-2025-07-03' of https://gitlab.freedesktop.org/drm/i915/kernel into drm-fixes  - Make mei interrupt top half irq disabled to fix RT builds - Fix timeline left held on VMA alloc error - Fix NULL pointer deref in vlv_dphy_param_init() - Fix selftest mock_request() to avoid NULL deref  Signed-off-by: Dave Airlie <airlied@redhat.com> From: Joonas Lahtinen <joonas.lahtinen@linux.intel.com> Link: https://lore.kernel.org/r/aGYVPAA4KvsZqDFx@jlahtine-mobl,15,14,29
torvalds/linux,b91e11ec5cd972dc39121496c3a0cf2ec2e9a393,Dave Airlie,2025-07-03T23:06:56Z,Merge tag 'drm-misc-fixes-2025-07-03' of https://gitlab.freedesktop.org/drm/misc/kernel into drm-fixes  drm-misc-fixes for v6.16-rc5: - Replace simple panel lookup hack with proper fix. - nullpointer deref in vesadrm fix. - fix dma_resv_wait_timeout. - fix error handling in ttm_buffer_object_transfer. - bridge fixes. - Fix vmwgfx accidentally allocating encrypted memory. - Fix race in spsc_queue_push() - Add refcount on backing GEM objects during fb creation. - Fix v3d irq's being enabled during gpu reset.  Signed-off-by: Dave Airlie <airlied@redhat.com> From: Maarten Lankhorst <maarten.lankhorst@linux.intel.com> Link: https://lore.kernel.org/r/a7461418-08dc-4b7c-b2fa-264155f66d5e@linux.intel.com,205,94,299
torvalds/linux,2e9fdbe5ec7a65b66da9c202cac621a3a366fde3,Danilo Krummrich,2025-06-29T15:37:42Z,"rust: drm: device: drop_in_place() the drm::Device in release()  In drm::Device::new() we allocate with __drm_dev_alloc() and return an ARef<drm::Device>.  When the reference count of the drm::Device falls to zero, the C code automatically calls drm_dev_release(), which eventually frees the memory allocated in drm::Device::new().  However, due to that, drm::Device::drop() is never called. As a result the destructor of the user's private data, i.e. drm::Device::data is never called. Hence, fix this by calling drop_in_place() from the DRM device's release callback.  Fixes: 1e4b8896c0f3 (""rust: drm: add device abstraction"") Reviewed-by: Alice Ryhl <aliceryhl@google.com> Signed-off-by: Danilo Krummrich <dakr@kernel.org> Link: https://lore.kernel.org/r/20250629153747.72536-1-dakr@kernel.org",11,1,12
torvalds/linux,8ff4fb276e2384a87ae7f65f3c28e1e139dbb3fe,Mario Limonciello,2025-06-27T15:01:46Z,"pinctrl: amd: Clear GPIO debounce for suspend  soc-button-array hardcodes a debounce value by means of gpio_keys which uses pinctrl-amd as a backend to program debounce for a GPIO.  This hardcoded value doesn't match what the firmware intended to be programmed in _AEI. The hardcoded debounce leads to problems waking from suspend. There isn't appetite to conditionalize the behavior in soc-button-array or gpio-keys so clear it when the system suspends to avoid problems with being able to resume.  Cc: Dmitry Torokhov <dmitry.torokhov@gmail.com> Cc: Hans de Goede <hansg@kernel.org> Fixes: 5c4fa2a6da7fb (""Input: soc_button_array - debounce the buttons"") Link: https://lore.kernel.org/linux-input/mkgtrb5gt7miyg6kvqdlbu4nj3elym6ijudobpdi26gp4xxay5@rsa6ytrjvj2q/ Link: https://lore.kernel.org/linux-input/20250625215813.3477840-1-superm1@kernel.org/ Signed-off-by: Mario Limonciello <mario.limonciello@amd.com> Reviewed-by: Hans de Goede <hansg@kernel.org> Link: https://lore.kernel.org/20250627150155.3311574-1-superm1@kernel.org Signed-off-by: Linus Walleij <linus.walleij@linaro.org>",11,0,11
torvalds/linux,e79d0ba605d54dd47f3d8a487d00f264b896966c,Dave Airlie,2025-07-02T23:27:07Z,"nouveau/gsp: add a 50ms delay between fbsr and driver unload rpcs  This fixes a bunch of command hangs after runtime suspend/resume.  This fixes a regression caused by code movement in the commit below, the commit seems to just change timings enough to cause this to happen now, and adding the sleep seems to avoid it.  I've spent some time trying to root cause it to no great avail, it seems like a bug on the firmware side, but it could be a bug in our rpc handling that I can't find.  Either way, we should land the workaround to fix the problem, while we continue to work out the root cause.  Signed-off-by: Dave Airlie <airlied@redhat.com> Cc: Ben Skeggs <bskeggs@nvidia.com> Cc: Danilo Krummrich <dakr@kernel.org> Fixes: c21b039715ce (""drm/nouveau/gsp: add hals for fbsr.suspend/resume()"") Signed-off-by: Danilo Krummrich <dakr@kernel.org> Link: https://lore.kernel.org/r/20250702232707.175679-1-airlied@gmail.com",7,0,7
torvalds/linux,78f88067d5c56d9aed69f27e238742841461cf67,Aaron Thompson,2025-07-03T21:19:49Z,"drm/nouveau: Do not fail module init on debugfs errors  If CONFIG_DEBUG_FS is enabled, nouveau_drm_init() returns an error if it fails to create the ""nouveau"" directory in debugfs. One case where that will happen is when debugfs access is restricted by CONFIG_DEBUG_FS_ALLOW_NONE or by the boot parameter debugfs=off, which cause the debugfs APIs to return -EPERM.  So just ignore errors from debugfs. Note that nouveau_debugfs_root may be an error now, but that is a standard pattern for debugfs. From include/linux/debugfs.h:  ""NOTE: it's expected that most callers should _ignore_ the errors returned by this function. Other debugfs functions handle the fact that the ""dentry"" passed to them could be an error and they don't crash in that case. Drivers should generally work fine even if debugfs fails to init anyway.""  Fixes: 97118a1816d2 (""drm/nouveau: create module debugfs root"") Cc: stable@vger.kernel.org Signed-off-by: Aaron Thompson <dev@aaront.org> Acked-by: Timur Tabi <ttabi@nvidia.com> Signed-off-by: Danilo Krummrich <dakr@kernel.org> Link: https://lore.kernel.org/r/20250703211949.9916-1-dev@aaront.org",4,11,15
torvalds/linux,4c06e63b92038fadb566b652ec3ec04e228931e8,Linus Torvalds,2025-07-03T20:29:56Z,Merge tag 'for-6.16-rc4-tag' of git://git.kernel.org/pub/scm/linux/kernel/git/kdave/linux  Pull btrfs fixes from David Sterba:   - tree-log fixes:     - fixes of log tracking of directories and subvolumes     - fix iteration and error handling of inode references       during log replay   - fix free space tree rebuild (reported by syzbot)  * tag 'for-6.16-rc4-tag' of git://git.kernel.org/pub/scm/linux/kernel/git/kdave/linux:   btrfs: use btrfs_record_snapshot_destroy() during rmdir   btrfs: propagate last_unlink_trans earlier when doing a rmdir   btrfs: record new subvolume in parent dir earlier to avoid dir logging races   btrfs: fix inode lookup error handling during log replay   btrfs: fix iteration of extrefs during log replay   btrfs: fix missing error handling when searching for inode refs during log replay   btrfs: fix failure to rebuild free space tree using multiple transactions,131,88,219
torvalds/linux,025c1970da725b07701464990f747fe1c2bd797f,Linus Torvalds,2025-07-03T18:52:39Z,"Merge tag 'scsi-fixes' of git://git.kernel.org/pub/scm/linux/kernel/git/jejb/scsi  Pull SCSI fixes from James Bottomley:  ""Driver fixes plus core sd.c fix are all small and obvious.    The larger change to hosts.c is less obvious, but required to avoid   data corruption caused by bio splitting""  * tag 'scsi-fixes' of git://git.kernel.org/pub/scm/linux/kernel/git/jejb/scsi:   scsi: ufs: core: Fix spelling of a sysfs attribute name   scsi: core: Enforce unlimited max_segment_size when virt_boundary_mask is set   scsi: RDMA/srp: Don't set a max_segment_size when virt_boundary_mask is set   scsi: sd: Fix VPD page 0xb7 length check   scsi: qla4xxx: Fix missing DMA mapping error in qla4xxx_alloc_pdu()   scsi: qla2xxx: Fix DMA mapping test in qla24xx_get_port_database()",21,14,35
torvalds/linux,68279380266a5fa70e664de754503338e2ec3f43,Eric Biggers,2025-07-03T17:23:16Z,"crypto: s390/sha - Fix uninitialized variable in SHA-1 and SHA-2  Commit 88c02b3f79a6 (""s390/sha3: Support sha3 performance enhancements"") added the field s390_sha_ctx::first_message_part and made it be used by s390_sha_update() (now s390_sha_update_blocks()).  At the time, s390_sha_update() was used by all the s390 SHA-1, SHA-2, and SHA-3 algorithms.  However, only the initialization functions for SHA-3 were updated, leaving SHA-1 and SHA-2 using first_message_part uninitialized.  This could cause e.g. the function code CPACF_KIMD_SHA_512 | CPACF_KIMD_NIP to be used instead of just CPACF_KIMD_SHA_512.  This apparently was harmless, as the SHA-1 and SHA-2 function codes ignore CPACF_KIMD_NIP; it is recognized only by the SHA-3 function codes (https://lore.kernel.org/r/73477fe9-a1dc-4e38-98a6-eba9921e8afa@linux.ibm.com/). Therefore, this bug was found only when first_message_part was later converted to a boolean and UBSAN detected its uninitialized use. Regardless, let's fix this by just initializing to zero.  Note: in 6.16, we need to patch SHA-1, SHA-384, and SHA-512.  In 6.15 and earlier, we'll also need to patch SHA-224 and SHA-256, as they hadn't yet been librarified (which incidentally fixed this bug).  Fixes: 88c02b3f79a6 (""s390/sha3: Support sha3 performance enhancements"") Cc: stable@vger.kernel.org Reported-by: Ingo Franzki <ifranzki@linux.ibm.com> Closes: https://lore.kernel.org/r/12740696-595c-4604-873e-aefe8b405fbf@linux.ibm.com Acked-by: Heiko Carstens <hca@linux.ibm.com> Link: https://lore.kernel.org/r/20250703172316.7914-1-ebiggers@kernel.org Signed-off-by: Eric Biggers <ebiggers@kernel.org>",5,0,5
torvalds/linux,17bbde2e1716e2ee4b997d476b48ae85c5a47671,Linus Torvalds,2025-07-03T16:18:55Z,"Merge tag 'net-6.16-rc5' of git://git.kernel.org/pub/scm/linux/kernel/git/netdev/net  Pull networking fixes from Paolo Abeni:  ""Including fixes from Bluetooth.    Current release - new code bugs:      - eth:        - txgbe: fix the issue of TX failure        - ngbe: specify IRQ vector when the number of VFs is 7    Previous releases - regressions:      - sched: always pass notifications when child class becomes empty      - ipv4: fix stat increase when udp early demux drops the packet      - bluetooth: prevent unintended pause by checking if advertising is active      - virtio: fix error reporting in virtqueue_resize      - eth:        - virtio-net:           - ensure the received length does not exceed allocated size           - fix the xsk frame's length check        - lan78xx: fix WARN in __netif_napi_del_locked on disconnect    Previous releases - always broken:      - bluetooth: mesh: check instances prior disabling advertising      - eth:        - idpf: convert control queue mutex to a spinlock        - dpaa2: fix xdp_rxq_info leak        - amd-xgbe: align CL37 AN sequence as per databook""  * tag 'net-6.16-rc5' of git://git.kernel.org/pub/scm/linux/kernel/git/netdev/net: (38 commits)   vsock/vmci: Clear the vmci transport packet properly when initializing it   dt-bindings: net: sophgo,sg2044-dwmac: Drop status from the example   net: ngbe: specify IRQ vector when the number of VFs is 7   net: wangxun: revert the adjustment of the IRQ vector sequence   net: txgbe: request MISC IRQ in ndo_open   virtio_net: Enforce minimum TX ring size for reliability   virtio_net: Cleanup '2+MAX_SKB_FRAGS'   virtio_ring: Fix error reporting in virtqueue_resize   virtio-net: xsk: rx: fix the frame's length check   virtio-net: use the check_mergeable_len helper   virtio-net: remove redundant truesize check with PAGE_SIZE   virtio-net: ensure the received length does not exceed allocated size   net: ipv4: fix stat increase when udp early demux drops the packet   net: libwx: fix the incorrect display of the queue number   amd-xgbe: do not double read link status   net/sched: Always pass notifications when child class becomes empty   nui: Fix dma_mapping_error() check   rose: fix dangling neighbour pointers in rose_rt_device_down()   enic: fix incorrect MTU comparison in enic_change_mtu()   amd-xgbe: align CL37 AN sequence as per databook   ...",494,296,790
torvalds/linux,d32e907d15f7257f69d38b4c829f87a79ecf8b7f,Linus Torvalds,2025-07-03T16:00:04Z,Merge tag 'xfs-fixes-6.16-rc5' of git://git.kernel.org/pub/scm/fs/xfs/xfs-linux  Pull xfs fixes from Carlos Maiolino:   - Fix umount hang with unflushable inodes (and add new tracepoint used    for debugging this)   - Fix ABBA deadlock in xfs_reclaim_inode() vs xfs_ifree_cluster()   - Fix dquot buffer pin deadlock  * tag 'xfs-fixes-6.16-rc5' of git://git.kernel.org/pub/scm/fs/xfs/xfs-linux:   xfs: add FALLOC_FL_ALLOCATE_RANGE to supported flags mask   xfs: fix unmount hang with unflushable inodes stuck in the AIL   xfs: factor out stale buffer item completion   xfs: rearrange code in xfs_buf_item.c   xfs: add tracepoints for stale pinned inode state debug   xfs: avoid dquot buffer pin deadlock   xfs: catch stale AGF/AGF metadata   xfs: xfs_ifree_cluster vs xfs_iflush_shutdown_abort deadlock   xfs: actually use the xfs_growfs_check_rtgeom tracepoint   xfs: Improve error handling in xfs_mru_cache_create()   xfs: move xfs_submit_zoned_bio a bit   xfs: use xfs_readonly_buftarg in xfs_remount_rw   xfs: remove NULL pointer checks in xfs_mru_cache_insert   xfs: check for shutdown before going to sleep in xfs_select_zone,320,287,607
torvalds/linux,75ef7b8d44c30a76cfbe42dde9413d43055a00a7,Jens Axboe,2025-07-03T15:42:07Z,"Merge tag 'nvme-6.16-2025-07-03' of git://git.infradead.org/nvme into block-6.16  Pull NVMe fixes from Christoph:  ""- fix incorrect cdw15 value in passthru error logging (Alok Tiwari)  - fix memory leak of bio integrity in nvmet (Dmitry Bogdanov)  - refresh visible attrs after being checked (Eugen Hristev)  - fix suspicious RCU usage warning in the multipath code (Geliang Tang)  - correctly account for namespace head reference counter (Nilay Shroff)""  * tag 'nvme-6.16-2025-07-03' of git://git.infradead.org/nvme:   nvme-multipath: fix suspicious RCU usage warning   nvme-pci: refresh visible attrs after being checked   nvmet: fix memory leak of bio integrity   nvme: correctly account for namespace head reference counter   nvme: Fix incorrect cdw15 value in passthru error logging",28,6,34
torvalds/linux,c7349772c268ec3c91d83cbfbbcf63f1bd7c256c,Luiz Augusto von Dentz,2025-06-27T15:19:02Z,"Bluetooth: hci_event: Fix not marking Broadcast Sink BIS as connected  Upon receiving HCI_EVT_LE_BIG_SYNC_ESTABLISHED with status 0x00 (success) the corresponding BIS hci_conn state shall be set to BT_CONNECTED otherwise they will be left with BT_OPEN which is invalid at that point, also create the debugfs and sysfs entries following the same logic as the likes of Broadcast Source BIS and CIS connections.  Fixes: f777d8827817 (""Bluetooth: ISO: Notify user space about failed bis connections"") Signed-off-by: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>",3,0,3
torvalds/linux,314d30b1508682e27c8a324096262c66f23455d9,Luiz Augusto von Dentz,2025-07-03T13:45:08Z,"Bluetooth: hci_sync: Fix attempting to send HCI_Disconnect to BIS handle  BIS/PA connections do have their own cleanup proceedure which are performed by hci_conn_cleanup/bis_cleanup.  Fixes: 23205562ffc8 (""Bluetooth: separate CIS_LINK and BIS_LINK link types"") Signed-off-by: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>",1,1,2
torvalds/linux,59710a26a289ad4e7ef227d22063e964930928b0,Luiz Augusto von Dentz,2025-06-30T19:37:46Z,"Bluetooth: hci_core: Remove check of BDADDR_ANY in hci_conn_hash_lookup_big_state  The check for destination to be BDADDR_ANY is no longer necessary with the introduction of BIS_LINK.  Fixes: 23205562ffc8 (""Bluetooth: separate CIS_LINK and BIS_LINK link types"") Signed-off-by: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>",1,2,3
torvalds/linux,ef9675b0ef030d135413e8638989f3a7d1f3217a,Luiz Augusto von Dentz,2025-06-27T16:31:33Z,"Bluetooth: hci_sync: Fix not disabling advertising instance  As the code comments on hci_setup_ext_adv_instance_sync suggests the advertising instance needs to be disabled in order to update its parameters, but it was wrongly checking that !adv->pending.  Fixes: cba6b758711c (""Bluetooth: hci_sync: Make use of hci_cmd_sync_queue set 2"") Signed-off-by: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>",1,1,2
torvalds/linux,3f3fb97374308993dbe8884f44c2579a81b90bfa,Arnd Bergmann,2025-07-03T14:27:31Z,"Merge tag 'apple-soc-fixes-6.16' of https://git.kernel.org/pub/scm/linux/kernel/git/sven/linux into arm/fixes  Apple SoC fixes for 6.16  One devicetree fix for a dtbs_warning that's been present for a while: - Rename the PCIe BCM4377 node to conform to the devicetree binding   schema  Two devicetree fixes for W=1 warnings that have been introduced recently: - Drop {address,size}-cells from SPI NOR which doesn't have any child   nodes such that these don't make sense - Move touchbar mipi {address,size}-cells from the dtsi file where the   node is disabled and has no children to the dts file where it's   enabled and its children are declared  Signed-off-by: Sven Peter <sven@kernel.org>  * tag 'apple-soc-fixes-6.16' of https://git.kernel.org/pub/scm/linux/kernel/git/sven/linux:   arm64: dts: apple: Move touchbar mipi {address,size}-cells from dtsi to dts   arm64: dts: apple: Drop {address,size}-cells from SPI NOR   arm64: dts: apple: t8103: Fix PCIe BCM4377 nodename",5,7,12
torvalds/linux,c6754d77bd42d0ca35df8bdcf481b5984141ed1f,Arnd Bergmann,2025-07-03T14:26:08Z,Merge tag 'optee-fix-for-v6.16' of https://git.kernel.org/pub/scm/linux/kernel/git/jenswi/linux-tee into arm/fixes  A fix in the OP-TEE driver for v6.16  Fixing a sleep in atomic context in the FF-A notification callback by adding a work queue to process in a non-atomic context.  * tag 'optee-fix-for-v6.16' of https://git.kernel.org/pub/scm/linux/kernel/git/jenswi/linux-tee:   optee: ffa: fix sleep in atomic context,34,9,43
torvalds/linux,f31824a60213dd12bddd5b7c2e7e8adbeda61929,Arnd Bergmann,2025-07-03T14:23:53Z,"Merge tag 'samsung-fixes-6.16' of https://git.kernel.org/pub/scm/linux/kernel/git/krzk/linux into arm/fixes  Samsung SoC fixes for v6.16  1. Correct CONFIG option in arm64 defconfig enabling the Qualcomm SoC    SNPS EUSB2 phy driver, because Kconfig entry was renamed when    changing the driver to a common one, shared with Samsung SoC, thus    defconfig lost that driver effectively.  2. Exynos ACPM: Fix timeouts happening with multiple requests.  * tag 'samsung-fixes-6.16' of https://git.kernel.org/pub/scm/linux/kernel/git/krzk/linux:   firmware: exynos-acpm: fix timeouts on xfers handling   arm64: defconfig: update renamed PHY_SNPS_EUSB2",10,17,27
torvalds/linux,5459e16b215c18529782e7746992653f00de0779,Matthew Brost,2025-06-24T17:41:03Z,"drm/xe: Do not wedge device on killed exec queues  When a user closes an exec queue or interrupts an app with Ctrl-C, this does not warrant wedging the device in mode 2.  Avoid this by skipping the wedge check for killed exec queues in the TDR and LR exec queue cleanup worker.  Signed-off-by: Matthew Brost <matthew.brost@intel.com> Reviewed-by: Rodrigo Vivi <rodrigo.vivi@intel.com> Link: https://lore.kernel.org/r/20250624174103.2707941-1-matthew.brost@intel.com (cherry picked from commit 5a2f117a80c207372513ca8964eeb178874f4990) Signed-off-by: Lucas De Marchi <lucas.demarchi@intel.com>",6,4,10
torvalds/linux,d008fc65ebbc7d0f36c5a90c8b1ef117c295d8d8,Daniele Ceraolo Spurio,2025-06-13T23:11:29Z,"drm/xe: Extend WA 14018094691 to BMG  This WA is applicable to BMG as well.  Note that this is a GSC WA and we don't load the GSC on BMG, so extending the WA to BMG won't do anything right now. However, it helps future-proof the driver so that if we ever turn the GSC on we won't have to remember to extend this WA.  v2: don't use VERSION_RANGE from 2001 to 2004 (Matt)  Signed-off-by: Daniele Ceraolo Spurio <daniele.ceraolospurio@intel.com> Cc: Matt Roper <matthew.d.roper@intel.com> Reviewed-by: Matt Roper <matthew.d.roper@intel.com> Link: https://lore.kernel.org/r/20250613231128.1261815-2-daniele.ceraolospurio@intel.com (cherry picked from commit 1a5ce0c5b95b0624ebd44f574b98003a466973be) Signed-off-by: Lucas De Marchi <lucas.demarchi@intel.com>",2,1,3
torvalds/linux,9a5d769c9084678c0f21c3f9cf83ca17466a16fb,Arnd Bergmann,2025-07-03T11:56:15Z,"Merge tag 'ffa-fixes-6.16' of https://git.kernel.org/pub/scm/linux/kernel/git/sudeep.holla/linux into arm/fixes  Arm FF-A fixes for v6.16  Couple of fixes to address:  1. The safety and memory issues in the FF-A notification callback handler:     The fixes replaces a mutex with an rwlock to prevent sleeping in atomic    context, resolving kernel warnings. Memory allocation is moved outside    the lock to support this transition safely. Additionally, a memory leak    in the notifier unregistration path is fixed by properly freeing the    callback node.  2. The missing entry in struct ffa_indirect_msg_hdr:     The fix adds the missing 32 bit reserved entry in the structure as    required by the FF-A specification.  * tag 'ffa-fixes-6.16' of https://git.kernel.org/pub/scm/linux/kernel/git/sudeep.holla/linux:   firmware: arm_ffa: Fix the missing entry in struct ffa_indirect_msg_hdr   firmware: arm_ffa: Replace mutex with rwlock to avoid sleep in atomic context   firmware: arm_ffa: Move memory allocation outside the mutex locking   firmware: arm_ffa: Fix memory leak by freeing notifier callback node  Link: https://lore.kernel.org/r/20250609105207.1185570-1-sudeep.holla@arm.com Signed-off-by: Arnd Bergmann <arnd@arndb.de>",37,35,72
torvalds/linux,c9764fd88bc744592b0604ccb6b6fc1a5f76b4e3,Manivannan Sadhasivam,2025-07-03T10:35:49Z,"regulator: gpio: Fix the out-of-bounds access to drvdata::gpiods  drvdata::gpiods is supposed to hold an array of 'gpio_desc' pointers. But the memory is allocated for only one pointer. This will lead to out-of-bounds access later in the code if 'config::ngpios' is > 1. So fix the code to allocate enough memory to hold 'config::ngpios' of GPIO descriptors.  While at it, also move the check for memory allocation failure to be below the allocation to make it more readable.  Cc: stable@vger.kernel.org # 5.0 Fixes: d6cd33ad7102 (""regulator: gpio: Convert to use descriptors"") Signed-off-by: Manivannan Sadhasivam <mani@kernel.org> Link: https://patch.msgid.link/20250703103549.16558-1-mani@kernel.org Signed-off-by: Mark Brown <broonie@kernel.org>",4,4,8
torvalds/linux,3b3312f28ee2d9c386602f8521e419cfc69f4823,Richard Fitzgerald,2025-07-03T10:25:21Z,"ASoC: cs35l56: probe() should fail if the device ID is not recognized  Return an error from driver probe if the DEVID read from the chip is not one supported by this driver.  In cs35l56_hw_init() there is a check for valid DEVID, but the invalid case was returning the value of ret. At this point in the code ret == 0 so the caller would think that cs35l56_hw_init() was successful.  Signed-off-by: Richard Fitzgerald <rf@opensource.cirrus.com> Fixes: 84851aa055c8 (""ASoC: cs35l56: Move part of cs35l56_init() to shared library"") Link: https://patch.msgid.link/20250703102521.54204-1-rf@opensource.cirrus.com Signed-off-by: Mark Brown <broonie@kernel.org>",1,1,2
torvalds/linux,de1675de39aa945bad5937d1fde4df3682670639,Rafael J. Wysocki,2025-07-03T10:54:55Z,"Revert ""ACPI: battery: negate current when discharging""  Revert commit 234f71555019 (""ACPI: battery: negate current when discharging"") breaks not one but several userspace implementations of battery monitoring: Steam and MangoHud. Perhaps it breaks more, but those are the two that have been tested.  Reported-by: Matthew Schwartz <matthew.schwartz@linux.dev> Closes: https://lore.kernel.org/linux-acpi/87C1B2AF-D430-4568-B620-14B941A8ABA4@linux.dev/ Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>",3,16,19
torvalds/linux,223e2288f4b8c262a864e2c03964ffac91744cd5,HarshaVardhana S A,2025-07-01T12:22:54Z,"vsock/vmci: Clear the vmci transport packet properly when initializing it  In vmci_transport_packet_init memset the vmci_transport_packet before populating the fields to avoid any uninitialised data being left in the structure.  Cc: Bryan Tan <bryan-bt.tan@broadcom.com> Cc: Vishnu Dasa <vishnu.dasa@broadcom.com> Cc: Broadcom internal kernel review list Cc: Stefano Garzarella <sgarzare@redhat.com> Cc: ""David S. Miller"" <davem@davemloft.net> Cc: Eric Dumazet <edumazet@google.com> Cc: Jakub Kicinski <kuba@kernel.org> Cc: Paolo Abeni <pabeni@redhat.com> Cc: Simon Horman <horms@kernel.org> Cc: virtualization@lists.linux.dev Cc: netdev@vger.kernel.org Cc: stable <stable@kernel.org> Signed-off-by: HarshaVardhana S A <harshavardhana.sa@broadcom.com> Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org> Fixes: d021c344051a (""VSOCK: Introduce VM Sockets"") Acked-by: Stefano Garzarella <sgarzare@redhat.com> Link: https://patch.msgid.link/20250701122254.2397440-1-gregkh@linuxfoundation.org Signed-off-by: Paolo Abeni <pabeni@redhat.com>",2,2,4
torvalds/linux,f030713e5abf67d0a88864c8855f809c763af954,Krzysztof Kozlowski,2025-07-01T06:36:22Z,"dt-bindings: net: sophgo,sg2044-dwmac: Drop status from the example  Examples should be complete and should not have a 'status' property, especially a disabled one because this disables the dt_binding_check of the example against the schema.  Dropping 'status' property shows missing other properties - phy-mode and phy-handle.  Fixes: 114508a89ddc (""dt-bindings: net: Add support for Sophgo SG2044 dwmac"") Cc: <stable@vger.kernel.org> Signed-off-by: Krzysztof Kozlowski <krzysztof.kozlowski@linaro.org> Reviewed-by: Alexander Sverdlin <alexander.sverdlin@gmail.com> Reviewed-by: Chen Wang <unicorn_wang@outlook.com> Link: https://patch.msgid.link/20250701063621.23808-2-krzysztof.kozlowski@linaro.org Signed-off-by: Paolo Abeni <pabeni@redhat.com>",2,1,3
torvalds/linux,b2f8ef030ef77130844c4b6f1eee28553163d5a7,Paolo Abeni,2025-07-03T09:51:41Z,"Merge branch 'fix-irq-vectors'  Jiawen Wu says:  ==================== Fix IRQ vectors  The interrupt vector order was adjusted by [1]commit 937d46ecc5f9 (""net: wangxun: add ethtool_ops for channel number"") in Linux-6.8. Because at that time, the MISC interrupt acts as the parent interrupt in the GPIO IRQ chip. When the number of Rx/Tx ring changes, the last MISC interrupt must be reallocated. Then the GPIO interrupt controller would be corrupted. So the initial plan was to adjust the sequence of the interrupt vectors, let MISC interrupt to be the first one and do not free it.  Later, irq_domain was introduced in [2]commit aefd013624a1 (""net: txgbe: use irq_domain for interrupt controller"") to avoid this problem. However, the vector sequence adjustment was not reverted. So there is still one problem that has been left unresolved.  Due to hardware limitations of NGBE, queue IRQs can only be requested on vector 0 to 7. When the number of queues is set to the maximum 8, the PCI IRQ vectors are allocated from 0 to 8. The vector 0 is used by MISC interrupt, and althrough the vector 8 is used by queue interrupt, it is unable to receive packets. This will cause some packets to be dropped when RSS is enabled and they are assigned to queue 8.  This patch set fix the above problems.  [1] https://git.kernel.org/netdev/net-next/c/937d46ecc5f9 [2] https://git.kernel.org/netdev/net-next/c/aefd013624a1 ====================  Link: https://patch.msgid.link/20250701063030.59340-1-jiawenwu@trustnetic.com Signed-off-by: Paolo Abeni <pabeni@redhat.com>",42,31,73
torvalds/linux,4174c0c331a2aa3322d3b3be532808deb041b37d,Jiawen Wu,2025-07-01T06:30:30Z,"net: ngbe: specify IRQ vector when the number of VFs is 7  For NGBE devices, the queue number is limited to be 1 when SRIOV is enabled. In this case, IRQ vector[0] is used for MISC and vector[1] is used for queue, based on the previous patches. But for the hardware design, the IRQ vector[1] must be allocated for use by the VF[6] when the number of VFs is 7. So the IRQ vector[0] should be shared for PF MISC and QUEUE interrupts.  +-----------+----------------------+ | Vector    | Assigned To          | +-----------+----------------------+ | Vector 0  | PF MISC and QUEUE    | | Vector 1  | VF 6                 | | Vector 2  | VF 5                 | | Vector 3  | VF 4                 | | Vector 4  | VF 3                 | | Vector 5  | VF 2                 | | Vector 6  | VF 1                 | | Vector 7  | VF 0                 | +-----------+----------------------+  Minimize code modifications, only adjust the IRQ vector number for this case.  Fixes: 877253d2cbf2 (""net: ngbe: add sriov function support"") Signed-off-by: Jiawen Wu <jiawenwu@trustnetic.com> Reviewed-by: Larysa Zaremba <larysa.zaremba@intel.com> Link: https://patch.msgid.link/20250701063030.59340-4-jiawenwu@trustnetic.com Signed-off-by: Paolo Abeni <pabeni@redhat.com>",16,2,18
torvalds/linux,e37546ad1f9b2c777d3a21d7e50ce265ee3dece8,Jiawen Wu,2025-07-01T06:30:29Z,"net: wangxun: revert the adjustment of the IRQ vector sequence  Due to hardware limitations of NGBE, queue IRQs can only be requested on vector 0 to 7. When the number of queues is set to the maximum 8, the PCI IRQ vectors are allocated from 0 to 8. The vector 0 is used by MISC interrupt, and althrough the vector 8 is used by queue interrupt, it is unable to receive packets. This will cause some packets to be dropped when RSS is enabled and they are assigned to queue 8.  So revert the adjustment of the MISC IRQ location, to make it be the last one in IRQ vectors.  Fixes: 937d46ecc5f9 (""net: wangxun: add ethtool_ops for channel number"") Cc: stable@vger.kernel.org Signed-off-by: Jiawen Wu <jiawenwu@trustnetic.com> Reviewed-by: Larysa Zaremba <larysa.zaremba@intel.com> Link: https://patch.msgid.link/20250701063030.59340-3-jiawenwu@trustnetic.com Signed-off-by: Paolo Abeni <pabeni@redhat.com>",16,17,33
torvalds/linux,cc9f7f65cd2f31150b10e6956f1f0882e1bbae49,Jiawen Wu,2025-07-01T06:30:28Z,"net: txgbe: request MISC IRQ in ndo_open  Move the creating of irq_domain for MISC IRQ from .probe to .ndo_open, and free it in .ndo_stop, to maintain consistency with the queue IRQs. This it for subsequent adjustments to the IRQ vectors.  Fixes: aefd013624a1 (""net: txgbe: use irq_domain for interrupt controller"") Cc: stable@vger.kernel.org Signed-off-by: Jiawen Wu <jiawenwu@trustnetic.com> Reviewed-by: Michal Swiatkowski <michal.swiatkowski@linux.intel.com> Link: https://patch.msgid.link/20250701063030.59340-2-jiawenwu@trustnetic.com Signed-off-by: Paolo Abeni <pabeni@redhat.com>",11,13,24
torvalds/linux,b0727b0ccd907aa669ba48027f29019f1c48d42c,Paolo Abeni,2025-07-03T09:40:04Z,"Merge branch 'virtio-fixes-for-tx-ring-sizing-and-resize-error-reporting'  Laurent Vivier says:  ==================== virtio: Fixes for TX ring sizing and resize error reporting  This patch series contains two fixes and a cleanup for the virtio subsystem.  The first patch fixes an error reporting bug in virtio_ring's virtqueue_resize() function. Previously, errors from internal resize helpers could be masked if the subsequent re-enabling of the virtqueue succeeded. This patch restores the correct error propagation, ensuring that callers of virtqueue_resize() are properly informed of underlying resize failures.  The second patch does a cleanup of the use of '2+MAX_SKB_FRAGS'  The third patch addresses a reliability issue in virtio_net where the TX ring size could be configured too small, potentially leading to persistently stopped queues and degraded performance. It enforces a minimum TX ring size to ensure there's always enough space for at least one maximally-fragmented packet plus an additional slot. ====================  Link: https://patch.msgid.link/20250521092236.661410-1-lvivier@redhat.com Signed-off-by: Paolo Abeni <pabeni@redhat.com>",16,6,22
torvalds/linux,24b2f5df86aaebbe7bac40304eaf5a146c02367c,Laurent Vivier,2025-05-21T09:22:36Z,"virtio_net: Enforce minimum TX ring size for reliability  The `tx_may_stop()` logic stops TX queues if free descriptors (`sq->vq->num_free`) fall below the threshold of (`MAX_SKB_FRAGS` + 2). If the total ring size (`ring_num`) is not strictly greater than this value, queues can become persistently stopped or stop after minimal use, severely degrading performance.  A single sk_buff transmission typically requires descriptors for: - The virtio_net_hdr (1 descriptor) - The sk_buff's linear data (head) (1 descriptor) - Paged fragments (up to MAX_SKB_FRAGS descriptors)  This patch enforces that the TX ring size ('ring_num') must be strictly greater than (MAX_SKB_FRAGS + 2). This ensures that the ring is always large enough to hold at least one maximally-fragmented packet plus at least one additional slot.  Reported-by: Lei Yang <leiyang@redhat.com> Signed-off-by: Laurent Vivier <lvivier@redhat.com> Reviewed-by: Xuan Zhuo <xuanzhuo@linux.alibaba.com> Acked-by: Jason Wang <jasowang@redhat.com> Link: https://patch.msgid.link/20250521092236.661410-4-lvivier@redhat.com Tested-by: Lei Yang <leiyang@redhat.com> Acked-by: Michael S. Tsirkin <mst@redhat.com> Signed-off-by: Paolo Abeni <pabeni@redhat.com>",6,0,6
torvalds/linux,bd2948d2581ebd31745c1b7094a470513789555f,Laurent Vivier,2025-05-21T09:22:35Z,virtio_net: Cleanup '2+MAX_SKB_FRAGS'  Improve consistency by using everywhere it is needed 'MAX_SKB_FRAGS + 2' rather than '2+MAX_SKB_FRAGS' or '2 + MAX_SKB_FRAGS'.  No functional change.  Signed-off-by: Laurent Vivier <lvivier@redhat.com> Reviewed-by: Xuan Zhuo <xuanzhuo@linux.alibaba.com> Acked-by: Jason Wang <jasowang@redhat.com> Link: https://patch.msgid.link/20250521092236.661410-3-lvivier@redhat.com Tested-by: Lei Yang <leiyang@redhat.com> Acked-by: Michael S. Tsirkin <mst@redhat.com> Signed-off-by: Paolo Abeni <pabeni@redhat.com>,4,4,8
torvalds/linux,45ebc7e6c125ce93d2ddf82cd5bea20121bb0258,Laurent Vivier,2025-05-21T09:22:34Z,"virtio_ring: Fix error reporting in virtqueue_resize  The virtqueue_resize() function was not correctly propagating error codes from its internal resize helper functions, specifically virtqueue_resize_packet() and virtqueue_resize_split(). If these helpers returned an error, but the subsequent call to virtqueue_enable_after_reset() succeeded, the original error from the resize operation would be masked. Consequently, virtqueue_resize() could incorrectly report success to its caller despite an underlying resize failure.  This change restores the original code behavior:         if (vdev->config->enable_vq_after_reset(_vq))                return -EBUSY;         return err;  Fix: commit ad48d53b5b3f (""virtio_ring: separate the logic of reset/enable from virtqueue_resize"") Cc: xuanzhuo@linux.alibaba.com Signed-off-by: Laurent Vivier <lvivier@redhat.com> Acked-by: Jason Wang <jasowang@redhat.com> Link: https://patch.msgid.link/20250521092236.661410-2-lvivier@redhat.com Tested-by: Lei Yang <leiyang@redhat.com> Acked-by: Michael S. Tsirkin <mst@redhat.com> Signed-off-by: Paolo Abeni <pabeni@redhat.com>",6,2,8
torvalds/linux,42ce432522a17685f5a84529de49e555477c0a1f,Mark Rutland,2025-06-19T13:48:17Z,"KVM: arm64: Remove kvm_arch_vcpu_run_map_fp()  Historically KVM hyp code saved the host's FPSIMD state into the hosts's fpsimd_state memory, and so it was necessary to map this into the hyp Stage-1 mappings before running a vCPU.  This is no longer necessary as of commits:  * fbc7e61195e2 (""KVM: arm64: Unconditionally save+flush host FPSIMD/SVE/SME state"") * 8eca7f6d5100 (""KVM: arm64: Remove host FPSIMD saving for non-protected KVM"")  Since those commits, we eagerly save the host's FPSIMD state before calling into hyp to run a vCPU, and hyp code never reads nor writes the host's fpsimd_state memory. There's no longer any need to map the host's fpsimd_state memory into the hyp Stage-1, and kvm_arch_vcpu_run_map_fp() is unnecessary but benign.  Remove kvm_arch_vcpu_run_map_fp(). Currently there is no code to perform a corresponding unmap, and we never mapped the host's SVE or SME state into the hyp Stage-1, so no other code needs to be removed.  Signed-off-by: Mark Rutland <mark.rutland@arm.com> Cc: Catalin Marinas <catalin.marinas@arm.com> Cc: Fuad Tabba <tabba@google.com> Cc: Marc Zyngier <maz@kernel.org> Cc: Mark Brown <broonie@kernel.org> Cc: Oliver Upton <oliver.upton@linux.dev> Cc: Will Deacon <will@kernel.org> Cc: kvmarm@lists.linux.dev Reviewed-by: Mark Brown <broonie@kernel.org> Tested-by: Fuad Tabba <tabba@google.com> Reviewed-by: Fuad Tabba <tabba@google.com> Link: https://lore.kernel.org/r/20250619134817.4075340-1-mark.rutland@arm.com Signed-off-by: Marc Zyngier <maz@kernel.org>",0,31,31
torvalds/linux,105485a182dc6ba32e55db46839af756c105afae,Marc Zyngier,2025-07-01T14:02:58Z,"KVM: arm64: Fix handling of FEAT_GTG for unimplemented granule sizes  Booting an EL2 guest on a system only supporting a subset of the possible page sizes leads to interesting situations.  For example, on a system that only supports 4kB and 64kB, and is booted with a 4kB kernel, we end-up advertising 16kB support at stage-2, which is pretty weird.  That's because we consider that any S2 bigger than our base granule is fair game, irrespective of what the HW actually supports. While this is not impossible to support (KVM would happily handle it), it is likely to be confusing for the guest.  Add new checks that will verify that this granule size is actually supported before publishing it to the guest.  Fixes: e7ef6ed4583ea (""KVM: arm64: Enforce NV limits on a per-idregs basis"") Reviewed-by: Oliver Upton <oliver.upton@linux.dev> Signed-off-by: Marc Zyngier <maz@kernel.org>",23,3,26
torvalds/linux,38224c472a038fa9ccd4085511dd9f3d6119dbf9,Qasim Ijaz,2025-06-24T12:52:56Z,"HID: appletb-kbd: fix slab use-after-free bug in appletb_kbd_probe  In probe appletb_kbd_probe() a ""struct appletb_kbd *kbd"" is allocated via devm_kzalloc() to store touch bar keyboard related data. Later on if backlight_device_get_by_name() finds a backlight device with name ""appletb_backlight"" a timer (kbd->inactivity_timer) is setup with appletb_inactivity_timer() and the timer is armed to run after appletb_tb_dim_timeout (60) seconds.  A use-after-free is triggered when failure occurs after the timer is armed. This ultimately means probe failure occurs and as a result the ""struct appletb_kbd *kbd"" which is device managed memory is freed. After 60 seconds the timer will have expired and __run_timers will attempt to access the timer (kbd->inactivity_timer) however the kdb structure has been freed causing a use-after free.  [   71.636938] ================================================================== [   71.637915] BUG: KASAN: slab-use-after-free in __run_timers+0x7ad/0x890 [   71.637915] Write of size 8 at addr ffff8881178c5958 by task swapper/1/0 [   71.637915] [   71.637915] CPU: 1 UID: 0 PID: 0 Comm: swapper/1 Not tainted 6.16.0-rc2-00318-g739a6c93cc75-dirty #12 PREEMPT(voluntary) [   71.637915] Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.16.2-debian-1.16.2-1 04/01/2014 [   71.637915] Call Trace: [   71.637915]  <IRQ> [   71.637915]  dump_stack_lvl+0x53/0x70 [   71.637915]  print_report+0xce/0x670 [   71.637915]  ? __run_timers+0x7ad/0x890 [   71.637915]  kasan_report+0xce/0x100 [   71.637915]  ? __run_timers+0x7ad/0x890 [   71.637915]  __run_timers+0x7ad/0x890 [   71.637915]  ? __pfx___run_timers+0x10/0x10 [   71.637915]  ? update_process_times+0xfc/0x190 [   71.637915]  ? __pfx_update_process_times+0x10/0x10 [   71.637915]  ? _raw_spin_lock_irq+0x80/0xe0 [   71.637915]  ? _raw_spin_lock_irq+0x80/0xe0 [   71.637915]  ? __pfx__raw_spin_lock_irq+0x10/0x10 [   71.637915]  run_timer_softirq+0x141/0x240 [   71.637915]  ? __pfx_run_timer_softirq+0x10/0x10 [   71.637915]  ? __pfx___hrtimer_run_queues+0x10/0x10 [   71.637915]  ? kvm_clock_get_cycles+0x18/0x30 [   71.637915]  ? ktime_get+0x60/0x140 [   71.637915]  handle_softirqs+0x1b8/0x5c0 [   71.637915]  ? __pfx_handle_softirqs+0x10/0x10 [   71.637915]  irq_exit_rcu+0xaf/0xe0 [   71.637915]  sysvec_apic_timer_interrupt+0x6c/0x80 [   71.637915]  </IRQ> [   71.637915] [   71.637915] Allocated by task 39: [   71.637915]  kasan_save_stack+0x33/0x60 [   71.637915]  kasan_save_track+0x14/0x30 [   71.637915]  __kasan_kmalloc+0x8f/0xa0 [   71.637915]  __kmalloc_node_track_caller_noprof+0x195/0x420 [   71.637915]  devm_kmalloc+0x74/0x1e0 [   71.637915]  appletb_kbd_probe+0x37/0x3c0 [   71.637915]  hid_device_probe+0x2d1/0x680 [   71.637915]  really_probe+0x1c3/0x690 [   71.637915]  __driver_probe_device+0x247/0x300 [   71.637915]  driver_probe_device+0x49/0x210 [...] [   71.637915] [   71.637915] Freed by task 39: [   71.637915]  kasan_save_stack+0x33/0x60 [   71.637915]  kasan_save_track+0x14/0x30 [   71.637915]  kasan_save_free_info+0x3b/0x60 [   71.637915]  __kasan_slab_free+0x37/0x50 [   71.637915]  kfree+0xcf/0x360 [   71.637915]  devres_release_group+0x1f8/0x3c0 [   71.637915]  hid_device_probe+0x315/0x680 [   71.637915]  really_probe+0x1c3/0x690 [   71.637915]  __driver_probe_device+0x247/0x300 [   71.637915]  driver_probe_device+0x49/0x210 [...]  The root cause of the issue is that the timer is not disarmed on failure paths leading to it remaining active and accessing freed memory. To fix this call timer_delete_sync() to deactivate the timer.  Another small issue is that timer_delete_sync is called unconditionally in appletb_kbd_remove(), fix this by checking for a valid kbd->backlight_dev before calling timer_delete_sync.  Fixes: 93a0fc489481 (""HID: hid-appletb-kbd: add support for automatic brightness control while using the touchbar"") Cc: stable@vger.kernel.org Signed-off-by: Qasim Ijaz <qasdev00@gmail.com> Reviewed-by: Aditya Garg <gargaditya08@live.com> Signed-off-by: Jiri Kosina <jkosina@suse.com>",6,4,10
torvalds/linux,5177373c31318c3c6a190383bfd232e6cf565c36,Bui Quang Minh,2025-06-30T15:13:14Z,"virtio-net: xsk: rx: fix the frame's length check  When calling buf_to_xdp, the len argument is the frame data's length without virtio header's length (vi->hdr_len). We check that len with  	xsk_pool_get_rx_frame_size() + vi->hdr_len  to ensure the provided len does not larger than the allocated chunk size. The additional vi->hdr_len is because in virtnet_add_recvbuf_xsk, we use part of XDP_PACKET_HEADROOM for virtio header and ask the vhost to start placing data from  	hard_start + XDP_PACKET_HEADROOM - vi->hdr_len not 	hard_start + XDP_PACKET_HEADROOM  But the first buffer has virtio_header, so the maximum frame's length in the first buffer can only be  	xsk_pool_get_rx_frame_size() not 	xsk_pool_get_rx_frame_size() + vi->hdr_len  like in the current check.  This commit adds an additional argument to buf_to_xdp differentiate between the first buffer and other ones to correctly calculate the maximum frame's length.  Cc: stable@vger.kernel.org Reviewed-by: Xuan Zhuo <xuanzhuo@linux.alibaba.com> Fixes: a4e7ba702701 (""virtio_net: xsk: rx: support recv small mode"") Signed-off-by: Bui Quang Minh <minhquangbui99@gmail.com> Link: https://patch.msgid.link/20250630151315.86722-2-minhquangbui99@gmail.com Signed-off-by: Paolo Abeni <pabeni@redhat.com>",18,4,22
torvalds/linux,c9cbbe7ab6f31ba91c47c09eee75017d5b69462d,Paolo Abeni,2025-07-03T08:56:57Z,Merge branch 'virtio-net-fixes-for-mergeable-xdp-receive-path'  Bui Quang Minh says:  ==================== virtio-net: fixes for mergeable XDP receive path  This series contains fixes for XDP receive path in virtio-net - Patch 1: add a missing check for the received data length with our allocated buffer size in mergeable mode. - Patch 2: remove a redundant truesize check with PAGE_SIZE in mergeable mode - Patch 3: make the current repeated code use the check_mergeable_len to check for received data length in mergeable mode ====================  Link: https://patch.msgid.link/20250630144212.48471-1-minhquangbui99@gmail.com Signed-off-by: Paolo Abeni <pabeni@redhat.com>,42,33,75
torvalds/linux,7d4a119e45828e643baedea2d2ac736804bc85ee,Bui Quang Minh,2025-06-30T14:42:12Z,virtio-net: use the check_mergeable_len helper  Replace the current repeated code to check received length in mergeable mode with the new check_mergeable_len helper.  Signed-off-by: Bui Quang Minh <minhquangbui99@gmail.com> Acked-by: Jason Wang <jasowang@redhat.com> Link: https://patch.msgid.link/20250630144212.48471-4-minhquangbui99@gmail.com Signed-off-by: Paolo Abeni <pabeni@redhat.com>,7,27,34
torvalds/linux,4be2193b3393dca33504793fe7586fed547abb5d,Bui Quang Minh,2025-06-30T14:42:11Z,"virtio-net: remove redundant truesize check with PAGE_SIZE  The truesize is guaranteed not to exceed PAGE_SIZE in get_mergeable_buf_len(). It is saved in mergeable context, which is not changeable by the host side, so the check in receive path is quite redundant.  Acked-by: Jason Wang <jasowang@redhat.com> Signed-off-by: Bui Quang Minh <minhquangbui99@gmail.com> Link: https://patch.msgid.link/20250630144212.48471-3-minhquangbui99@gmail.com Signed-off-by: Paolo Abeni <pabeni@redhat.com>",3,4,7
torvalds/linux,315dbdd7cdf6aa533829774caaf4d25f1fd20e73,Bui Quang Minh,2025-06-30T14:42:10Z,"virtio-net: ensure the received length does not exceed allocated size  In xdp_linearize_page, when reading the following buffers from the ring, we forget to check the received length with the true allocate size. This can lead to an out-of-bound read. This commit adds that missing check.  Cc: <stable@vger.kernel.org> Fixes: 4941d472bf95 (""virtio-net: do not reset during XDP set"") Signed-off-by: Bui Quang Minh <minhquangbui99@gmail.com> Acked-by: Jason Wang <jasowang@redhat.com> Link: https://patch.msgid.link/20250630144212.48471-2-minhquangbui99@gmail.com Signed-off-by: Paolo Abeni <pabeni@redhat.com>",34,4,38
torvalds/linux,ba677dbe77af5ffe6204e0f3f547f3ba059c6302,Peter Zijlstra,2025-07-02T16:21:44Z,"perf: Revert to requiring CAP_SYS_ADMIN for uprobes  Jann reports that uprobes can be used destructively when used in the middle of an instruction. The kernel only verifies there is a valid instruction at the requested offset, but due to variable instruction length cannot determine if this is an instruction as seen by the intended execution stream.  Additionally, Mark Rutland notes that on architectures that mix data in the text segment (like arm64), a similar things can be done if the data word is 'mistaken' for an instruction.  As such, require CAP_SYS_ADMIN for uprobes.  Fixes: c9e0924e5c2b (""perf/core: open access to probes for CAP_PERFMON privileged process"") Reported-by: Jann Horn <jannh@google.com> Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org> Link: https://lkml.kernel.org/r/CAG48ez1n4520sq0XrWYDHKiKxE_+WCfAK+qt9qkY4ZiBGmL-5g@mail.gmail.com",1,1,2
torvalds/linux,194808a1ea391e35d364d6c9406e2eccb6174525,Vicki Pfau,2025-07-02T03:46:42Z,"HID: Fix debug name for BTN_GEAR_DOWN, BTN_GEAR_UP, BTN_WHEEL  The name of BTN_GEAR_DOWN was WheelBtn and BTN_WHEEL was missing. Further, BTN_GEAR_UP had a space in its name and no Btn, which is against convention. This makes the names BtnGearDown, BtnGearUp, and BtnWheel, fixing the errors and matching convention.  Signed-off-by: Vicki Pfau <vi@endrift.com> Signed-off-by: Jiri Kosina <jkosina@suse.com>",2,2,4
torvalds/linux,50f9ff52c078d66053bba791ded6fafc64055524,Leonard Dizon,2025-06-29T21:48:30Z,"HID: elecom: add support for ELECOM HUGE 019B variant  The ELECOM M-HT1DRBK trackball has an additional device ID (056E:019B) not yet recognized by the driver, despite using the same report descriptor as earlier variants. This patch adds the new ID and applies the same fixups, enabling all 8 buttons to function properly.  Signed-off-by: Leonard Dizon <leonard@snekbyte.com> Signed-off-by: Jiri Kosina <jkosina@suse.com>",8,4,12
torvalds/linux,c80f2b047d5cc42fbd2dff9d1942d4ba7545100f,Qasim Ijaz,2025-06-27T11:01:21Z,"HID: appletb-kbd: fix memory corruption of input_handler_list  In appletb_kbd_probe an input handler is initialised and then registered with input core through input_register_handler(). When this happens input core will add the input handler (specifically its node) to the global input_handler_list. The input_handler_list is central to the functionality of input core and is traversed in various places in input core. An example of this is when a new input device is plugged in and gets registered with input core.  The input_handler in probe is allocated as device managed memory. If a probe failure occurs after input_register_handler() the input_handler memory is freed, yet it will remain in the input_handler_list. This effectively means the input_handler_list contains a dangling pointer to data belonging to a freed input handler.  This causes an issue when any other input device is plugged in - in my case I had an old PixArt HP USB optical mouse and I decided to plug it in after a failure occurred after input_register_handler(). This lead to the registration of this input device via input_register_device which involves traversing over every handler in the corrupted input_handler_list and calling input_attach_handler(), giving each handler a chance to bind to newly registered device.  The core of this bug is a UAF which causes memory corruption of input_handler_list and to fix it we must ensure the input handler is unregistered from input core, this is done through input_unregister_handler().  [   63.191597] ================================================================== [   63.192094] BUG: KASAN: slab-use-after-free in input_attach_handler.isra.0+0x1a9/0x1e0 [   63.192094] Read of size 8 at addr ffff888105ea7c80 by task kworker/0:2/54 [   63.192094] [   63.192094] CPU: 0 UID: 0 PID: 54 Comm: kworker/0:2 Not tainted 6.16.0-rc2-00321-g2aa6621d [   63.192094] Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.16.2-debian-1.164 [   63.192094] Workqueue: usb_hub_wq hub_event [   63.192094] Call Trace: [   63.192094]  <TASK> [   63.192094]  dump_stack_lvl+0x53/0x70 [   63.192094]  print_report+0xce/0x670 [   63.192094]  kasan_report+0xce/0x100 [   63.192094]  input_attach_handler.isra.0+0x1a9/0x1e0 [   63.192094]  input_register_device+0x76c/0xd00 [   63.192094]  hidinput_connect+0x686d/0xad60 [   63.192094]  hid_connect+0xf20/0x1b10 [   63.192094]  hid_hw_start+0x83/0x100 [   63.192094]  hid_device_probe+0x2d1/0x680 [   63.192094]  really_probe+0x1c3/0x690 [   63.192094]  __driver_probe_device+0x247/0x300 [   63.192094]  driver_probe_device+0x49/0x210 [   63.192094]  __device_attach_driver+0x160/0x320 [   63.192094]  bus_for_each_drv+0x10f/0x190 [   63.192094]  __device_attach+0x18e/0x370 [   63.192094]  bus_probe_device+0x123/0x170 [   63.192094]  device_add+0xd4d/0x1460 [   63.192094]  hid_add_device+0x30b/0x910 [   63.192094]  usbhid_probe+0x920/0xe00 [   63.192094]  usb_probe_interface+0x363/0x9a0 [   63.192094]  really_probe+0x1c3/0x690 [   63.192094]  __driver_probe_device+0x247/0x300 [   63.192094]  driver_probe_device+0x49/0x210 [   63.192094]  __device_attach_driver+0x160/0x320 [   63.192094]  bus_for_each_drv+0x10f/0x190 [   63.192094]  __device_attach+0x18e/0x370 [   63.192094]  bus_probe_device+0x123/0x170 [   63.192094]  device_add+0xd4d/0x1460 [   63.192094]  usb_set_configuration+0xd14/0x1880 [   63.192094]  usb_generic_driver_probe+0x78/0xb0 [   63.192094]  usb_probe_device+0xaa/0x2e0 [   63.192094]  really_probe+0x1c3/0x690 [   63.192094]  __driver_probe_device+0x247/0x300 [   63.192094]  driver_probe_device+0x49/0x210 [   63.192094]  __device_attach_driver+0x160/0x320 [   63.192094]  bus_for_each_drv+0x10f/0x190 [   63.192094]  __device_attach+0x18e/0x370 [   63.192094]  bus_probe_device+0x123/0x170 [   63.192094]  device_add+0xd4d/0x1460 [   63.192094]  usb_new_device+0x7b4/0x1000 [   63.192094]  hub_event+0x234d/0x3fa0 [   63.192094]  process_one_work+0x5bf/0xfe0 [   63.192094]  worker_thread+0x777/0x13a0 [   63.192094]  </TASK> [   63.192094] [   63.192094] Allocated by task 54: [   63.192094]  kasan_save_stack+0x33/0x60 [   63.192094]  kasan_save_track+0x14/0x30 [   63.192094]  __kasan_kmalloc+0x8f/0xa0 [   63.192094]  __kmalloc_node_track_caller_noprof+0x195/0x420 [   63.192094]  devm_kmalloc+0x74/0x1e0 [   63.192094]  appletb_kbd_probe+0x39/0x440 [   63.192094]  hid_device_probe+0x2d1/0x680 [   63.192094]  really_probe+0x1c3/0x690 [   63.192094]  __driver_probe_device+0x247/0x300 [   63.192094]  driver_probe_device+0x49/0x210 [   63.192094]  __device_attach_driver+0x160/0x320 [...] [   63.192094] [   63.192094] Freed by task 54: [   63.192094]  kasan_save_stack+0x33/0x60 [   63.192094]  kasan_save_track+0x14/0x30 [   63.192094]  kasan_save_free_info+0x3b/0x60 [   63.192094]  __kasan_slab_free+0x37/0x50 [   63.192094]  kfree+0xcf/0x360 [   63.192094]  devres_release_group+0x1f8/0x3c0 [   63.192094]  hid_device_probe+0x315/0x680 [   63.192094]  really_probe+0x1c3/0x690 [   63.192094]  __driver_probe_device+0x247/0x300 [   63.192094]  driver_probe_device+0x49/0x210 [   63.192094]  __device_attach_driver+0x160/0x320 [...]  Fixes: 7d62ba8deacf (""HID: hid-appletb-kbd: add support for fn toggle between media and function mode"") Cc: stable@vger.kernel.org Reviewed-by: Aditya Garg <gargaditya08@live.com> Signed-off-by: Qasim Ijaz <qasdev00@gmail.com> Signed-off-by: Jiri Kosina <jkosina@suse.com>",3,1,4
torvalds/linux,226862f50a7a88e4e4de9abbf36c64d19acd6fd0,MaÃ­ra Canal,2025-06-28T22:42:42Z,"drm/v3d: Disable interrupts before resetting the GPU  Currently, an interrupt can be triggered during a GPU reset, which can lead to GPU hangs and NULL pointer dereference in an interrupt context as shown in the following trace:   [  314.035040] Unable to handle kernel NULL pointer dereference at virtual address 00000000000000c0  [  314.043822] Mem abort info:  [  314.046606]   ESR = 0x0000000096000005  [  314.050347]   EC = 0x25: DABT (current EL), IL = 32 bits  [  314.055651]   SET = 0, FnV = 0  [  314.058695]   EA = 0, S1PTW = 0  [  314.061826]   FSC = 0x05: level 1 translation fault  [  314.066694] Data abort info:  [  314.069564]   ISV = 0, ISS = 0x00000005, ISS2 = 0x00000000  [  314.075039]   CM = 0, WnR = 0, TnD = 0, TagAccess = 0  [  314.080080]   GCS = 0, Overlay = 0, DirtyBit = 0, Xs = 0  [  314.085382] user pgtable: 4k pages, 39-bit VAs, pgdp=0000000102728000  [  314.091814] [00000000000000c0] pgd=0000000000000000, p4d=0000000000000000, pud=0000000000000000  [  314.100511] Internal error: Oops: 0000000096000005 [#1] PREEMPT SMP  [  314.106770] Modules linked in: v3d i2c_brcmstb vc4 snd_soc_hdmi_codec gpu_sched drm_shmem_helper drm_display_helper cec drm_dma_helper drm_kms_helper drm drm_panel_orientation_quirks snd_soc_core snd_compress snd_pcm_dmaengine snd_pcm snd_timer snd backlight  [  314.129654] CPU: 0 UID: 0 PID: 0 Comm: swapper/0 Not tainted 6.12.25+rpt-rpi-v8 #1  Debian 1:6.12.25-1+rpt1  [  314.139388] Hardware name: Raspberry Pi 4 Model B Rev 1.4 (DT)  [  314.145211] pstate: 600000c5 (nZCv daIF -PAN -UAO -TCO -DIT -SSBS BTYPE=--)  [  314.152165] pc : v3d_irq+0xec/0x2e0 [v3d]  [  314.156187] lr : v3d_irq+0xe0/0x2e0 [v3d]  [  314.160198] sp : ffffffc080003ea0  [  314.163502] x29: ffffffc080003ea0 x28: ffffffec1f184980 x27: 021202b000000000  [  314.170633] x26: ffffffec1f17f630 x25: ffffff8101372000 x24: ffffffec1f17d9f0  [  314.177764] x23: 000000000000002a x22: 000000000000002a x21: ffffff8103252000  [  314.184895] x20: 0000000000000001 x19: 00000000deadbeef x18: 0000000000000000  [  314.192026] x17: ffffff94e51d2000 x16: ffffffec1dac3cb0 x15: c306000000000000  [  314.199156] x14: 0000000000000000 x13: b2fc982e03cc5168 x12: 0000000000000001  [  314.206286] x11: ffffff8103f8bcc0 x10: ffffffec1f196868 x9 : ffffffec1dac3874  [  314.213416] x8 : 0000000000000000 x7 : 0000000000042a3a x6 : ffffff810017a180  [  314.220547] x5 : ffffffec1ebad400 x4 : ffffffec1ebad320 x3 : 00000000000bebeb  [  314.227677] x2 : 0000000000000000 x1 : 0000000000000000 x0 : 0000000000000000  [  314.234807] Call trace:  [  314.237243]  v3d_irq+0xec/0x2e0 [v3d]  [  314.240906]  __handle_irq_event_percpu+0x58/0x218  [  314.245609]  handle_irq_event+0x54/0xb8  [  314.249439]  handle_fasteoi_irq+0xac/0x240  [  314.253527]  handle_irq_desc+0x48/0x68  [  314.257269]  generic_handle_domain_irq+0x24/0x38  [  314.261879]  gic_handle_irq+0x48/0xd8  [  314.265533]  call_on_irq_stack+0x24/0x58  [  314.269448]  do_interrupt_handler+0x88/0x98  [  314.273624]  el1_interrupt+0x34/0x68  [  314.277193]  el1h_64_irq_handler+0x18/0x28  [  314.281281]  el1h_64_irq+0x64/0x68  [  314.284673]  default_idle_call+0x3c/0x168  [  314.288675]  do_idle+0x1fc/0x230  [  314.291895]  cpu_startup_entry+0x3c/0x50  [  314.295810]  rest_init+0xe4/0xf0  [  314.299030]  start_kernel+0x5e8/0x790  [  314.302684]  __primary_switched+0x80/0x90  [  314.306691] Code: 940029eb 360ffc13 f9442ea0 52800001 (f9406017)  [  314.312775] ---[ end trace 0000000000000000 ]---  [  314.317384] Kernel panic - not syncing: Oops: Fatal exception in interrupt  [  314.324249] SMP: stopping secondary CPUs  [  314.328167] Kernel Offset: 0x2b9da00000 from 0xffffffc080000000  [  314.334076] PHYS_OFFSET: 0x0  [  314.336946] CPU features: 0x08,00002013,c0200000,0200421b  [  314.342337] Memory Limit: none  [  314.345382] ---[ end Kernel panic - not syncing: Oops: Fatal exception in interrupt ]---  Before resetting the GPU, it's necessary to disable all interrupts and deal with any interrupt handler still in-flight. Otherwise, the GPU might reset with jobs still running, or yet, an interrupt could be handled during the reset.  Cc: stable@vger.kernel.org Fixes: 57692c94dcbe (""drm/v3d: Introduce a new DRM driver for Broadcom V3D V3.x+"") Reviewed-by: Juan A. Suarez <jasuarez@igalia.com> Reviewed-by: Iago Toral Quiroga <itoral@igalia.com> Link: https://lore.kernel.org/r/20250628224243.47599-1-mcanal@igalia.com Signed-off-by: MaÃ­ra Canal <mcanal@igalia.com>",37,10,47
torvalds/linux,bd475eeaaf3cad1b183418fff7b19c9b1e3d1c4f,Jakub Kicinski,2025-07-02T21:52:25Z,"Merge branch '200GbE' of git://git.kernel.org/pub/scm/linux/kernel/git/tnguy/net-queue  Tony Nguyen says:  ==================== Intel Wired LAN Driver Updates 2025-07-01 (idpf, igc)  For idpf: Michal returns 0 for key size when RSS is not supported.  Ahmed changes control queue to a spinlock due to sleeping calls.  For igc: Vitaly disables L1.2 PCI-E link substate on I226 devices to resolve performance issues.  * '200GbE' of git://git.kernel.org/pub/scm/linux/kernel/git/tnguy/net-queue:   igc: disable L1.2 PCI-E link substate to avoid performance issue   idpf: convert control queue mutex to a spinlock   idpf: return 0 size for RSS key if not supported ====================  Link: https://patch.msgid.link/20250701164317.2983952-1-anthony.l.nguyen@intel.com Signed-off-by: Jakub Kicinski <kuba@kernel.org>",32,19,51
torvalds/linux,c2a2ff6b4db55647575260bf2227b0e09d46addb,Antoine Tenart,2025-07-01T07:49:34Z,"net: ipv4: fix stat increase when udp early demux drops the packet  udp_v4_early_demux now returns drop reasons as it either returns 0 or ip_mc_validate_source, which returns itself a drop reason. However its use was not converted in ip_rcv_finish_core and the drop reason is ignored, leading to potentially skipping increasing LINUX_MIB_IPRPFILTER if the drop reason is SKB_DROP_REASON_IP_RPFILTER.  This is a fix and we're not converting udp_v4_early_demux to explicitly return a drop reason to ease backports; this can be done as a follow-up.  Fixes: d46f827016d8 (""net: ip: make ip_mc_validate_source() return drop reason"") Cc: Menglong Dong <menglong8.dong@gmail.com> Reported-by: Sabrina Dubroca <sd@queasysnail.net> Signed-off-by: Antoine Tenart <atenart@kernel.org> Reviewed-by: Sabrina Dubroca <sd@queasysnail.net> Link: https://patch.msgid.link/20250701074935.144134-1-atenart@kernel.org Signed-off-by: Jakub Kicinski <kuba@kernel.org>",4,3,7
torvalds/linux,5186ff7e1d0e26aaef998ba18b31c79c28d1441f,Jiawen Wu,2025-07-01T07:06:25Z,"net: libwx: fix the incorrect display of the queue number  When setting ""ethtool -L eth0 combined 1"", the number of RX/TX queue is changed to be 1. RSS is disabled at this moment, and the indices of FDIR have not be changed in wx_set_rss_queues(). So the combined count still shows the previous value. This issue was introduced when supporting FDIR. Fix it for those devices that support FDIR.  Fixes: 34744a7749b3 (""net: txgbe: add FDIR info to ethtool ops"") Cc: stable@vger.kernel.org Signed-off-by: Jiawen Wu <jiawenwu@trustnetic.com> Reviewed-by: Simon Horman <horms@kernel.org> Link: https://patch.msgid.link/A5C8FE56D6C04608+20250701070625.73680-1-jiawenwu@trustnetic.com Signed-off-by: Jakub Kicinski <kuba@kernel.org>",1,0,1
torvalds/linux,16ceda2ef683a50cd0783006c0504e1931cd8879,Raju Rangoju,2025-07-01T06:50:16Z,"amd-xgbe: do not double read link status  The link status is latched low so that momentary link drops can be detected. Always double-reading the status defeats this design feature. Only double read if link was already down  This prevents unnecessary duplicate readings of the link status.  Fixes: 4f3b20bfbb75 (""amd-xgbe: add support for rx-adaptation"") Signed-off-by: Raju Rangoju <Raju.Rangoju@amd.com> Reviewed-by: Simon Horman <horms@kernel.org> Link: https://patch.msgid.link/20250701065016.4140707-1-Raju.Rangoju@amd.com Signed-off-by: Jakub Kicinski <kuba@kernel.org>",19,9,28
torvalds/linux,103406b38c600fec1fe375a77b27d87e314aea09,Lion Ackermann,2025-06-30T13:27:30Z,"net/sched: Always pass notifications when child class becomes empty  Certain classful qdiscs may invoke their classes' dequeue handler on an enqueue operation. This may unexpectedly empty the child qdisc and thus make an in-flight class passive via qlen_notify(). Most qdiscs do not expect such behaviour at this point in time and may re-activate the class eventually anyways which will lead to a use-after-free.  The referenced fix commit attempted to fix this behavior for the HFSC case by moving the backlog accounting around, though this turned out to be incomplete since the parent's parent may run into the issue too. The following reproducer demonstrates this use-after-free:      tc qdisc add dev lo root handle 1: drr     tc filter add dev lo parent 1: basic classid 1:1     tc class add dev lo parent 1: classid 1:1 drr     tc qdisc add dev lo parent 1:1 handle 2: hfsc def 1     tc class add dev lo parent 2: classid 2:1 hfsc rt m1 8 d 1 m2 0     tc qdisc add dev lo parent 2:1 handle 3: netem     tc qdisc add dev lo parent 3:1 handle 4: blackhole      echo 1 | socat -u STDIN UDP4-DATAGRAM:127.0.0.1:8888     tc class delete dev lo classid 1:1     echo 1 | socat -u STDIN UDP4-DATAGRAM:127.0.0.1:8888  Since backlog accounting issues leading to a use-after-frees on stale class pointers is a recurring pattern at this point, this patch takes a different approach. Instead of trying to fix the accounting, the patch ensures that qdisc_tree_reduce_backlog always calls qlen_notify when the child qdisc is empty. This solves the problem because deletion of qdiscs always involves a call to qdisc_reset() and / or qdisc_purge_queue() which ultimately resets its qlen to 0 thus causing the following qdisc_tree_reduce_backlog() to report to the parent. Note that this may call qlen_notify on passive classes multiple times. This is not a problem after the recent patch series that made all the classful qdiscs qlen_notify() handlers idempotent.  Fixes: 3f981138109f (""sch_hfsc: Fix qlen accounting bug when using peek in hfsc_enqueue()"") Signed-off-by: Lion Ackermann <nnamrec@gmail.com> Reviewed-by: Jamal Hadi Salim <jhs@mojatatu.com> Acked-by: Cong Wang <xiyou.wangcong@gmail.com> Acked-by: Jamal Hadi Salim <jhs@mojatatu.com> Link: https://patch.msgid.link/d912cbd7-193b-4269-9857-525bee8bbb6a@gmail.com Signed-off-by: Jakub Kicinski <kuba@kernel.org>",5,14,19
torvalds/linux,3e7e5adcd2a86783c441edf6f518fc903e3c4e7c,Sumanth Gavini,2025-05-23T22:02:37Z,"PM: sleep: docs: Replace ""diasble"" with ""disable""  Fix misspelling reported by codespell.  Signed-off-by: Sumanth Gavini <sumanth.gavini@yahoo.com> Link: https://patch.msgid.link/20250523220238.455718-1-sumanth.gavini@yahoo.com [ rjw: Subject rewrite ] Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>",1,1,2
torvalds/linux,5903a7452e642f1475f274373633522db168b60b,Palmer Dabbelt,2025-07-02T17:51:00Z,Merge tag 'riscv-fixes-6.16-rc4' of ssh://gitolite.kernel.org/pub/scm/linux/kernel/git/alexghiti/linux into fixes  riscv fixes for 6.16-rc4  - A fix for a percpu variable that may lie in the vmalloc region and on which we used __pa() - A fix to require at least clang-17 to prevent build issues with previous versions on kCFI  * tag 'riscv-fixes-6.16-rc4' of ssh://gitolite.kernel.org/pub/scm/linux/kernel/git/alexghiti/linux:   riscv: cpu_ops_sbi: Use static array for boot_data   riscv: Require clang-17 or newer for kCFI,5,4,9
torvalds/linux,b4911fb0b060899e4eebca0151eb56deb86921ec,Linus Torvalds,2025-07-02T16:34:57Z,"Merge tag 'mmc-v6.16-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/ulfh/mmc  Pull MMC fixes from Ulf Hansson:  ""MMC core:    - Apply BROKEN_SD_DISCARD quirk earlier during init    - Silence some confusing error messages for SD UHS-II cards    MMC host:    - mtk-sd:        - Prevent memory corruption from DMA map failure        - Fix a pagefault in dma_unmap_sg() for not prepared data    - sdhci: Revert ""Disable SD card clock before changing parameters""    - sdhci-of-k1: Fix error code in probe()    - sdhci-uhs2: Silence some confusing error messages for SD UHS-II cards""  * tag 'mmc-v6.16-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/ulfh/mmc:   mtk-sd: reset host->mrq on prepare_data() error   Revert ""mmc: sdhci: Disable SD card clock before changing parameters""   mmc: sdhci-uhs2: Adjust some error messages and register dump for SD UHS-II card   mmc: sdhci: Add a helper function for dump register in dynamic debug mode   mmc: core: Adjust some error messages for SD UHS-II cards   mtk-sd: Prevent memory corruption from DMA map failure   mtk-sd: Fix a pagefault in dma_unmap_sg() for not prepared data   mmc: sdhci-of-k1: Fix error code in probe()   mmc: core: sd: Apply BROKEN_SD_DISCARD quirk earlier",57,28,85
torvalds/linux,ba6a2f25d3d0c813bc5f70c4437002ecc90b85d5,Linus Torvalds,2025-07-02T16:27:57Z,Merge tag 's390-6.16-4' of git://git.kernel.org/pub/scm/linux/kernel/git/s390/linux  Pull s390 fixes from Alexander Gordeev:   - Fix PCI error recovery and bring it in line with AER/EEH  * tag 's390-6.16-4' of git://git.kernel.org/pub/scm/linux/kernel/git/s390/linux:   s390/pci: Allow automatic recovery with minimal driver support   s390/pci: Do not try re-enabling load/store if device is disabled   s390/pci: Fix stale function handles in error handling,44,15,59
torvalds/linux,3c894cb29bbf4e36c5f2497cf8ea6fb09e157920,Linus Torvalds,2025-07-02T16:23:56Z,"Merge tag 'for-linus-iommufd' of git://git.kernel.org/pub/scm/linux/kernel/git/jgg/iommufd  Pull iommufd fixes from Jason Gunthorpe:  ""Some changes to the userspace selftest framework cause the iommufd   tests to start failing. This turned out to be bugs in the iommufd side   that were just getting uncovered.     - Deal with MAP_HUGETLB mmaping more than requested even when in      MAP_FIXED mode     - Fixup missing error flow cleanup in the test     - Check that the memory allocations suceeded     - Suppress some bogus gcc 'may be used uninitialized' warnings""  * tag 'for-linus-iommufd' of git://git.kernel.org/pub/scm/linux/kernel/git/jgg/iommufd:   iommufd/selftest: Fix build warnings due to uninitialized mfd   iommufd/selftest: Add asserts testing global mfd   iommufd/selftest: Add missing close(mfd) in memfd_mmap()   iommufd/selftest: Fix iommufd_dirty_tracking with large hugepage sizes",36,13,49
torvalds/linux,7e4a6b57dd7f55cce9ece0778c111905e73db7b1,Linus Torvalds,2025-07-02T16:17:40Z,"Merge tag 'for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/rdma/rdma  Pull rdma fixes from Jason Gunthorpe:  ""Several mlx5 bugs, crashers, and reports:     - Limit stack usage     - Fix mis-use of __xa_store/erase() without holding the lock to a      locked version     - Rate limit prints in the gid cache error cases     - Fully initialize the event object before making it globally visible      in an xarray     - Fix deadlock inside the ODP code if the MMU notifier was called      from a reclaim context     - Include missed counters for some switchdev configurations and      mulit-port MPV mode     - Fix loopback packet support when in mulit-port MPV mode""  * tag 'for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/rdma/rdma:   RDMA/mlx5: Fix vport loopback for MPV device   RDMA/mlx5: Fix CC counters query for MPV   RDMA/mlx5: Fix HW counters query for non-representor devices   IB/core: Annotate umem_mutex acquisition under fs_reclaim for lockdep   IB/mlx5: Fix potential deadlock in MR deregistration   RDMA/mlx5: Initialize obj_event->obj_sub_list before xa_insert   RDMA/core: Rate limit GID cache warning messages   RDMA/mlx5: Fix unsafe xarray access in implicit ODP handling   RDMA/mlx5: reduce stack usage in mlx5_ib_ufile_hw_cleanup",107,24,131
torvalds/linux,5f05fc6e2218db7ecc52c60eb34b707fe69262c2,Krzysztof Kozlowski,2025-07-02T06:15:31Z,"dt-bindings: i2c: realtek,rtl9301: Fix missing 'reg' constraint  Lists should have fixed amount if items, so add missing constraint to the 'reg' property (only one address space entry).  Fixes: c5eda0333076 (""dt-bindings: i2c: Add Realtek RTL I2C Controller"") Cc: <stable@vger.kernel.org> # v6.13+ Signed-off-by: Krzysztof Kozlowski <krzysztof.kozlowski@linaro.org> Signed-off-by: Andi Shyti <andi.shyti@kernel.org> Link: https://lore.kernel.org/r/20250702061530.6940-2-krzysztof.kozlowski@linaro.org",2,1,3
torvalds/linux,db98ee56851061082fecd7e6b4b6a93600562ec2,Peter Ujfalusi,2025-07-01T13:34:11Z,ALSA: hda/realtek: Add quirk for ASUS ExpertBook B9403CVAR  ASUS ExpertBook B9403CVAR needs the ALC294_FIXUP_ASUS_HPE for the headphones to work.  Closes: https://github.com/thesofproject/linux/issues/5472 Signed-off-by: Peter Ujfalusi <peter.ujfalusi@linux.intel.com> Tested-by: Anton Khirnov <anton@khirnov.net> Link: https://patch.msgid.link/20250701133411.25275-1-peter.ujfalusi@linux.intel.com Signed-off-by: Takashi Iwai <tiwai@suse.de>,1,0,1
torvalds/linux,1e7ab6f67824343ee3e96f100f0937c393749a8a,Christian Brauner,2025-07-02T09:23:55Z,"anon_inode: rework assertions  Making anonymous inodes regular files comes with a lot of risk and regression potential as evidenced by a recent hickup in io_uring. We're better of continuing to not have them be regular files. Since we have S_ANON_INODE we can port all of our assertions easily.  Link: https://lore.kernel.org/20250702-work-fixes-v1-1-ff76ea589e33@kernel.org Fixes: cfd86ef7e8e7 (""anon_inode: use a proper mode internally"") Acked-by: Jens Axboe <axboe@kernel.dk> Cc: stable@kernel.org Reported-by: Jens Axboe <axboe@kernel.dk> Signed-off-by: Christian Brauner <brauner@kernel.org>",11,8,19
torvalds/linux,f7690d058170dbc1520b0bfbc3d9daf046b59326,Simon Trimmer,2025-07-02T11:22:35Z,ASoC: Intel: sof_sdw: Add quirks for Lenovo P1 and P16  These Lenovo Laptops have the DMICs connected to the host instead of the CS42L43 and so need the SOC_SDW_CODEC_MIC quirk.  Signed-off-by: Simon Trimmer <simont@opensource.cirrus.com> Link: https://patch.msgid.link/20250702112235.377479-1-simont@opensource.cirrus.com Signed-off-by: Mark Brown <broonie@kernel.org>,3,0,3
torvalds/linux,561aa0e22b70a5e7246b73d62a824b3aef3fc375,Thomas Fourier,2025-06-30T08:36:43Z,"nui: Fix dma_mapping_error() check  dma_map_XXX() functions return values DMA_MAPPING_ERROR as error values which is often ~0.  The error value should be tested with dma_mapping_error().  This patch creates a new function in niu_ops to test if the mapping failed.  The test is fixed in niu_rbr_add_page(), added in niu_start_xmit() and the successfully mapped pages are unmaped upon error.  Fixes: ec2deec1f352 (""niu: Fix to check for dma mapping errors."") Signed-off-by: Thomas Fourier <fourier.thomas@gmail.com> Reviewed-by: Simon Horman <horms@kernel.org> Signed-off-by: David S. Miller <davem@davemloft.net>",34,1,35
torvalds/linux,4f30f946f27b7f044cf8f3f1f353dee1dcd3517a,Kurt Borja,2025-06-30T17:31:21Z,"platform/x86: think-lmi: Fix sysfs group cleanup  Many error paths in tlmi_sysfs_init() lead to sysfs groups being removed when they were not even created.  Fix this by letting the kobject core manage these groups through their kobj_type's defult_groups.  Fixes: a40cd7ef22fb (""platform/x86: think-lmi: Add WMI interface support on Lenovo platforms"") Cc: stable@vger.kernel.org Reviewed-by: Mark Pearson <mpearson-lenovo@squebb.ca> Reviewed-by: Ilpo JÃ¤rvinen <ilpo.jarvinen@linux.intel.com> Signed-off-by: Kurt Borja <kuurtb@gmail.com> Link: https://lore.kernel.org/r/20250630-lmi-fix-v3-3-ce4f81c9c481@gmail.com Signed-off-by: Ilpo JÃ¤rvinen <ilpo.jarvinen@linux.intel.com>",4,39,43
torvalds/linux,9110056fe10b0519529bdbbac37311a5037ea0c2,Kurt Borja,2025-06-30T17:31:20Z,"platform/x86: think-lmi: Fix kobject cleanup  In tlmi_analyze(), allocated structs with an embedded kobject are freed in error paths after the they were already initialized.  Fix this by first by avoiding the initialization of kobjects in tlmi_analyze() and then by correctly cleaning them up in tlmi_release_attr() using their kset's kobject list.  Fixes: a40cd7ef22fb (""platform/x86: think-lmi: Add WMI interface support on Lenovo platforms"") Fixes: 30e78435d3bf (""platform/x86: think-lmi: Split kobject_init() and kobject_add() calls"") Cc: stable@vger.kernel.org Reviewed-by: Mark Pearson <mpearson-lenovo@squebb.ca> Reviewed-by: Ilpo JÃ¤rvinen <ilpo.jarvinen@linux.intel.com> Signed-off-by: Kurt Borja <kuurtb@gmail.com> Link: https://lore.kernel.org/r/20250630-lmi-fix-v3-2-ce4f81c9c481@gmail.com Signed-off-by: Ilpo JÃ¤rvinen <ilpo.jarvinen@linux.intel.com>",19,16,35
torvalds/linux,8dab34ca77293b409c3223636dde915a22656748,Kurt Borja,2025-06-30T17:31:19Z,platform/x86: think-lmi: Create ksets consecutively  Avoid entering tlmi_release_attr() in error paths if both ksets are not yet created.  This is accomplished by initializing them side by side.  Reviewed-by: Mark Pearson <mpearson-lenovo@squebb.ca> Reviewed-by: Ilpo JÃ¤rvinen <ilpo.jarvinen@linux.intel.com> Cc: stable@vger.kernel.org Signed-off-by: Kurt Borja <kuurtb@gmail.com> Link: https://lore.kernel.org/r/20250630-lmi-fix-v3-1-ce4f81c9c481@gmail.com Signed-off-by: Ilpo JÃ¤rvinen <ilpo.jarvinen@linux.intel.com>,8,6,14
torvalds/linux,5307dce878d4126e1b375587318955bd019c3741,Thomas Zimmermann,2025-06-30T08:36:47Z,"drm/gem: Acquire references on GEM handles for framebuffers  A GEM handle can be released while the GEM buffer object is attached to a DRM framebuffer. This leads to the release of the dma-buf backing the buffer object, if any. [1] Trying to use the framebuffer in further mode-setting operations leads to a segmentation fault. Most easily happens with driver that use shadow planes for vmap-ing the dma-buf during a page flip. An example is shown below.  [  156.791968] ------------[ cut here ]------------ [  156.796830] WARNING: CPU: 2 PID: 2255 at drivers/dma-buf/dma-buf.c:1527 dma_buf_vmap+0x224/0x430 [...] [  156.942028] RIP: 0010:dma_buf_vmap+0x224/0x430 [  157.043420] Call Trace: [  157.045898]  <TASK> [  157.048030]  ? show_trace_log_lvl+0x1af/0x2c0 [  157.052436]  ? show_trace_log_lvl+0x1af/0x2c0 [  157.056836]  ? show_trace_log_lvl+0x1af/0x2c0 [  157.061253]  ? drm_gem_shmem_vmap+0x74/0x710 [  157.065567]  ? dma_buf_vmap+0x224/0x430 [  157.069446]  ? __warn.cold+0x58/0xe4 [  157.073061]  ? dma_buf_vmap+0x224/0x430 [  157.077111]  ? report_bug+0x1dd/0x390 [  157.080842]  ? handle_bug+0x5e/0xa0 [  157.084389]  ? exc_invalid_op+0x14/0x50 [  157.088291]  ? asm_exc_invalid_op+0x16/0x20 [  157.092548]  ? dma_buf_vmap+0x224/0x430 [  157.096663]  ? dma_resv_get_singleton+0x6d/0x230 [  157.101341]  ? __pfx_dma_buf_vmap+0x10/0x10 [  157.105588]  ? __pfx_dma_resv_get_singleton+0x10/0x10 [  157.110697]  drm_gem_shmem_vmap+0x74/0x710 [  157.114866]  drm_gem_vmap+0xa9/0x1b0 [  157.118763]  drm_gem_vmap_unlocked+0x46/0xa0 [  157.123086]  drm_gem_fb_vmap+0xab/0x300 [  157.126979]  drm_atomic_helper_prepare_planes.part.0+0x487/0xb10 [  157.133032]  ? lockdep_init_map_type+0x19d/0x880 [  157.137701]  drm_atomic_helper_commit+0x13d/0x2e0 [  157.142671]  ? drm_atomic_nonblocking_commit+0xa0/0x180 [  157.147988]  drm_mode_atomic_ioctl+0x766/0xe40 [...] [  157.346424] ---[ end trace 0000000000000000 ]---  Acquiring GEM handles for the framebuffer's GEM buffer objects prevents this from happening. The framebuffer's cleanup later puts the handle references.  Commit 1a148af06000 (""drm/gem-shmem: Use dma_buf from GEM object instance"") triggers the segmentation fault easily by using the dma-buf field more widely. The underlying issue with reference counting has been present before.  v2: - acquire the handle instead of the BO (Christian) - fix comment style (Christian) - drop the Fixes tag (Christian) - rename err_ gotos - add missing Link tag  Suggested-by: Christian KÃ¶nig <christian.koenig@amd.com> Signed-off-by: Thomas Zimmermann <tzimmermann@suse.de> Link: https://elixir.bootlin.com/linux/v6.15/source/drivers/gpu/drm/drm_gem.c#L241 # [1] Cc: Thomas Zimmermann <tzimmermann@suse.de> Cc: Anusha Srivatsa <asrivats@redhat.com> Cc: Christian KÃ¶nig <christian.koenig@amd.com> Cc: Maarten Lankhorst <maarten.lankhorst@linux.intel.com> Cc: Maxime Ripard <mripard@kernel.org> Cc: Sumit Semwal <sumit.semwal@linaro.org> Cc: ""Christian KÃ¶nig"" <christian.koenig@amd.com> Cc: linux-media@vger.kernel.org Cc: dri-devel@lists.freedesktop.org Cc: linaro-mm-sig@lists.linaro.org Cc: <stable@vger.kernel.org> Reviewed-by: Christian KÃ¶nig <christian.koenig@amd.com> Link: https://lore.kernel.org/r/20250630084001.293053-1-tzimmermann@suse.de",51,11,62
torvalds/linux,34a500caf48c47d5171f4aa1f237da39b07c6157,Kohei Enju,2025-06-29T03:06:31Z,"rose: fix dangling neighbour pointers in rose_rt_device_down()  There are two bugs in rose_rt_device_down() that can cause use-after-free:  1. The loop bound `t->count` is modified within the loop, which can    cause the loop to terminate early and miss some entries.  2. When removing an entry from the neighbour array, the subsequent entries    are moved up to fill the gap, but the loop index `i` is still    incremented, causing the next entry to be skipped.  For example, if a node has three neighbours (A, A, B) with count=3 and A is being removed, the second A is not checked.      i=0: (A, A, B) -> (A, B) with count=2           ^ checked     i=1: (A, B)    -> (A, B) with count=2              ^ checked (B, not A!)     i=2: (doesn't occur because i < count is false)  This leaves the second A in the array with count=2, but the rose_neigh structure has been freed. Code that accesses these entries assumes that the first `count` entries are valid pointers, causing a use-after-free when it accesses the dangling pointer.  Fix both issues by iterating over the array in reverse order with a fixed loop bound. This ensures that all entries are examined and that the removal of an entry doesn't affect subsequent iterations.  Reported-by: syzbot+e04e2c007ba2c80476cb@syzkaller.appspotmail.com Closes: https://syzkaller.appspot.com/bug?extid=e04e2c007ba2c80476cb Tested-by: syzbot+e04e2c007ba2c80476cb@syzkaller.appspotmail.com Fixes: 1da177e4c3f4 (""Linux-2.6.12-rc2"") Signed-off-by: Kohei Enju <enjuk@amazon.com> Reviewed-by: Simon Horman <horms@kernel.org> Link: https://patch.msgid.link/20250629030833.6680-1-enjuk@amazon.com Signed-off-by: Jakub Kicinski <kuba@kernel.org>",4,11,15
torvalds/linux,aaf2b2480375099c022a82023e1cd772bf1c6a5d,Alok Tiwari,2025-06-28T14:56:05Z,"enic: fix incorrect MTU comparison in enic_change_mtu()  The comparison in enic_change_mtu() incorrectly used the current netdev->mtu instead of the new new_mtu value when warning about an MTU exceeding the port MTU. This could suppress valid warnings or issue incorrect ones.  Fix the condition and log to properly reflect the new_mtu.  Fixes: ab123fe071c9 (""enic: handle mtu change for vf properly"") Signed-off-by: Alok Tiwari <alok.a.tiwari@oracle.com> Acked-by: John Daley <johndale@cisco.com> Reviewed-by: Simon Horman <horms@kernel.org> Link: https://patch.msgid.link/20250628145612.476096-1-alok.a.tiwari@oracle.com Signed-off-by: Jakub Kicinski <kuba@kernel.org>",2,2,4
torvalds/linux,bf906c988d77d9cdfb52a7d19ad9b183991271a3,Dave Airlie,2025-07-02T01:17:25Z,Merge tag 'amd-drm-fixes-6.16-2025-07-01' of https://gitlab.freedesktop.org/agd5f/linux into drm-fixes  amd-drm-fixes-6.16-2025-07-01:  amdgpu: - SDMA 5.x reset fix - Add missing firmware declaration - Fix leak in amdgpu_ctx_mgr_entity_fini() - Freesync fix - OLED backlight fix  amdkfd: - mtype fix for ext coherent system memory - MMU notifier fix - gfx7/8 fix  Signed-off-by: Dave Airlie <airlied@redhat.com>  From: Alex Deucher <alexander.deucher@amd.com> Link: https://lore.kernel.org/r/20250701192642.32490-1-alexander.deucher@amd.com,67,31,98
torvalds/linux,42fd432fe6d320323215ebdf4de4d0d7e56e6792,Raju Rangoju,2025-06-30T19:26:36Z,"amd-xgbe: align CL37 AN sequence as per databook  Update the Clause 37 Auto-Negotiation implementation to properly align with the PCS hardware specifications: - Fix incorrect bit settings in Link Status and Link Duplex fields - Implement missing sequence steps 2 and 7  These changes ensure CL37 auto-negotiation protocol follows the exact sequence patterns as specified in the hardware databook.  Fixes: 1bf40ada6290 (""amd-xgbe: Add support for clause 37 auto-negotiation"") Signed-off-by: Raju Rangoju <Raju.Rangoju@amd.com> Link: https://patch.msgid.link/20250630192636.3838291-1-Raju.Rangoju@amd.com Signed-off-by: Jakub Kicinski <kuba@kernel.org>",13,2,15
torvalds/linux,e6ed134a4ef592fe1fd0cafac9683813b3c8f3e8,Dan Carpenter,2025-06-30T19:36:40Z,"lib: test_objagg: Set error message in check_expect_hints_stats()  Smatch complains that the error message isn't set in the caller:      lib/test_objagg.c:923 test_hints_case2()     error: uninitialized symbol 'errmsg'.  This static checker warning only showed up after a recent refactoring but the bug dates back to when the code was originally added.  This likely doesn't affect anything in real life.  Reported-by: kernel test robot <lkp@intel.com> Closes: https://lore.kernel.org/r/202506281403.DsuyHFTZ-lkp@intel.com/ Fixes: 0a020d416d0a (""lib: introduce initial implementation of object aggregation manager"") Signed-off-by: Dan Carpenter <dan.carpenter@linaro.org> Reviewed-by: Ido Schimmel <idosch@nvidia.com> Reviewed-by: Simon Horman <horms@kernel.org> Link: https://patch.msgid.link/8548f423-2e3b-4bb7-b816-5041de2762aa@sabinyo.mountain Signed-off-by: Jakub Kicinski <kuba@kernel.org>",3,1,4
torvalds/linux,94426e4201fbb1c5ea4a697eb62a8b7cd7dfccbf,Kent Overstreet,2025-06-26T13:46:35Z,"bcachefs: opts.casefold_disabled  Add an option for completely disabling casefolding on a filesystem, as a workaround for overlayfs.  This should only be needed as a temporary workaround, until the overlayfs fix arrives.  Signed-off-by: Kent Overstreet <kent.overstreet@linux.dev>",55,43,98
torvalds/linux,c6e8d51b37d2ca37dee63753fd240bcbc6402ad3,Kent Overstreet,2025-07-01T17:36:51Z,"bcachefs: Work around deadlock to btree node rewrites in journal replay  Don't mark btree nodes for rewrites, if they are or would be degraded, if journal replay hasn't finished, to avoid a deadlock.  This is because btree node rewrites generate more updates for the interior updates (alloc, backpointers), and if those updates touch new nodes and generate more rewrites - we can only have so many interior btree updates in flight before we deadlock on open_buckets.  The biggest cause is that we don't use the btree write buffer (for the backpointer updates - this needs some real thought on locking in order to fix.  The problem with this workaround (not doing the rewrite for degraded nodes in journal replay) is that those degraded nodes persist, and we don't want that (this is a real bug when a btree node write completes with fewer replicas than we wanted and leaves a degraded node due to device _removal_, i.e. the device went away mid write).  It's less of a bug here, but still a problem because we don't yet have a way of tracking degraded data - we another index (all extents/btree nodes, by replicas entry) in order to fix properly (re-replicate degraded data at the earliest possible time).  Signed-off-by: Kent Overstreet <kent.overstreet@linux.dev>",35,8,43
torvalds/linux,8af39ec5cf2be522c8eb43a3d8005ed59e4daaee,Matthew Brost,2025-06-13T21:20:13Z,"drm/sched: Increment job count before swapping tail spsc queue  A small race exists between spsc_queue_push and the run-job worker, in which spsc_queue_push may return not-first while the run-job worker has already idled due to the job count being zero. If this race occurs, job scheduling stops, leading to hangs while waiting on the jobâs DMA fences.  Seal this race by incrementing the job count before appending to the SPSC queue.  This race was observed on a drm-tip 6.16-rc1 build with the Xe driver in an SVM test case.  Fixes: 1b1f42d8fde4 (""drm: move amd_gpu_scheduler into common location"") Fixes: 27105db6c63a (""drm/amdgpu: Add SPSC queue to scheduler."") Cc: stable@vger.kernel.org Signed-off-by: Matthew Brost <matthew.brost@intel.com> Reviewed-by: Jonathan Cavitt <jonathan.cavitt@intel.com> Link: https://lore.kernel.org/r/20250613212013.719312-1-matthew.brost@intel.com",3,1,4
torvalds/linux,aa18d5769fcafe645a3ba01a9a69dde4f8dc8cc3,Harry Austen,2025-06-27T20:30:35Z,"drm/xe: Allow dropping kunit dependency as built-in  Fix Kconfig symbol dependency on KUNIT, which isn't actually required for XE to be built-in. However, if KUNIT is enabled, it must be built-in too.  Fixes: 08987a8b6820 (""drm/xe: Fix build with KUNIT=m"") Cc: Lucas De Marchi <lucas.demarchi@intel.com> Cc: Thomas HellstrÃ¶m <thomas.hellstrom@linux.intel.com> Cc: Jani Nikula <jani.nikula@linux.intel.com> Cc: Maarten Lankhorst <maarten.lankhorst@linux.intel.com> Signed-off-by: Harry Austen <hpausten@protonmail.com> Reviewed-by: Lucas De Marchi <lucas.demarchi@intel.com> Acked-by: Randy Dunlap <rdunlap@infradead.org> Tested-by: Randy Dunlap <rdunlap@infradead.org> Link: https://lore.kernel.org/r/20250627-xe-kunit-v2-2-756fe5cd56cf@intel.com Signed-off-by: Lucas De Marchi <lucas.demarchi@intel.com> (cherry picked from commit a559434880b320b83733d739733250815aecf1b0) Signed-off-by: Lucas De Marchi <lucas.demarchi@intel.com>",2,1,3
torvalds/linux,de6acfdc390ec2eb64d43186721038ddc93228b3,Lucas De Marchi,2025-06-11T19:38:37Z,"drm/xe: Fix kconfig prompt  The xe driver is the official driver for Intel Xe2 and later, while maintaining experimental support for earlier GPUs. Reword the help message accordingly.  Reviewed-by: Maarten Lankhorst <dev@lankhorst.se> Link: https://lore.kernel.org/r/20250611-xe-kconfig-help-v1-1-8bcc6b47d11a@intel.com Signed-off-by: Lucas De Marchi <lucas.demarchi@intel.com> (cherry picked from commit 1488a3089de3d0bcdc9532da7ce04cf0af9d7dd0) Signed-off-by: Lucas De Marchi <lucas.demarchi@intel.com>",4,3,7
torvalds/linux,84c0b4a00610afbde650fdb8ad6db0424f7b2cc3,Vinay Belgaumkar,2025-06-18T18:50:01Z,"drm/xe/bmg: Update Wa_22019338487  Limit GT max frequency to 2600MHz and wait for frequency to reduce before proceeding with a transient flush. This is really only needed for the transient flush: if L2 flush is needed due to 16023588340 then there's no need to do this additional wait since we are already using the bigger hammer.  v2: Use generic names, ensure user set max frequency requests wait for flush to complete (Rodrigo) v3:  - User requests wait via wait_var_event_timeout (Lucas)  - Close races on flush + user requests (Lucas)  - Fix xe_guc_pc_remove_flush_freq_limit() being called on last gt    rather than root gt (Lucas) v4:  - Only apply the freq reducing part if a TDF is needed: L2 flush trumps    the need for waiting a lower frequency  Fixes: aaa08078e725 (""drm/xe/bmg: Apply Wa_22019338487"") Reviewed-by: Rodrigo Vivi <rodrigo.vivi@intel.com> Signed-off-by: Vinay Belgaumkar <vinay.belgaumkar@intel.com> Link: https://lore.kernel.org/r/20250618-wa-22019338487-v5-4-b888388477f2@intel.com Signed-off-by: Lucas De Marchi <lucas.demarchi@intel.com> (cherry picked from commit deea6a7d6d803d6bb874a3e6f1b312e560e6c6df) Signed-off-by: Lucas De Marchi <lucas.demarchi@intel.com>",135,2,137
torvalds/linux,a5c7dcdd969f2248cc91d65e5ac852859fc8dac2,Vinay Belgaumkar,2025-06-12T07:09:02Z,drm/xe/bmg: Update Wa_14022085890  Set GT min frequency to 1200Mhz once driver load is complete.  v2: Review comments (Rodrigo) v3: Apply Wa earlier so user_req_min is not clobbered. v4: Apply to all GTs (Lucas)  Cc: Matt Roper <matthew.d.roper@intel.com> Cc: Rodrigo Vivi <rodrigo.vivi@intel.com> Signed-off-by: Vinay Belgaumkar <vinay.belgaumkar@intel.com> Reviewed-by: Stuart Summers <stuart.summers@intel.com> Link: https://lore.kernel.org/r/20250612-wa-14022085890-v4-3-94ba5dcc1e30@intel.com Signed-off-by: Lucas De Marchi <lucas.demarchi@intel.com> (cherry picked from commit bdde16c9ac5cb56ad2ee19792222fa1853577af7) Signed-off-by: Lucas De Marchi <lucas.demarchi@intel.com>,9,0,9
torvalds/linux,a1eec6cae95a1a0888cb8370338822ca81cd9436,Lucas De Marchi,2025-06-18T18:50:00Z,"drm/xe: Split xe_device_td_flush()  xe_device_td_flush() has 2 possible implementations: an entire L2 flush or a transient flush, depending on WA 16023588340. Make this clear by splitting the function so it calls each of them.  Reviewed-by: Matthew Auld <matthew.auld@intel.com> Link: https://lore.kernel.org/r/20250618-wa-22019338487-v5-3-b888388477f2@intel.com Signed-off-by: Lucas De Marchi <lucas.demarchi@intel.com> (cherry picked from commit 5e300ed8a545bdffc26b579c526b5fef7b2d5365) Signed-off-by: Lucas De Marchi <lucas.demarchi@intel.com>",40,28,68
torvalds/linux,4cec9099b93a63eb0b1e8cbbe6419fdaeb72e09b,Lucas De Marchi,2025-06-18T18:49:59Z,"drm/xe/xe_guc_pc: Lock once to update stashed frequencies  pc_set_mert_freq_cap() currently lock()/unlock() the mutex multiple times to stash the current frequencies. It's not a problem since xe_guc_pc_restore_stashed_freq() is guaranteed to be called only later in the init sequence. However, now that we have _locked() variants for this functions, use them and avoid potential issues when called from other places or using the same pattern.  While at it, prefer and early return for the WA check to reduce indentation.  Reviewed-by: Rodrigo Vivi <rodrigo.vivi@intel.com> Link: https://lore.kernel.org/r/20250618-wa-22019338487-v5-2-b888388477f2@intel.com Signed-off-by: Lucas De Marchi <lucas.demarchi@intel.com> (cherry picked from commit d878c97daa603573e5af01fd8beec2fffdb42ad1) Signed-off-by: Lucas De Marchi <lucas.demarchi@intel.com>",20,19,39
torvalds/linux,d8390768dcf6f5a78af56aa03797a076871b01f3,Lucas De Marchi,2025-06-18T18:49:58Z,"drm/xe/guc_pc: Add _locked variant for min/max freq  There are places in which the getters/setters are called one after the other causing a multiple lock()/unlock(). These are not currently a problem since they are all happening from the same thread, but there's a race possibility as calls are added outside of the early init when the max/min and stashed values need to be correlated.  Add the _locked() variants to prepare for that.  Reviewed-by: Rodrigo Vivi <rodrigo.vivi@intel.com> Link: https://lore.kernel.org/r/20250618-wa-22019338487-v5-1-b888388477f2@intel.com Signed-off-by: Lucas De Marchi <lucas.demarchi@intel.com> (cherry picked from commit 1beae9aa2b88d3a02eb666e7b777eb2d7bc645f4) Signed-off-by: Lucas De Marchi <lucas.demarchi@intel.com>",69,54,123
torvalds/linux,65c1736c8e9d06bfa5cc734b156518ff65926918,Linus Torvalds,2025-07-01T20:50:21Z,Merge tag 'mfd-fixes-6.16' of git://git.kernel.org/pub/scm/linux/kernel/git/lee/mfd  Pull MFD fix from Lee Jones:   - Fix some -Werror=unused-variable build errors  * tag 'mfd-fixes-6.16' of git://git.kernel.org/pub/scm/linux/kernel/git/lee/mfd:   mfd: Fix building without CONFIG_OF,5,7,12
torvalds/linux,afcad92411772a1f361339f22c49f855c6cc7d0f,Matthew Brost,2025-06-12T03:19:25Z,"drm/xe: Make WA BB part of LRC BO  No idea why, but without this GuC context switches randomly fail when running IGTs in a loop. Need to follow up why this fixes the aforementioned issue but can live with a stable driver for now.  Fixes: 617d824c5323 (""drm/xe: Add WA BB to capture active context utilization"") Cc: stable@vger.kernel.org Signed-off-by: Matthew Brost <matthew.brost@intel.com> Reviewed-by: Lucas De Marchi <lucas.demarchi@intel.com> Tested-by: Shuicheng Lin <shuicheng.lin@intel.com> Link: https://lore.kernel.org/r/20250612031925.4009701-1-matthew.brost@intel.com (cherry picked from commit 3a1edef8f4b58b0ba826bc68bf4bce4bdf59ecf3) Signed-off-by: Lucas De Marchi <lucas.demarchi@intel.com>",19,21,40
torvalds/linux,ce95858aeedfd7f942e91234b81841eec0260a82,Linus Torvalds,2025-07-01T20:42:30Z,Merge tag 'nfs-for-6.16-2' of git://git.linux-nfs.org/projects/anna/linux-nfs  Pull NFS client fixes from Anna Schumaker:   - Fix loop in GSS sequence number cache   - Clean up /proc/net/rpc/nfs if nfs_fs_proc_net_init() fails   - Fix a race to wake on NFS_LAYOUT_DRAIN   - Fix handling of NFS level errors in I/O  * tag 'nfs-for-6.16-2' of git://git.linux-nfs.org/projects/anna/linux-nfs:   NFSv4/flexfiles: Fix handling of NFS level errors in I/O   NFSv4/pNFS: Fix a race to wake on NFS_LAYOUT_DRAIN   nfs: Clean up /proc/net/rpc/nfs when nfs_fs_proc_net_init() fails.   sunrpc: fix loop in gss seqno cache,102,39,141
torvalds/linux,d5cb81ba929c1b0d02dadd4be27fc1440dd2e014,Christian Brauner,2025-07-01T20:37:20Z,"Merge patch series ""netfs, cifs: Fixes to retry-related code""  David Howells <dhowells@redhat.com> says:  Here are some miscellaneous fixes and changes for netfslib and cifs, if you could consider pulling them.  Many of these were found because a bug in Samba was causing smbd to crash and restart after about 1-2s and this was vigorously and abruptly exercising the netfslib retry paths.  Subsequent testing of the cifs RDMA support showed up some more bugs, but the fixes for those went via the cifs tree and have been removed from this set as they're now upstream.  First, there are some netfs fixes:   (1) Fix a hang due to missing case in final DIO read result collection      not breaking out of a loop if the request finished, but there were no      subrequests being processed and NETFS_RREQ_ALL_QUEUED wasn't yet set.   (2) Fix a double put of the netfs_io_request struct if completion happened      in the pause loop.   (3) Provide some helpers to abstract out NETFS_RREQ_IN_PROGRESS flag      wrangling.   (4) Fix infinite looping in netfs_wait_for_pause/request() which wa caused      by a loop waiting for NETFS_RREQ_ALL_QUEUED to get set - but which      wouldn't get set until the looping function returned.  This uses patch      (3) above.   (5) Fix a ref leak on an extra subrequest inserted into a request's list      of subreqs because more subreq records were needed for retrying than      were needed for the original request (say, for instance, that the      amount of cifs credit available was reduced and, subsequently, the ops      had to be smaller).  Then a bunch of cifs fixes, some of which are from other people:   (6-8) cifs: Fix various RPC callbacks to set NETFS_SREQ_NEED_RETRY if a      subrequest fails retriably.  (10) Fix a warning in the workqueue code when reconnecting a channel.  Followed by some patches to deal with i_size handling:  (11) Fix the updating of i_size to use a lock to avoid a race between      testing if we should have extended the file with a DIO write and      changing i_size.  (12) A follow-up patch to (11) to merge the places in netfslib that update      i_size on write.  And finally a couple of patches to improve tracing output, but that should otherwise not affect functionality:  (13) Renumber the NETFS_RREQ_* flags to make the hex values easier to      interpret by eye, including moving the main status flags down to the      lowest bits, with IN_PROGRESS in bit 0.  (14) Update the tracepoints in a number of ways, including adding more      tracepoints into the cifs read/write RPC callback so that differend      MID_RESPONSE_* values can be differentiated.  * patches from https://lore.kernel.org/20250701163852.2171681-1-dhowells@redhat.com:   netfs: Update tracepoints in a number of ways   netfs: Renumber the NETFS_RREQ_* flags to make traces easier to read   netfs: Merge i_size update functions   netfs: Fix i_size updating   smb: client: set missing retry flag in cifs_writev_callback()   smb: client: set missing retry flag in cifs_readv_callback()   smb: client: set missing retry flag in smb2_writev_callback()   netfs: Fix ref leak on inserted extra subreq in write retry   netfs: Fix looping in wait functions   netfs: Provide helpers to perform NETFS_RREQ_IN_PROGRESS flag wangling   netfs: Fix double put of request   netfs: Fix hang due to missing case in final DIO read result collection  Link: https://lore.kernel.org/20250701163852.2171681-1-dhowells@redhat.com Signed-off-by: Christian Brauner <brauner@kernel.org>",178,90,268
torvalds/linux,90b3ccf514578ca3a6ac25db51a29a48e34e0f1b,David Howells,2025-07-01T16:38:48Z,"netfs: Update tracepoints in a number of ways  Make a number of updates to the netfs tracepoints:   (1) Remove a duplicate trace from netfs_unbuffered_write_iter_locked().   (2) Move the trace in netfs_wake_rreq_flag() to after the flag is cleared      so that the change appears in the trace.   (3) Differentiate the use of netfs_rreq_trace_wait/woke_queue symbols.   (4) Don't do so many trace emissions in the wait functions as some of them      are redundant.   (5) In netfs_collect_read_results(), differentiate a subreq that's being      abandoned vs one that has been consumed in a regular way.   (6) Add a tracepoint to indicate the call to ->ki_complete().   (7) Don't double-increment the subreq_counter when retrying a write.   (8) Move the netfs_sreq_trace_io_progress tracepoint within cifs code to      just MID_RESPONSE_RECEIVED and add different tracepoints for other MID      states and note check failure.  Signed-off-by: David Howells <dhowells@redhat.com> Co-developed-by: Paulo Alcantara <pc@manguebit.org> Signed-off-by: Paulo Alcantara <pc@manguebit.org> Link: https://lore.kernel.org/20250701163852.2171681-14-dhowells@redhat.com cc: Steve French <sfrench@samba.org> cc: netfs@lists.linux.dev cc: linux-fsdevel@vger.kernel.org cc: linux-cifs@vger.kernel.org Signed-off-by: Christian Brauner <brauner@kernel.org>",79,27,106
torvalds/linux,4e32541076833f5ce2e23523c9faa25f7b2cc96f,David Howells,2025-07-01T16:38:47Z,"netfs: Renumber the NETFS_RREQ_* flags to make traces easier to read  Renumber the NETFS_RREQ_* flags to put the most useful status bits in the bottom nibble - and therefore the last hex digit in the trace output - making it easier to grasp the state at a glance.  In particular, put the IN_PROGRESS flag in bit 0 and ALL_QUEUED at bit 1.  Also make the flags field in /proc/fs/netfs/requests larger to accommodate all the flags.  Also make the flags field in the netfs_sreq tracepoint larger to accommodate all the NETFS_SREQ_* flags.  Signed-off-by: David Howells <dhowells@redhat.com> Link: https://lore.kernel.org/20250701163852.2171681-13-dhowells@redhat.com Reviewed-by: Paulo Alcantara <pc@manguebit.org> cc: netfs@lists.linux.dev cc: linux-fsdevel@vger.kernel.org Signed-off-by: Christian Brauner <brauner@kernel.org>",14,14,28
torvalds/linux,5e1e6ec2e346c0850f304c31abdef4158007474e,David Howells,2025-07-01T16:38:46Z,"netfs: Merge i_size update functions  Netfslib has two functions for updating the i_size after a write: one for buffered writes into the pagecache and one for direct/unbuffered writes. However, what needs to be done is much the same in both cases, so merge them together.  This does raise one question, though: should updating the i_size after a direct write do the same estimated update of i_blocks as is done for buffered writes.  Also get rid of the cleanup function pointer from netfs_io_request as it's only used for direct write to update i_size; instead do the i_size setting directly from write collection.  Signed-off-by: David Howells <dhowells@redhat.com> Link: https://lore.kernel.org/20250701163852.2171681-12-dhowells@redhat.com cc: Steve French <sfrench@samba.org> cc: Paulo Alcantara <pc@manguebit.org> cc: linux-cifs@vger.kernel.org cc: netfs@lists.linux.dev cc: linux-fsdevel@vger.kernel.org Signed-off-by: Christian Brauner <brauner@kernel.org>",31,37,68

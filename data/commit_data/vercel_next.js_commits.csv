repo,sha,author,date,message,additions,deletions,total_changes
vercel/next.js,be7b3a64fab12ddb5bb233d384e062125c343306,nextjs-bot,2025-07-11T23:24:47Z,v15.4.0-canary.127,34,34,68
vercel/next.js,145d7613b621369afa7ddc0a05ed3ebecda4b624,Rob Pruzan,2025-07-11T21:08:22Z,"fix: update useEffect closure when menu is truly mounted (#81531)  Previously we mounted event handlers on the the menu's [`ownerDocument`](https://developer.mozilla.org/en-US/docs/Web/API/Node/ownerDocument) to listen for clicks outside the menu. This causes a bug where the ref the useEffect captures is not set yet, and when it is set the effect does not try to run again. The fix is to derive active state from the true state tracking if the menu is mounted, not if the menu __will be open__  ### Before  https://github.com/user-attachments/assets/d88f9b46-2203-45f3-a184-46db39584679  ### After   https://github.com/user-attachments/assets/57a0f68f-8d46-41ea-b761-222c82e4b6bc",4,4,8
vercel/next.js,3be29d88298c12ec313d771a5e7ccbdad55b9b60,nextjs-bot,2025-07-11T21:00:51Z,Upgrade React from `96c61b7f-20250709` to `97cdd5d3-20250710` (#81551),7022,4365,11387
vercel/next.js,4dd01eea2f852dfc41a955dacae8cbc4510df758,"Sebastian ""Sebbie"" Silbermann",2025-07-11T19:45:49Z,[sourcemaps] Properly devirtualize `rsc:` URLs (#81554),125,199,324
vercel/next.js,fcadb6846ebbf21ce861abcdd2e00850c0fe5cba,Nazar,2025-07-11T19:40:04Z,"docs: update Page example to use Promise-based params in 05-server-and-client-components.mdx (#81557)  What? This PR updates the Page component example in 05-server-and-client-components.mdx to use Promise-based params as recommended in the Next.js 15 documentation.  Why? Next.js 15 introduced support for async props, allowing the params prop to be a Promise in Server Components. Updating the documentation ensures that users follow the latest recommended practices and avoid confusion when working with dynamic routes in Next.js 15.  How? - Changed the Page component example to accept params as a Promise and use await params to destructure the id. - Updated the type annotation accordingly.",14,4,18
vercel/next.js,d7fa64ea3babbcdebabeaae48bbc3da3bb347828,Hendrik Liebau,2025-07-11T19:17:40Z,"Update eslint and restore `.eslintrc.cli.json` being used for CLI/CI-based linting (#81553)  This will allow us (again) to selectively use type-checked rules internally, as stipulated in #67689. In a follow-up, we'll likely add https://typescript-eslint.io/rules/switch-exhaustiveness-check/ as a first type-checked rule.",167,155,322
vercel/next.js,f1b95e04e9ae9fcd85cba20f9291e1519e03acac,JJ Kasper,2025-07-11T18:33:50Z,Update rust-cache action to v1.0.9 (#81555)  Adds a 60s timeout for fetching the cache to avoid this blocking continuing  x-ref: https://github.com/ijjk/rust-cache/commit/a34594c450817c9860143c79797a8770c4e587f5,3,3,6
vercel/next.js,d6bc6b055d05bf0861a0b8a216405bec1a2db93e,Niklas Mischkulnig,2025-07-11T14:01:59Z,Turbopack: only emit `*.single.css` chunks in dev (#81490)  They are only ever used in dev.  Closes PACK-4767,91,1041,1132
vercel/next.js,4bfa2986054db7c58a94b268565960cef8673b7d,"Sebastian ""Sebbie"" Silbermann",2025-07-11T13:55:50Z,[test] Use same pnpm in temporary repo directory (#81540),6,1,7
vercel/next.js,27250721aa125ec27d03b3111a3e15569ba57983,Jiachi Liu,2025-07-11T13:42:57Z,[segment explorer] redesign file pills and boundary trigger (#81302),640,219,859
vercel/next.js,f024178135f1e4f468644715e138f05b064fe120,Niklas Mischkulnig,2025-07-11T13:07:28Z,"Turbopack: fix `@opentelemetry/api` resolve fallback (#81541)  Previously, it tried `[project]/node_modules/@opentelemetry/api` and then fell back to `node_modules/next/dist/compiled/@opentelemetry/api`.  But that doesn't work if the dependency is installed in a monorepo subpackage and should have been resolved from `packages/my-app/node_modules/@opentelemetry/api`.  We already have `fallback_import_map` which is exactly what's needed here.  Closes PACK-5054",41,21,62
vercel/next.js,48b2976ed268a78249679a82da43750e190943a1,Tobias Koppers,2025-07-11T12:34:38Z,Turbopack: add module cost benchmark (#81530)  ### What?  Add a benchmark that requires/imports nearly 10k of empty modules.  Measures load and execution time for these modules.  Might also be useful to measure the compile overhead of modules.,414,12,426
vercel/next.js,7560398745ed989253920d6f08fba56e11496ca0,Joseph,2025-07-11T11:27:55Z,"docs: root layout + opengraph-image + cna-eslit vs next lint bootstrap (#81542)  Fixes: https://github.com/vercel/next.js/issues/81529, https://github.com/vercel/next.js/issues/81352 and https://github.com/vercel/next.js/issues/78630",11,6,17
vercel/next.js,8389b9f7f5f9a4c568725e2dceedfbdc5949c675,Niklas Mischkulnig,2025-07-11T09:43:54Z,"Turbopack: remove `clone_value` again (#81539)  ``` ast-grep run --pattern '$$$X.await?.clone_value()' --rewrite '$$$X.owned().await?' --lang rust -U ```  This was originally removed in #75852, but added again in #80634 for no apparent reason.",297,413,710
vercel/next.js,e3a1aba8ed55afe04b0cad6de79e855efc4b1262,Niklas Mischkulnig,2025-07-11T09:10:44Z,Turbopack: refactor ReadRef deref + clone to the intended pattern (#81537)  ``` ast-grep run --pattern '(*$$$X.await?).clone()' --rewrite '$$$X.owned().await?' --lang rust -U ```,49,32,81
vercel/next.js,e53f84b3fbbb4b2ec420eb8d01c30fe49e7e4674,nextjs-bot,2025-07-11T08:22:15Z,Upgrade React from `60b5271a-20250709` to `96c61b7f-20250709` (#81505),392,392,784
vercel/next.js,72c963503ce8b6804807f1d42f5f726654ca35f8,"Sebastian ""Sebbie"" Silbermann",2025-07-11T07:53:30Z,Pass `filterStackFrame` everywhere (#81516),44,61,105
vercel/next.js,2f97e3c04ef73466223e863ae4a1473de77a71ed,nextjs-bot,2025-07-11T00:44:06Z,v15.4.0-canary.126,34,34,68
vercel/next.js,a4a754d01cd1dd1f1d1498a2135c382328537dd0,Benjamin Woodruff,2025-07-11T00:38:49Z,"fix(CI): On musl/alpine builds, pin llvm to llvm20, add llvm bin directory to path (#81519)  Alpine Edge recently removed `llvm-config` from the PATH:  - 3.22: https://pkgs.alpinelinux.org/contents?file=llvm-config&path=&name=&branch=v3.22&repo=&arch=x86_64 - Edge: https://pkgs.alpinelinux.org/contents?file=llvm-config&path=&name=&branch=edge&repo=&arch=x86_64  CI job: https://github.com/vercel/next.js/actions/runs/16208743604  Also, fix a bunch of escaping problems with how we invoke bash inside of docker...  Co-authored-by: Will Binns-Smith <wbinnssmith@gmail.com>",51,45,96
vercel/next.js,5157472d841b06cf58f5e63b38167256fb01f012,nextjs-bot,2025-07-10T23:24:47Z,v15.4.0-canary.125,34,34,68
vercel/next.js,16c53236a7cafb2dae74656dfdb4127ca4a84241,"Sebastian ""Sebbie"" Silbermann",2025-07-10T22:05:27Z,Configure `url` for responses from patched fetch like the original `response.url` (#81507)  The main config that was missing is enumerability which is relevant for showing properties in the Chrome performance track and inferring shorthands.,15,3,18
vercel/next.js,e98773491894e386c7dab016599331a2152221b3,nextjs-bot,2025-07-10T21:34:52Z,v15.4.0-canary.124,34,34,68
vercel/next.js,df2c2a8cf0b7287bed517153db5758d365b95c6c,"Sebastian ""Sebbie"" Silbermann",2025-07-10T21:29:58Z,[sourcemaps] Stop sending stackframes in third-party chunks (#81344),247,46,293
vercel/next.js,b0641f12e9fefb7e75049c6ab9477ce2d211e471,"Sebastian ""Sebbie"" Silbermann",2025-07-10T21:21:30Z,[turbopack] Improve internal error message when source map retrieval fails (#81508)  Mostly so that I know which source URL slipped through.,22,10,32
vercel/next.js,535ba0676ab5f46a1e6dcc88306914091515f468,Hendrik Liebau,2025-07-10T19:45:30Z,Remove unused `syncDynamicExpression` (#81187)  The `syncDynamicExpression` property of `DynamicTrackingState` is not used anymore.,0,4,4
vercel/next.js,bdcb114ddbb7207108d21f142727465d134a2f9e,Niklas Mischkulnig,2025-07-10T19:31:06Z,"Turbopack: fix export-all-as with name collision (#81510)  `EcmascriptModulePartReference` is a pretty counterintuitive reference. The `part` declares which module should be synthesised on the other side. That doesn't have anything to do with which exports are actually being imported by reference.  This only triggered a bug when these exports here had the same name by coincidence ```js // reexport.js export * as Sub from './sub.js' // <-- // sub.js export const Sub = 123 // <--  ```",18,13,31
vercel/next.js,17a1fd8f4caa56e31ed4541068f19ea4963f3036,Tobias Koppers,2025-07-10T18:53:23Z,Turbopack: improve debugging features (#81415)  ### What?  * add no_fast_stale feature * nicer hanging messages * print details on strongly consistent hanging (prints which tasks are not completing and the chain to them),140,17,157
vercel/next.js,f219487dcdde38b9263e797d452c65f48ee65d39,Wyatt Johnson,2025-07-10T17:48:57Z,"feat(test): introduce cache components testing infrastructure (#81394)  ### What?  Introduces a testing infrastructure to validate Next.js behavior with the experimental Cache Components feature (`dynamicIO`) enabled. This PR adds dedicated CI jobs and configuration to run a subset of existing tests with Cache Components activated.  This has 271 more disabled test suites than the Legacy PPR test suite manifest. The expectation is that we will be resolving the test failures in followup PRs.  ### Why?  Cache Components (dynamicIO) represents a significant architectural change in how Next.js handles component caching and rendering. To ensure a smooth transition when this becomes the default behavior, we need to:  1. **Validate compatibility** - Ensure existing applications continue to work correctly when Cache Components is enabled 2. **Identify edge cases** - Catch potential issues early by running tests in this new mode 3. **Build confidence** - Provide a safety net for the eventual migration to Cache Components as the default  The manifest-based approach allows us to incrementally expand test coverage as we fix compatibility issues, rather than attempting to run all tests at once which would be overwhelming and block progress.  ### How?  - **Test manifest** (`test/cache-components-tests-manifest.json`): Defines which tests to run and tracks known failures that need addressing - **CI workflow changes**: Adds three new job groups that mirror existing test jobs but with Cache Components enabled:   - `test-cache-components-integration`   - `test-cache-components-dev` (parallelized across 6 groups)   - `test-cache-components-prod` (parallelized across 7 groups) - **Conditional feature activation**: When `__NEXT_EXPERIMENTAL_CACHE_COMPONENTS=true` is set during testing, `dynamicIO` is automatically enabled unless explicitly disabled - **Test adjustments**: Updates error message expectations in tests to handle the different environment label (""Prerender"" vs ""Server"") when Cache Components is active  The infrastructure is designed to be temporary and will be removed once Cache Components becomes the default behavior.  NAR-172",444,1,445
vercel/next.js,7c6ac5fd191fc602de348846fbe12798c860bcea,Vercel Release Bot,2025-07-10T15:45:23Z,Update Rspack development test manifest (#81484)  This auto-generated PR updates the development integration test manifest used when testing Rspack.  Co-authored-by: nextjs-bot <it+nextjs-bot@vercel.com>,40,54,94
vercel/next.js,efe425070a1749c1c689793733e4995478133748,Vercel Release Bot,2025-07-10T15:44:58Z,Update Rspack production test manifest (#81485)  This auto-generated PR updates the production integration test manifest used when testing Rspack.  Co-authored-by: nextjs-bot <it+nextjs-bot@vercel.com>,54,68,122
vercel/next.js,8886e01d1ae51f8f4572713e3e9d143c40e076b1,Niklas Mischkulnig,2025-07-10T14:15:51Z,Turbopack: remove duplicate newlines in CSS chunks (#81488)  ![Bildschirmfoto 2025-07-10 um 09 50 56](https://github.com/user-attachments/assets/440d8d6e-c612-426d-bf30-46b20a50866e),69,175,244
vercel/next.js,b5ced37273d49cefa447c3e87895fda338f1afe3,Hendrik Liebau,2025-07-10T13:48:42Z,"Name patched `fetch` function `fetch` (#81499)  This ensures that `fetch` is shown in stack traces (in collapsed ignore-listed frames), instead of `patched`.",9,10,19
vercel/next.js,094253c14c136164212eca856b52b1b218b91a94,Joseph,2025-07-10T09:18:22Z,docs: add missing switcher (#81489)  Fixing a couple of code snippets annoyances,6,6,12
vercel/next.js,fceb19f9b470980ac7384fde07b8f3cdd0201a73,Niklas Mischkulnig,2025-07-10T08:48:36Z,Turbopack: remove CssOptionsContext.minify (#81487)  Use `chunking_context.minify_type().await?` just as JS does,748,293,1041
vercel/next.js,c278c8792f78daf2fe6c18d985f1e82ffdce93a8,Tobias Koppers,2025-07-10T06:47:41Z,Turbopack: make invalidation from chunking context more granular (#81457)  ### What?  More granular invalidation to improve incremental builds with Skew Protections (modifies chunking context as it includes `chunk_suffix_path`).,75,95,170
vercel/next.js,04f77423296506747f94eab8b62c8e93c667c6f5,Joseph,2025-07-10T06:26:37Z,docs: PPR requires canary (#81294)  Fixes: https://github.com/vercel/next.js/issues/81292,1,1,2
vercel/next.js,45c48f2944a049770659f47e4abdaef04d36b797,Tobias Koppers,2025-07-10T06:15:40Z,Turbopack: improve fuzz testing to handle more cases (#81204)  ### What?  * Improve fuzz testing to test tasks becoming active and inactive. * Improve the verify_aggregation_graph feature to panic to allow running it during fuzz testing,147,44,191
vercel/next.js,c6e23a6bb3947486e0df44fb661cb9ea2dc243cd,Benjamin Woodruff,2025-07-10T05:22:06Z,"Turbopack: Use a factory factory (yes, really) to make hanging detection construction lazier (#81434)  This is an alternate attempt at solving #81424 without macros.  The extra laziness desired can be accomplished with an outer wrapping `FnOnce`. It's a bit confusing, but I think it causes less problems than a macro does?  Checked compilation and lints with:  ``` cargo clippy --all-targets cargo clippy --all-targets --features turbo-tasks/hanging_detection ```  // TODO: Find somewhere else to insert a closure so that we can have a factory factory factory!",195,125,320
vercel/next.js,2f43b359dfc0f3afb6fbab03867d3f8a2fa4ea66,Benjamin Woodruff,2025-07-10T05:05:52Z,"fix(turbopack-tests): Ignore or clean up empty snapshot test directories, fix non-nextest execution testing (#81479)  This PR fixes two bugs I ran into while trying to add a test case.  ## Empty Snapshot Tests With No Input  Git tracks files, not directories, so it doesn't track or delete empty directories. This can lead to broken behavior in our test cases:  1. Somebody deletes a test case, git no longer has any files in that directory to track. They push this to canary. 2. Somebody else runs `git pull` and git deletes the files, but leaves behind a directory structure. 3. Later, they run the snapshot tests with `UPDATE=1`. The snapshot test script sees the directory and tries running the test. 4. There's no input files, so it just tries to do a compilation with no files, which of course fails, but generates some output of the failure. 5. We accumulate these broken tests with an output directory but no input directory.  ## Tracing Subscriber Init in Execution Tests  - You can only call tracing-subscriber's `init()` once per-process as it sets global state. - We need each tracing-subscriber to be configured with a different output directory. - `cargo test` runs multiple tests in parallel inside the same process.  Therefore, our use of `tracing-subscriber` is unfortunately incompatible with `cargo test`.  In contrast, `cargo nextest` runs every test case in an isolated process.  The use of `tracing-subscriber` here is just as a debugging tool (we don't commit these traces), so only enable it when we're running under `cargo nextest`.  I tested running the execution tests with both `cargo test` and `cargo nextest` and observed the trace file was written out only when using `nextest`.",71,101,172
vercel/next.js,1781abd7d4a7e48e1fbd1b121d79ae26f8935645,Shantanu Goyal,2025-07-10T04:37:39Z,"fix(packages/next-bundle-analyzer): file extension of webpack bundle analyzer report (#81372)  ### Issue  When `analyzerMode` is selected as `json`, the bundle analyzer still emits a `.html` file.  ### Fix  Added a check for `analyzerMode` === `json` to determine file extension.  ---------  Co-authored-by: graphite-app[bot] <96075541+graphite-app[bot]@users.noreply.github.com>",4,2,6
vercel/next.js,b49ed9087df94b7b8f3b4bd6fd80731feb3db9bd,Vercel Release Bot,2025-07-10T04:36:22Z,Update Rspack development test manifest (#81440)  This auto-generated PR updates the development integration test manifest used when testing Rspack.,87,16,103
vercel/next.js,0827a6e02194d163ba8584df2def58667785c7a9,Vercel Release Bot,2025-07-10T04:35:59Z,Update Rspack production test manifest (#81441)  This auto-generated PR updates the production integration test manifest used when testing Rspack.,22,5,27
vercel/next.js,5e65f807f637728f97ad44088717071ffe5084b6,nextjs-bot,2025-07-09T23:24:48Z,v15.4.0-canary.123,34,34,68
vercel/next.js,a8fbbf0245407ebf9b9f75f51e02537124561f47,Jiachi Liu,2025-07-09T22:12:55Z,[devtool] patch base-ui and migrate segment explorer inline styles (#81474),266,242,508
vercel/next.js,c10d258482a7d56560ee0391fc42ef12840b708f,gsmt,2025-07-09T21:27:20Z,Add @sparticuz/chromium-min to default server externals (#81309)  This package needs to be externalized to have it's wasm dependencies traced properly for node runtime so this adds it to the default list.,3,0,3
vercel/next.js,60ee0dd54a8b3f8be59cf1d457c66219f06e9ea0,Tobias Koppers,2025-07-09T21:24:14Z,Turbopack: reduce temp allocation during compute_blocks (#81459)  ### What?  Reduce allocation size a little bit.,10,9,19
vercel/next.js,aa9c6d274e4c3b641d6b222d3061e47641115b3e,nextjs-bot,2025-07-09T20:53:45Z,v15.4.0-canary.122,34,34,68
vercel/next.js,322e2d9044e5707c525846f46828666a5689a13d,Jiachi Liu,2025-07-09T20:44:02Z,[devtool] dynamically import segment explorer when enabled (#81473),14,2,16
vercel/next.js,639c731600746c9be4543c9662b540e7d5ef0fb0,Rachna Chavan,2025-07-09T18:41:14Z,Update image.mdx (#81454)  fix: Input image name and output image name is different and causes confusion.  ---------  Co-authored-by: Joseph <joseph.chamochumbi@vercel.com>,5,5,10
vercel/next.js,4e51eb2140119bf29d953f30aadec578abf72076,Hendrik Liebau,2025-07-09T18:32:43Z,"Support `Uint8Array` bodies when generating cache keys for POST requests (#81465)  When opting into caching a POST request with the `revalidate` option, or when the Server Components HMR Cache implicitly caches a POST request, the body of the request is now correctly handled if it is a `Uint8Array`. Previously, we logged `Failed to generate cache key for ...` and the cache was bypassed.  closes NAR-180",27,29,56
vercel/next.js,8f014afff307d22e1d2b2c844b3ed940e645c6db,Hendrik Liebau,2025-07-09T18:09:38Z,"Consolidate dynamic IO errors test suites into a single fixture (#81451)  Previously, we had separate fixtures for each test case because it's complicated to assert on build errors when multiple pages have errors. This meant that running those tests, and especially updating their snapshots, took forever because each test case needed to be installed and built separately.  We can consolidate the cases into a single fixture (and test suite) by leveraging the internal `NEXT_PRIVATE_APP_PATHS` environment variable to prerender individual pages, along with `--experimental-build-mode generate`. The compilation is done upfront for all tests using `--experimental-build-mode compile`. Dev mode also profits, by sharing a single dev server instance across all tests.  For convenient updating of the snapshots for all modes and bundlers, we're also adding a small script at `test/e2e/app-dir/dynamic-io-errors/update-snapshots.sh`.  closes NAR-183",2076,2273,4349
vercel/next.js,747ef2babe269885621d552fe980f7f6838aea6b,"Sebastian ""Sebbie"" Silbermann",2025-07-09T17:13:20Z,Fail task if one of the parallel ones fails (#81464),25,4,29
vercel/next.js,84873e00874e096e6c4951dcf070e8219ed414e5,nextjs-bot,2025-07-09T16:29:30Z,v15.4.0-canary.121,34,34,68
vercel/next.js,80ad3b8dc4c5722cc2de89d4d3a7895295be80d4,nextjs-bot,2025-07-09T15:58:25Z,Upgrade React from `a7a11657-20250708` to `60b5271a-20250709` (#81463)    Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,2957,1761,4718
vercel/next.js,af6fc0ab691a724007583a9f3fb4c320da96d1a7,Tobias Koppers,2025-07-09T15:20:34Z,"Turbopack: handle all side effects and improve pattern (#81455)  Avoid the `let _ = task().resolve().await?` pattern. Instead use the `task().as_side_effect().await?` pattern.  This is much better, because the compiler will yell at you if you miss out the `as_side_effect()` or the `await?` due to `must_use`. In the old pattern forgetting the `.resolve()` or the `await?` did not trigger any warning but silently ignored errors.  <!-- Thanks for opening a PR! Your contribution is much appreciated. To make sure your PR is handled as smoothly as possible we request that you follow the checklist sections below. Choose the right checklist for the change(s) that you're making:  ## For Contributors  ### Improving Documentation  - Run `pnpm prettier-fix` to fix formatting issues before opening the PR. - Read the Docs Contribution Guide to ensure your contribution follows the docs guidelines: https://nextjs.org/docs/community/contribution-guide  ### Adding or Updating Examples  - The ""examples guidelines"" are followed from our contributing doc https://github.com/vercel/next.js/blob/canary/contributing/examples/adding-examples.md - Make sure the linting passes by running `pnpm build && pnpm lint`. See https://github.com/vercel/next.js/blob/canary/contributing/repository/linting.md  ### Fixing a bug  - Related issues linked using `fixes #number` - Tests added. See: https://github.com/vercel/next.js/blob/canary/contributing/core/testing.md#writing-tests-for-nextjs - Errors have a helpful link attached, see https://github.com/vercel/next.js/blob/canary/contributing.md  ### Adding a feature  - Implements an existing feature request or RFC. Make sure the feature request has been accepted for implementation before opening a PR. (A discussion must be opened, see https://github.com/vercel/next.js/discussions/new?category=ideas) - Related issues/discussions are linked using `fixes #number` - e2e tests added (https://github.com/vercel/next.js/blob/canary/contributing/core/testing.md#writing-tests-for-nextjs) - Documentation added - Telemetry added. In case of a feature if it's used or not. - Errors have a helpful link attached, see https://github.com/vercel/next.js/blob/canary/contributing.md   ## For Maintainers  - Minimal description (aim for explaining to someone not on the team to understand the PR) - When linking to a Slack thread, you might want to share details of the conclusion - Link both the Linear (Fixes NEXT-xxx) and the GitHub issues - Add review comments if necessary to explain to the reviewer the logic behind a change  ### What?  ### Why?  ### How?  Closes NEXT- Fixes #  -->",144,97,241
vercel/next.js,6560ec279aaca9734df0f430800489319e1684b2,Niklas Mischkulnig,2025-07-09T15:06:53Z,"Turbopack: fix unused export removal with mixed reexport and locals (#81422)  We had this reference which caused all locals to be used: ``` node_modules/@react-spring/core/dist/react-spring-core.esm.js [app-client] (ecmascript) <module evaluation> -> node_modules/@react-spring/core/dist/react-spring-core.esm.js [app-client] (ecmascript) <locals> with export_usage=all ```  So for ```js import {config, useSpring} from ""@react-spring/core""; ``` the output was ```js ""[project]/node_modules/.pnpm/@react-spring+core@9.4.5_react@19.2.0-canary-fa3feba6-20250623/node_modules/@react-spring/core/dist/react-spring-core.esm.js [app-client] (ecmascript) <locals>"": ((__turbopack_context__) => { __turbopack_context__.s({     ""BailSignal"": ()=>BailSignal,     ""Controller"": ()=>Controller,     ""FrameValue"": ()=>FrameValue,     ""Interpolation"": ()=>Interpolation,     ""Spring"": ()=>Spring,     ""SpringContext"": ()=>SpringContext,     ""SpringRef"": ()=>SpringRef,     ""SpringValue"": ()=>SpringValue,     ""Trail"": ()=>Trail,     ""Transition"": ()=>Transition,     ""config"": ()=>config,     ""easings"": ()=>easings,     ""inferTo"": ()=>inferTo,     ""interpolate"": ()=>interpolate,     ""to"": ()=>to,     ""update"": ()=>update,     ""useChain"": ()=>useChain,     ""useSpring"": ()=>useSpring,     ""useSpringRef"": ()=>useSpringRef,     ""useSprings"": ()=>useSprings,     ""useTrail"": ()=>useTrail,     ""useTransition"": ()=>useTransition }); ``` instead of only listing the used exports ```js ""[project]/node_modules/.pnpm/@react-spring+core@9.4.5_react@19.2.0-canary-fa3feba6-20250623/node_modules/@react-spring/core/dist/react-spring-core.esm.js [app-client] (ecmascript) <locals>"": ((__turbopack_context__) => { ""use strict"";  __turbopack_context__.s({     ""config"": ()=>config,     ""useSpring"": ()=>useSpring }); ```",170,39,209
vercel/next.js,8b390602489f12d7ad597939fb8851ef357c7b7c,Niklas Mischkulnig,2025-07-09T14:04:42Z,Turbopack: fix duplicate externals modules (#81306)  Don't attatch the resolve request's affecting sources to the external module itself. This list wasn't part of the module ident and would lead to duplicate modules.,94,97,191
vercel/next.js,6c112f67f2162cdfcf19b306e8e591adfdd2a38a,nextjs-bot,2025-07-09T13:53:27Z,v15.4.0-canary.120,34,34,68
vercel/next.js,4d3a02d86f7163cc6a7a7b3a6366c11e12d6c78d,Hendrik Liebau,2025-07-09T13:41:15Z,"Allow server functions to be used as client component props in `'use cache'` (#81431)  When passing server actions or nested `'use cache'` functions inside of cached components as props to client components, we need to make sure that those are registered as server references, even when restoring the parent component from the cache, e.g. during the resume of a partially static shell. Otherwise, React would throw a runtime error while trying to serialize the props.  <details> <summary>Example</summary>  ```tsx import { connection } from 'next/server' import { Suspense } from 'react'  export default function Page() {   return (     <div>       <Suspense fallback={<h1>Loading...</h1>}>         <Dynamic />       </Suspense>       <CachedForm />     </div>   ) }  const Dynamic = async () => {   await connection()   return <h1>Dynamic</h1> }  async function CachedForm() {   'use cache'    return (     <form       action={async () => {         'use server'         console.log('Hello, World!')       }}     >       <button>Submit</button>     </form>   ) } ``` </details>  Previously, for inline server functions, the Next.js compiler placed the `registerServerReference` calls where the server function was originally declared. When the enclosing function was restored from a cache, this call was skipped and the reference was not registered, leading to the serialization error. To fix it, we can hoist the `registerServerReference` call into the module scope, where the reference itself also has been hoisted to. For simplicity, we're doing this now generally, regardless of whether the server function is inline or top-level.  Note: Since `registerServerReference` uses `Object.defineProperties` to mutate the given reference, we don't need to assign the result to anything. We already did this for exported functions of a module with a top-level `'use server'` directive.  closes NAR-167",518,251,769
vercel/next.js,11cbba8bd5967ce605ce351956fca4d50b0ead99,"Sebastian ""Sebbie"" Silbermann",2025-07-09T13:11:24Z,[build-sourcemaps] Default `experimental.enablePrerenderSourceMaps` to `experimental.dynamicIO` (#81449),76,59,135
vercel/next.js,8a80e4afdfa3bd60378878d03e9a3f1a29ad360b,Niklas Mischkulnig,2025-07-09T11:56:49Z,"Turbopack: filter NftJsonAsset entries earlier (#81446)  Improves invalidation (and performance)  1. filter out client asset while discovering client assets, so this filters out the whole subgraph already 2. apply the user-defined excludes while discovering the assets, this is also what the JS implementation does: https://github.com/vercel/next.js/blob/b77eb3e127986b47cab9eced2253f00de12a5a14/packages/next/src/build/collect-build-traces.ts#L336-L343  Closes PACK-5037",75,28,103
vercel/next.js,53a46b391c7a8d75f0e7ce8cad28545f243252b2,Jiachi Liu,2025-07-09T11:33:13Z,Upgrade vercel og to 0.7.2 (#81447),8063,5719,13782
vercel/next.js,b77eb3e127986b47cab9eced2253f00de12a5a14,Tobias Koppers,2025-07-09T06:19:21Z,"Turbopack: fix hanging problem due to stale tasks (#81413)  ### What?  When tasks become dirty they eventually need to be scheduled again when needed. To do that we maintain ""activeness"" of tasks. And we also maintain ""dirtyness"" of subgraphs, to allow for strongly consistency of a subgraph. But all that is a bit more involved since we don't want to touch all tasks of a subgraph (a subgraph could be millions of nodes).  So we do some ""aggregation"" of subgraphs to optimize the affected tasks. Once a task becomes dirty, we propagate that dirtyness up the aggregated tasks: Every aggregated task has a list of inner tasks which subgraph contain dirty tasks (`dirty_containers`). This way we can follow the graph directly down the dirty tasks without walking the whole graph.  This is where activeness comes into play. When a task is active we want to schedule all dirty tasks in the subgraph. This can happen under 2 cases: 1. A task becomes active -> all dirty_containers are scheduled 2. A dirty_container propagates to an already active task -> that task is scheduled  There is this case where a task is newly connected to an active task. This is covered by case 2, because a newly connected tasks will apply its aggregated info to the upper case, which hit case 2 then.  All root tasks are active as long as they are relevant (you can dispose them, or some are once off tasks). So when a task becomes dirty, it propagates the `dirty_container` to the root tasks, which would schedule the subgraph by walking the dirty_containers.  But it would break if another task becomes dirty below the same aggregated task. The aggregated task is already listed as `dirty_container` in the root tasks and it would not be scheduled again. To handle this all aggregated tasks, that are listed as `dirty_container` of an active task, are made temporarily active (`active_until_clean`). This also has the benefit that we don't have to do so many hops to schedule a task.  So this works in most cases, but there is a race condition in this design which this pull request fixes. We said only aggregated tasks are made temporarily active. But there is this edge case where while a task is already dirty, it is converted from a leaf task into an aggregated tasks and a inner task becomes dirty. This leads to the problem that the newly aggregated task is not temporarily active - as it was not an aggregated task when it was scheduled. So the inner task is not scheduled - since the upper task is not (temporarily) active. So the task is never executed and stays stale. But a strongly consistent read further up the graph will wait for this task to become not-dirty - since it is listed as `dirty_container`. This leads to a hanging build.  To fix that we make all tasks temporarily active, even leaf tasks.",12,16,28
vercel/next.js,25781670de462dec915af465da6d623aefbf8397,Vercel Release Bot,2025-07-09T02:23:21Z,Update Rspack development test manifest (#81398)  This auto-generated PR updates the development integration test manifest used when testing Rspack.  Co-authored-by: nextjs-bot <it+nextjs-bot@vercel.com>,16,9,25
vercel/next.js,37ab1aac4983f85d8bd94c6cb1a2f4ef9d6b7678,Ben Gubler,2025-07-09T02:04:49Z,update: add nebrelbug to labeler.json (#81437),1,0,1
vercel/next.js,203adbd5d054609812d1f3666184875dcca13f3a,Benjamin Woodruff,2025-07-09T02:00:29Z,"refactor(turbopack): Rewrite `EsRegex::captures` to return an iterator, use `None` for unmatched capture groups (#81200)  This is a follow-up to #81119.  - Make each returned capture use `Option` and return `None` if the capture doesn't match instead of an empty string. There is a meaningful difference between a capture not matching at all or a zero-width capture. - Return an iterator instead of a `Vec`. Some lifetime issues with both `regex` and `regress` pushed me to make this a manual iterator implementation (versus using `Either`), but the upside is that the type is now named!",92,23,115
vercel/next.js,48aebf9c571b29b60a080c6c6c23868739a86a75,Hendrik Liebau,2025-07-09T01:03:26Z,"Revert ""[test] Skip flaky cdn-cache-busting test"" (#81433)",1,2,3
vercel/next.js,a546b131ed5bf8c1d50f79dea0a93c8c6e5b58a0,Rob Pruzan,2025-07-09T00:49:13Z,fix: referencing unavailable __dirname (#81436)  Patch missing __dirname usage for storybook css injection,3,1,4
vercel/next.js,94f8aecf2622d778b097780eec0992104f709528,Rob Pruzan,2025-07-08T23:40:01Z,"feat: forward browser errors/logs to terminal (#80909)  Closes NEXT-4534  This PR introduces the ability for next.js to forward logs, errors, and unhandled rejections from the browser to the terminal the dev server is running in (behind an experimental flag)  # Explanation  The 2 main components of this pr are the client side error accumulation logic, and the ingest handling on the other side of the hmr socket.  We listen on the existing hmr socket to send batched logs, errors, and uncaught rejections the frame after they were captured. All forwarded data is sent with metadata so we can have reconstruct the log with an equivalent level of information to the browser- since we expect AI agents that can't access the browsers to be consumers of this feature (and it's generally useful).  All foreign data created by the user in the browser is serialized using `safe-stable-serializer`, a popular serializer [used by other logging libraries](https://www.npmjs.com/browse/depended/safe-stable-stringify), like [pino](https://github.com/search?q=repo%3Apinojs%2Fpino+safe-stable&type=code) (safety, determinism, fast). We also have a light shim on top of json serialization to handle displaying custom data representations that either wouldn't survive serialization (undefined) or we want to present to users in a custom format (throwing proxies, promises, ...)  On the dev server server, we (bespoke) deserialize, source map, format, and log. I tried to share as much logic as I could with error dev overlay to avoid feature drift since they are very similar implementations other than the render target   # Explicitly covered cases  - console table   - shows as `[browser]\n<table>\n(<source location>)` - console trace - shows as `[browser] arg1 arg2 ...\n<stack trace>\n([source mapped location of log]`)`   - trace is source mapped - ignored frames are shown, incase people explicitly want the full trace - console dir   - shows as `[browser] arg1 arg2 ([source mapped location of log])` - we need to explicitly capture stdout and rewrite it when we call nodes `console.dir` to prefix and postfix with [browser] and and (`<source mapped location of log>`) without adding newlines (we could do this for console.table but it makes sense to keep the prefix and postfix on new lines)  - console error - `[browser] arg1 arg2 \n codeblock + source mapped stack of console.error ([source mapped location of console.error])` - if there are any `Error` values present we wont show the stack and code block of console.error since it's overwhelming (this is fine since we still tell the user where the `console.error` is with the appended location) - rejected promises that have `Error`'s - behave identical to console.error, but is prepended with `⨯ unhandledRejection` 	- the `Error`'s render with their source mapped stack + ignored frames - no error stack can be automatically appended where the promise rejected - rejected promises that have non `Error` values - prepended with `⨯ unhandledRejection: ${error.name}: ${error.message}` 	- everything is logged in red - no error stack can be automatically appended where the promise rejected - on caught error 	- prepended with `Uncaught ${errorName}: ${errorMessage}` - stack attached to error is source mapped + ignored frames are not shown - everything is logged in red but the code block of where the error orginated from - all other console cases   - shows as `[browser] arg1 arg2 ([source mapped location of log])` - if an error is passed, we show the error name, message, source mapped stack (colored white, ignored frames not shown), and code block if available (syntax highlighted)   - we apply util.format to handle formatted strings - logs captured during RSC rendering   - not piped to server, ignored on client   Closes NEXT-4534",2626,125,2751
vercel/next.js,697fc32efb3c2cc8a76c94d607d63eafa2ad2784,nextjs-bot,2025-07-08T23:25:00Z,v15.4.0-canary.119,34,34,68
vercel/next.js,5ac55fc899fa71b1ad0dd74a0fbbf767926e2740,Maia Teegarden,2025-07-08T22:46:49Z,"Check if target workflow is enabled before triggering front sync (#81432)  This change adds a check to ensure the front sync workflow is enabled before attempting to trigger it. Previously, when the workflow was disabled, the dispatch would fail and cause false alerts about deployment test failures.  Now, if the workflow is disabled, the sync trigger is skipped with clear logging. The on-call person should be aware that the workflow is disabled and can manually rerun the sync once the workflow is re-enabled.  I tested this by commenting out the tests and just running the check if workflow is enabled step and it worked: ![CleanShot 2025-07-08 at 14 57 48](https://github.com/user-attachments/assets/e56e3e2c-61c2-4c56-935a-025d508d3fa2)",29,0,29
vercel/next.js,bbe2786b5e3d7968380f15c80595a8191afb4a85,Hendrik Liebau,2025-07-08T22:21:51Z,Unflake `segment cache (CDN cache busting)` redirect test (#80967),18,0,18
vercel/next.js,8c15302158a9fe219c0d81b373a774d243c9fc7e,Jiachi Liu,2025-07-08T20:31:55Z,"[segment explorer] trigger the actual same level boundary (#81268)  When you click trigger boundary is not triggering the upper layer boundary but the defined boundaries in the current layer.  https://github.com/user-attachments/assets/6c24caa5-36fc-46db-9e0f-f8753391c541",30,14,44
vercel/next.js,2503c19dd068a99c82ec02691b22c323a884614f,Jiachi Liu,2025-07-08T20:13:03Z,"[segment explorer] capture defined boundaries (#81232)  Capture defined boundaries (not-found / error / loading) and used to filter which one is available for boundary triggers  The trie will now hold all the defined boundaries, but what's different from the existing rendered boundaries is:  Here's the difference of new defined boundary trie nodes: ``` {   type: ""boundary:<type>""   pagePath: ""<pagePath>@boundary"" } ``` We add a `boundary:` prefix to determine if it's node representing existence; We add a `@boundary` suffix to the filename cause the <pagePath> part is still need to use for indexing in the trie, but the `@boundary` doesn't matter yet. We'll remove it once we start using the file name in the dropdown panel  Closes NEXT-4330  ### Example  When there's only one not-found.tsx, allow to trigger the not-found boundary and disable the rest.  https://github.com/user-attachments/assets/eb5c49a7-4fd2-496b-b778-fb66581908b3",145,32,177
vercel/next.js,d9a774117cfef44c173c961c5e1699734eb7f62a,"Sebastian ""Sebbie"" Silbermann",2025-07-08T19:38:47Z,[test] Skip flaky cdn-cache-busting test (#81429)  https://vercel.slack.com/archives/C07UCHRBWGK/p1752001887137129,2,1,3
vercel/next.js,b9ed008915297e68966993cb52824507693ed463,nextjs-bot,2025-07-08T19:23:48Z,v15.4.0-canary.118,34,34,68
vercel/next.js,9bbcfa2c14716448a81aa278c39da9fb520de354,nextjs-bot,2025-07-08T19:09:00Z,Upgrade React from `5d87cd22-20250704` to `a7a11657-20250708` (#81428)  Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,10590,8090,18680
vercel/next.js,656271b21033cdb7f835a8ffe48813a298a9d898,Josh Story,2025-07-08T18:37:34Z,"[use-cache] track cache read earlier when encrypting bound args (#81427)  bound args need to be encrypted for use cache functions and currently we track the read slightly later than will be necessary when we sync the latest React. This change moves the tracking to be as early as possible (as soon as the input signal is aborted or when the bound args are finished being serialized, whichever is first).",47,10,57
vercel/next.js,bdb87a1851bbf62778f422002aca45fbb0e9566e,Cong-Cong Pan,2025-07-08T17:57:38Z,"chore: update rspack to 1.4.5 (#81216)  <!-- Thanks for opening a PR! Your contribution is much appreciated. To make sure your PR is handled as smoothly as possible we request that you follow the checklist sections below. Choose the right checklist for the change(s) that you're making:  ## For Contributors  ### Improving Documentation  - Run `pnpm prettier-fix` to fix formatting issues before opening the PR. - Read the Docs Contribution Guide to ensure your contribution follows the docs guidelines: https://nextjs.org/docs/community/contribution-guide  ### Adding or Updating Examples  - The ""examples guidelines"" are followed from our contributing doc https://github.com/vercel/next.js/blob/canary/contributing/examples/adding-examples.md - Make sure the linting passes by running `pnpm build && pnpm lint`. See https://github.com/vercel/next.js/blob/canary/contributing/repository/linting.md  ### Fixing a bug  - Related issues linked using `fixes #number` - Tests added. See: https://github.com/vercel/next.js/blob/canary/contributing/core/testing.md#writing-tests-for-nextjs - Errors have a helpful link attached, see https://github.com/vercel/next.js/blob/canary/contributing.md  ### Adding a feature  - Implements an existing feature request or RFC. Make sure the feature request has been accepted for implementation before opening a PR. (A discussion must be opened, see https://github.com/vercel/next.js/discussions/new?category=ideas) - Related issues/discussions are linked using `fixes #number` - e2e tests added (https://github.com/vercel/next.js/blob/canary/contributing/core/testing.md#writing-tests-for-nextjs) - Documentation added - Telemetry added. In case of a feature if it's used or not. - Errors have a helpful link attached, see https://github.com/vercel/next.js/blob/canary/contributing.md   ## For Maintainers  - Minimal description (aim for explaining to someone not on the team to understand the PR) - When linking to a Slack thread, you might want to share details of the conclusion - Link both the Linear (Fixes NEXT-xxx) and the GitHub issues - Add review comments if necessary to explain to the reviewer the logic behind a change  ### What?  ### Why?  ### How?  Closes NEXT- Fixes #  -->  update Rspack to 1.4.2, in this version we fix bugs when using Rspack persistent cache in next.js.  Now user can try Rspack persistent cache by follow way:  ```js const config = {     webpack: (config) => {         config.experiments.cache = {             type: 'persistent'         };         return config;     }, }; ```",218,167,385
vercel/next.js,b81f9892b3f5216e8c40a413f840f6ce8e00f1f4,rauno,2025-07-08T17:13:11Z,"[dev-tools] Custom keyboard shortcut to toggle visibility (#81064)  This PR implements a `<ShortcutRecorder>` component to assign custom keyboard shortcuts. For now, we can use this to let engineers choose a shortcut to hide (and show) the Dev Tools badge:   https://github.com/user-attachments/assets/2366271d-b9e6-4577-bfe5-e21705c88f8c  `ShortcutRecorder` stores the shortcut in `localStorage` and supports assigning keybinds with up to 3 keys, and automatically reorders the pressed keys in the order in which they would be registered by a browser `keydown` event:    https://github.com/user-attachments/assets/aa7b0119-9a03-4fd3-8a81-bd8cb2500054  ---------  Co-authored-by: graphite-app[bot] <96075541+graphite-app[bot]@users.noreply.github.com>",640,23,663
vercel/next.js,71c87179a8494ba42a11b66579149f6bdf52c457,Benjamin Woodruff,2025-07-08T17:12:18Z,"refactor(turbopack/napi): Add a NextTurbopackContext type, rename VcArc to DetachedVc (#80881)  - Introduce `NextTurbopackContext` for use later in https://github.com/vercel/next.js/pull/81272 . In this PR, it's just a thin single-field wrapper, but we add callbacks to it in the next PR. - Wrap all the places we pass around `NextTurboTasks` in this new `NextTurbopackContext` type. - `VcArc` was a bit vague of a name, the important thing its that the `Vc` is detached from the turbo-tasks graph. `DetachedVc` matches the prefixed naming of `ResolvedVc` and `OperationVc`.",261,192,453
vercel/next.js,bab62242883150c5267fae8a2c42535374c11911,Luke Sandberg,2025-07-08T17:03:41Z,"[turbopack] Install late loaded script and link tags at the end of the `head` instead of the end of the `body` (#81425)  ### What? Append CSS and JS chunks to `document.head` instead of `document.body` in the Turbopack runtime.  ### Why? This change improves webpack compatibility by ensuring that dynamically loaded CSS and JS resources are appended to the document head rather than the body, matching webpack's behavior.   We don't believe this should have a performance or behavior impact, however aligning with webpack should eliminate rare incompatibilities with applications that might be confused by the presence of these script tags in the body.  One delta with webpack does remain, webpack removes the added script tags from the DOM after they load apparently to workaround a memory leak in IE.  We are not bothering with this.  See also: https://github.com/webpack/webpack/blob/a11302288d2a8851ff89405a122c1d04709574ea/lib/runtime/LoadScriptRuntimeModule.js#L167",10,6,16
vercel/next.js,7a09a67d3287220d651e569755d2bbf40bb39aeb,"Sebastian ""Sebbie"" Silbermann",2025-07-08T16:55:49Z,Fix auth preflight check when triggering Front sync (#81166),4,0,4
vercel/next.js,9170aca93ad678abc573a6b71fb775e8ebb4c8d6,Tobias Koppers,2025-07-08T14:36:35Z,"Turbopack: improve var names, add some unit tests (#81412)  ### What?  * improve variables names * add unit tests",206,18,224
vercel/next.js,a9c3206cccc9e018da623d2fe0a89ff016c5feda,Kristian Djaković,2025-07-08T14:07:08Z,"feat: make typed routes output deterministic (#80432)  ### What?  This PR makes changes to the next plugin for typed routes. The issue here is that the output of the plugin, specifically the part where static and dynamic routes are defined changes constantly. This PR makes the output of the plugin deterministic.  ### Why?  We work in a monorepo with multiple Next.js projects. We encountered multiple issues with git and git hooks. If you had a stale `.next` output the routes type would also be stale and caused issues on commit when you want to sync your work with an upbranch causing either to rebuild the app you are not developing or completly removing the `.next` folder. As a solution we choose to commit `.next/types/link.d.ts` (the output file of the mentioned next.js plugin) and that solved the issue.  Now we have a smaller issue regarding the un-deterministic file output which I want to solve with this MR.  ### How?  Before writing the routes in the file, the routes are sorted using native `sort` method on the array instance. The actual sort order is not relevant here, the fact that the output is in the same order everytime is the key.  ---------  Co-authored-by: Steven <steven@ceriously.com>",38,21,59
vercel/next.js,3e598fdbaaec331f8c1e89a2be6a0eefcea8d3b8,Tobias Koppers,2025-07-08T13:52:09Z,Turbopack: remove unused code (#81411)  ### What?  Remove unused code. Also improves performance by avoid unnecessary checks,5,14,19
vercel/next.js,5248e1576632ea82d6f3cbc932ec73d1f6a401d6,Joshua Hannaford,2025-07-08T13:16:40Z,"fix(turbopack) Adjust tree loader to respect parent module overrides (#81139)  ## Fix not-found page inheritance in nested layouts  ### What? This PR fixes an issue where custom not-found pages weren't properly inherited in nested layouts. Previously, when a page within a route group threw a `notFound()` error, it wouldn't correctly use the group's custom not-found page if there was also a custom layout.  ### How? - Added a new `check_and_update_module_references` helper function to manage module inheritance - Implemented proper parent-child relationship for special pages (not-found, forbidden, unauthorized, global-error) - Added test cases for not-found pages with nested layouts and route groups - Ensured custom not-found pages are properly rendered when notFound() is thrown from pages in nested layouts  Fixes #PACK-4496",184,29,213
vercel/next.js,d118f071fc2b4fcf985bab68d8fed6ddf4ac75ac,Rob Pruzan,2025-07-08T12:25:51Z,chore: align css loader in storybook (#81403),45,1,46
vercel/next.js,259f9a62203a2af128d429e34742fbe847c5d7a4,"Sebastian ""Sebbie"" Silbermann",2025-07-08T10:32:36Z,[test] Avoid flaky assertions due to dynamic metadata (#81373),30,16,46
vercel/next.js,6ae87df4ba6d0e0ea016200fb17434344ce4ca42,Jiachi Liu,2025-07-08T10:29:19Z,[build] remove devtool from client chunks in prod (#81376),50,49,99
vercel/next.js,2dbc947cdeebce7fbfc91240d71473395e961616,Tobias Koppers,2025-07-08T07:02:06Z,"Turbopack: fix incorrect graph state bug (#81202)  ### What?  Technically a task should start with `Dirty` flag set and propagate that info through the aggregation graph. But that would be very expensive to do in the initial compilation. So we have the extra check of tasks not having Output set.  But there is this rare case where a task A calls a task B purely for side effects without `await`ing the output. In this case A would become clean, while B is in its initial computation and don't have Dirty set. This would lead to the subgraph being incorrectly considered as clean.  To fix that case, we eagerly mark all children as Dirty when they don't have Output set, once the parent task gets its Output set.  But there was a bug in that implementation where we early exit when Output is set to something equal the previous Output.",229,73,302
vercel/next.js,c8976ee2121b02b26e089e1854e2b1ad43a3436e,Niklas Mischkulnig,2025-07-08T07:00:17Z,"Turbopack: don't emit `blurDataURL: null` (#81387)  Do what Webpack does and don't generate `blurDataUrl: null`, just omit that property.",11,5,16
vercel/next.js,51e4382d973fb8b560eaaeb070229cb55e0cec44,Vercel Release Bot,2025-07-08T00:34:56Z,Update Rspack production test manifest (#81364)  This auto-generated PR updates the production integration test manifest used when testing Rspack.  Co-authored-by: nextjs-bot <it+nextjs-bot@vercel.com>,50,44,94
vercel/next.js,33720a3be2e6f161723e747659888dabf044af06,Nhan Doan,2025-07-08T00:33:19Z,Add Biome example (#81334)  Add a Next.js example configured with Biome toolchain.,169,0,169
vercel/next.js,e4b6c8e2c3fa38551d26326141fe85b618f6df8f,zoomdong,2025-07-08T00:26:02Z,"fix(turbopack): external script should under async module (#81362)  Follow up: https://github.com/vercel/next.js/pull/80768  Sorry i miss something, script external should under async module because it needs to execute loadurl function(which is async)",7,3,10
vercel/next.js,ff5707b95e43cb7f2c99475fa1ab98fcd2821e8c,Benjamin Woodruff,2025-07-07T23:32:41Z,"fix(CI): Update llvm when building native musl targets (#81392)  Tested locally with  ``` podman run --platform=linux/amd64 -t -i ghcr.io/napi-rs/napi-rs/nodejs-rust:stable-2023-09-17-alpine bash ```  We must ensure llvm16 is removed before installing llvm20 and llvm20-dev, as there's a file conflict between llvm16 and llvm20-dev.  Full build-and-deploy run: [https://github.com/vercel/next.js/actions/runs/16128142342](https://github.com/vercel/next.js/actions/runs/16128189670)",4,2,6
vercel/next.js,cacd2e45d51696e5beab22b23d0db485c557e0ca,nextjs-bot,2025-07-07T23:24:39Z,v15.4.0-canary.117,34,34,68
vercel/next.js,e938366489b2cd426b1578ec4d757f6e2ca308f3,Zack Tanner,2025-07-07T21:39:11Z,chore: cleanup unused workflows (#81391)  Cleans up unused workflows & scripts  - bankrupt workflow is superseded by the [stale workflow](https://github.com/vercel/next.js/blob/canary/.github/workflows/issue_stale.yml) - filtering issues by version hasn't been used in 9 months and can be accomplished with a GH search - the AI triaging tool has largely been more noise than signal. the existing alerts that have been surfaced in the triage channel have been sufficient,13,4162,4175
vercel/next.js,7bcd46a9a96f65244cf1f84a09dae1421f9b3f11,Josh Story,2025-07-07T20:57:09Z,"[dynamicIO] Track module loading in dev always (#81388)  In dev we prerender and render concurrently. The former to validate dynamicIO rules. The latter to stream a response as soon as possible. If we only track module loading during prerenders it is possible to kick off loading a chunk during the render and then not observe that chunk load during prerender, leading to an early abort before all modules have had a chance to load.  To solve this we simply always track module loading in dev.",3,0,3
vercel/next.js,f4f0c449968facd4e9a4f3fc5cbfcacd5a3972e7,Niklas Mischkulnig,2025-07-07T20:34:16Z,"Turbopack: make stats.json useable (#81318)  Make the `.next/server/webpack-stats.json` file that was already getting generated with `TURBOPACK_STATS=1` actually usable with https://statoscope.tech/.  Not the most efficient implementation, but definitely works for small apps.  - Chunks have the parent/child connection (though I can't see that in the UI) - Modules have the `reasons` set, so the module graph traversal works now. Note that this all ignores scope hoisting though, so there are some modules missing right now in some views  ![Bildschirmfoto 2025-07-04 um 22 44 42](https://github.com/user-attachments/assets/b51c93fd-fd6d-404c-b8db-26de4500beb2)",251,45,296
vercel/next.js,ea9585ae73323a19236f644f58bd307c9ca26662,Vercel Release Bot,2025-07-07T19:43:02Z,Update Rspack development test manifest (#81365)  This auto-generated PR updates the development integration test manifest used when testing Rspack.,36,14,50
vercel/next.js,5d6be0a4d9aefedc2c1f78c991d888cd5490f3e4,rauno,2025-07-07T18:02:09Z,[dev-tools] Consistent focus states for buttons (#81114)  Trivial PR. Just makes sure we use our `--focus-ring` CSS variable for focus states.  ![CleanShot 2025-07-01 at 13 18 05@2x](https://github.com/user-attachments/assets/c3f7aded-0644-4a46-850d-8d5e4e379084),5,4,9
vercel/next.js,7a05d5d2a1710ac2589f369448d621b1bf7b56c2,Wyatt Johnson,2025-07-07T16:47:57Z,"fix(build): improve static path generation performance and fix parameter collisions (#81254)  ## Summary  • **Performance**: Replace O(n²) parameter deduplication with O(n) Map-based approach • **Architecture**: Rewrite `assignErrorIfEmpty` using [Trie data structure](https://en.wikipedia.org/wiki/Trie) • **Testing**: Add comprehensive test coverage for edge cases including parameter collisions and complex route hierarchies  ## Technical Details  ### Performance Optimization - **Before**: O(n²) nested loops comparing each parameter combination against all previous ones - **After**: O(n) Map-based deduplication using unique string keys for each parameter combination - **Impact**: Significant performance improvement for routes with many parameter combinations  ### Trie-Based Route Analysis Replaces linear route comparison with efficient Trie data structure:  - **Nodes**: Represent unique parameter combinations  - **Edges**: Represent parameter values with collision-safe keys - **Algorithm**: [DFS traversal](https://en.wikipedia.org/wiki/Depth-first_search) determines `throwOnEmptyStaticShell` based on child relationships  **Example**: For routes `/blog/[slug]` and `/blog/first-post`: - Trie identifies `/blog/[slug]` as parent to concrete route `/blog/first-post` - Sets `throwOnEmptyStaticShell = false` for parent, `true` for concrete route",452,89,541
vercel/next.js,be0cc7ade5951a55de7da00b11530a3db14535e0,"Sebastian ""Sebbie"" Silbermann",2025-07-07T15:04:33Z,"[sync-react] Set correct PR author (#81369)  Follow-up to https://github.com/vercel/next.js/pull/81134  We checkout and commit with nextjs-bot but then opened the PR as vercel-release-bot. Now we use nextjs-bot for both.",1,1,2
vercel/next.js,4b850b2f8f2fe21e7f221e14aed14b1617f220bd,Rob Pruzan,2025-07-07T14:09:57Z,"feat: resizable panel (#81233)  Closes NEXT-4599  This pr introduces the ability to resize panels in devtools  ### Details - we dynamically show a drag area on the sides of the panels to make it easier to find the drag target of the panel - remove all media queries for panel sizing and rely on resizing + min/max heights as source of truth - handles vertical, horizontal, diagonal resizing - clamp panel width/height to viewport incase user resizes  ### Example  https://github.com/user-attachments/assets/9053f716-ca79-440b-add4-a841ff84427d",780,156,936
vercel/next.js,76d9ab8e4e2f7ab63217020beb9e6a063e3aeae3,"Sebastian ""Sebbie"" Silbermann",2025-07-07T14:04:53Z,[test] Improve React performance track tests (#81359),104,15,119
vercel/next.js,17c05b67bdea952b1d39b0eb46d87920f40b38df,Hendrik Liebau,2025-07-07T13:53:21Z,"Always consider `captureOwnerStack` optional (#81370)  When running `next build` with a custom `NODE_ENV` (e.g. `test` or `development`), the `captureOwnerStack` method is not defined and may lead to errors if called. This change ensures that we only call `captureOwnerStack` if it is defined, preventing potential runtime errors.",9,3,12
vercel/next.js,1a31db0335e1d853fddf7f5d187ca161773ffe01,Vercel Release Bot,2025-07-07T13:47:28Z,Upgrade React from `73aa744b-20250702` to `5d87cd22-20250704` (#81308)  Co-authored-by: nextjs-bot <it+nextjs-bot@vercel.com>,7838,5452,13290
vercel/next.js,33973b104afd387ede021e2473f0d381eb1c6b10,Carlo,2025-07-07T11:07:31Z,Fix duplicates in `optimizePackageImports` `effect` packages (#81253)  Co-authored-by: Jiachi Liu <inbox@huozhi.im>,4,5,9
vercel/next.js,cb1aed8d8fdb050e82ff1d8b696231df836b6308,Jiachi Liu,2025-07-06T23:46:09Z,"[devtool] inject css as styleTag rather than singletonStyleTag (#81297)  Change the style-loader injection for devtool from `singletonStyleTag` to `styleTag` (which is also default). The original setting was configured in #81236 , @mischnic a case where the style is inserted but not applied.  Using `styleTag` will insert multi styleTag which can force it layout again when the style is added",4,1,5
vercel/next.js,16ed7eed1ff18aa74e59c8534f7296fe66b0c22a,nextjs-bot,2025-07-06T23:24:32Z,v15.4.0-canary.116,34,34,68
vercel/next.js,a47cd4ff20b7cbe5dff698f98829b134c07741cc,Jiachi Liu,2025-07-06T23:12:03Z,"[devtool] handle click outscope child element (#81296)  Improve the DX of close by clicking outside of the of the UI, if it's children it also shouldn't close it. Since devtool is under the shadow dom, we need to attach the listeners onto `ownerDocument` rather than the `document` itself  ### Diff  | After | Before | |:--|:--| | <video src=""https://github.com/user-attachments/assets/617d79f8-f093-4c17-9588-633331a416bc""> | <video src=""https://github.com/user-attachments/assets/94626f7e-6f2f-450a-aa73-f9cb5548820d""> |  <!-- https://github.com/user-attachments/assets/617d79f8-f093-4c17-9588-633331a416bc --> <!-- https://github.com/user-attachments/assets/94626f7e-6f2f-450a-aa73-f9cb5548820d -->",11,4,15
vercel/next.js,2c6b7dcd28edb749b8016dbafe9f9a8cf10b160e,Josh Story,2025-07-06T22:15:23Z,reverts test copy change in dynamicIO tests (#81358)  test copy was accidentally changed in #81258. this reverts it,15,31,46
vercel/next.js,39f5d0f32c0b8f4066e4e7cb23ce25c75d7e6dcd,"Sebastian ""Sebbie"" Silbermann",2025-07-06T09:47:17Z,[test] Dedicate suite for React's Server Request performance track (#81312)  We're testing this here since framework integration via `filterStackTrace` determines what React uses to determine the name of the Performance entry.,110,0,110
vercel/next.js,05ec5674c2d1d6cf3493287a37661f8468bbb1f9,"Sebastian ""Sebbie"" Silbermann",2025-07-06T09:27:33Z,"[sourcemaps] Improve ignore-listing performance (#81311)  This improves performance of finding the relevant section in Index Source Maps by using binary search (O(N) -> O(log N)).  This allows us to improve the performance of the fast path for checking if a source is ignore-listed in Index Source Maps: Instead of checking if every section in Index Source Maps ignores everything, we just find the relevant section (now O(log N) instead of O(N)) and check if that section ignores everything.",76,49,125
vercel/next.js,3a41715c1fc9cd27cd45ac5220e734868e7435bf,"Sebastian ""Sebbie"" Silbermann",2025-07-06T09:10:14Z,[refactor] Move sourcemapping logic to dedicated file (#81310)  Resolves https://github.com/vercel/next.js/pull/81231#discussion_r2185437480,290,288,578
vercel/next.js,09c8af1c4bad0e995b2fc329f2fdc978065609d2,Nhan Doan,2025-07-05T23:33:09Z,Remove duplicate CSS properties (#81333)  ### What? This PR removes duplicate CSS properties in the App Router templates generated by `create-next-app`.  Co-authored-by: JJ Kasper <jj@jjsweb.site>,0,2,2
vercel/next.js,6e316e8a8b41461787c3c907c51ceafd1b6dac92,nextjs-bot,2025-07-05T23:24:36Z,v15.4.0-canary.115,34,34,68
vercel/next.js,de7e13e5eb66c24d6174d85e4590b8c00e0c6b7e,Kid,2025-07-05T23:17:10Z,"Remove incorrect PostCSS config type (#81338)  ### What?  Currently the docs is incorrectly suggesting to type the PostCSS config with types from Tailwind CSS. This pull request removed the wrong types.  If desired one can correctly type the config with the [`postcss-load-config`](https://github.com/postcss/postcss-load-config/blob/main/src/index.d.ts#L52-L60) package:  ```js /** @type {import('postcss-load-config').Config} */ const config = {     plugins: {         '@tailwindcss/postcss': {},     }, }  export default config ```  However if your package manager does not hoist the package, you need to install it separately just for the types, which does not seem to be worth it.  ### Why?  ### How?  Co-authored-by: JJ Kasper <jj@jjsweb.site>",1,2,3
vercel/next.js,6b5c9548f6f08ea25c37bbdf516e846fd2227522,Raj Kumar Rawat,2025-07-05T23:14:14Z,"fix(docs): correct section count from 4 to 3 in intro (#81323)  The docs mention 4 sections but only list 3: Getting Started, Guides, and API Reference.  This updates the ""How to use the docs"" section to correctly reflect that only 3 sections are listed, not 4.  **Before:** The docs are organized into 4 sections:  **After:** The docs are organized into 3 sections:  Let me know if a fourth section was intended to be included instead.   <!-- Thanks for opening a PR! Your contribution is much appreciated. To make sure your PR is handled as smoothly as possible we request that you follow the checklist sections below. Choose the right checklist for the change(s) that you're making:  ## For Contributors  ### Improving Documentation  - Run `pnpm prettier-fix` to fix formatting issues before opening the PR. - Read the Docs Contribution Guide to ensure your contribution follows the docs guidelines: https://nextjs.org/docs/community/contribution-guide  ### Adding or Updating Examples  - The ""examples guidelines"" are followed from our contributing doc https://github.com/vercel/next.js/blob/canary/contributing/examples/adding-examples.md - Make sure the linting passes by running `pnpm build && pnpm lint`. See https://github.com/vercel/next.js/blob/canary/contributing/repository/linting.md  ### Fixing a bug  - Related issues linked using `fixes #number` - Tests added. See: https://github.com/vercel/next.js/blob/canary/contributing/core/testing.md#writing-tests-for-nextjs - Errors have a helpful link attached, see https://github.com/vercel/next.js/blob/canary/contributing.md  ### Adding a feature  - Implements an existing feature request or RFC. Make sure the feature request has been accepted for implementation before opening a PR. (A discussion must be opened, see https://github.com/vercel/next.js/discussions/new?category=ideas) - Related issues/discussions are linked using `fixes #number` - e2e tests added (https://github.com/vercel/next.js/blob/canary/contributing/core/testing.md#writing-tests-for-nextjs) - Documentation added - Telemetry added. In case of a feature if it's used or not. - Errors have a helpful link attached, see https://github.com/vercel/next.js/blob/canary/contributing.md   ## For Maintainers  - Minimal description (aim for explaining to someone not on the team to understand the PR) - When linking to a Slack thread, you might want to share details of the conclusion - Link both the Linear (Fixes NEXT-xxx) and the GitHub issues - Add review comments if necessary to explain to the reviewer the logic behind a change  ### What?  ### Why?  ### How?  Closes NEXT- Fixes #  -->  Co-authored-by: JJ Kasper <jj@jjsweb.site>",1,1,2
vercel/next.js,6ba9c21d29d8f3786fcb0ad4c419819ea0ffbd4d,Sajad Torkamani,2025-07-05T22:54:02Z,"fix typo (#81336)  <!-- Thanks for opening a PR! Your contribution is much appreciated. To make sure your PR is handled as smoothly as possible we request that you follow the checklist sections below. Choose the right checklist for the change(s) that you're making:  ## For Contributors  ### Improving Documentation  - Run `pnpm prettier-fix` to fix formatting issues before opening the PR. - Read the Docs Contribution Guide to ensure your contribution follows the docs guidelines: https://nextjs.org/docs/community/contribution-guide  ### Adding or Updating Examples  - The ""examples guidelines"" are followed from our contributing doc https://github.com/vercel/next.js/blob/canary/contributing/examples/adding-examples.md - Make sure the linting passes by running `pnpm build && pnpm lint`. See https://github.com/vercel/next.js/blob/canary/contributing/repository/linting.md  ### Fixing a bug  - Related issues linked using `fixes #number` - Tests added. See: https://github.com/vercel/next.js/blob/canary/contributing/core/testing.md#writing-tests-for-nextjs - Errors have a helpful link attached, see https://github.com/vercel/next.js/blob/canary/contributing.md  ### Adding a feature  - Implements an existing feature request or RFC. Make sure the feature request has been accepted for implementation before opening a PR. (A discussion must be opened, see https://github.com/vercel/next.js/discussions/new?category=ideas) - Related issues/discussions are linked using `fixes #number` - e2e tests added (https://github.com/vercel/next.js/blob/canary/contributing/core/testing.md#writing-tests-for-nextjs) - Documentation added - Telemetry added. In case of a feature if it's used or not. - Errors have a helpful link attached, see https://github.com/vercel/next.js/blob/canary/contributing.md   ## For Maintainers  - Minimal description (aim for explaining to someone not on the team to understand the PR) - When linking to a Slack thread, you might want to share details of the conclusion - Link both the Linear (Fixes NEXT-xxx) and the GitHub issues - Add review comments if necessary to explain to the reviewer the logic behind a change  ### What?  ### Why?  ### How?  Closes NEXT- Fixes #  -->",1,1,2
vercel/next.js,65df0c37c1edd746e9d83bd6d48fd152c8f5b192,nextjs-bot,2025-07-04T23:24:30Z,v15.4.0-canary.114,34,34,68
vercel/next.js,f261039200d92b2796dc04f45814457994458c64,Josh Story,2025-07-04T21:53:09Z,"[dynamicIO] Don't abort prospective render on sync access during SSR (#81258)  When filling caches we never want to let sync IO interrupt the cache filling render. We already handled this for the react-server render where most caches live. But modules are a form of caches and they similarly rely on the prospective render to ""fill"" their entry. Prior to this change during SSR prerenders a sync IO could cause the prospective render to abort early. This led to the case where the final render would also potentially abort early for something like a serial sync IO in module scope.",107,20,127
vercel/next.js,2d19dc626babcaf28665c270e1b58d717846bbb9,Hendrik Liebau,2025-07-04T20:09:23Z,"[dynamicIO] Use owner stacks for dynamic validation errors (#81277)  With recent improvements in React, and after switching to the React builds for Node.js in #81048, we can now generate better dynamic validation error stacks in dev mode by utilizing owner stacks instead of component stacks.  For async I/O, we're using the owner stack exclusively. For sync I/O we're appending the owner stack to the call stack. In a future iteration we might instead log the original error as-is where it occurs, and let `patchErrorInspectNodeJS` handle the owner stack appending as a general solution.  Additionally, we're now guiding users in the build-time error messages to using `next dev` for further debugging of dynamic validation errors – or, alternatively, using `next build --debug-prerender`.  closes NAR-149",339,157,496
vercel/next.js,8d789925573d8ac092703a65f6ce372b0c573eda,"Sebastian ""Sebbie"" Silbermann",2025-07-04T19:23:50Z,"[sourcemaps] Ignore-list sources whose sourcemaps ignore-list everything (#81231)  webpack-only at the moment since I have no easy stack to test this on in Turbopack until we sourcemap the Turbopack runtime.  This applies the same heuristic Chrome uses. For sources whose associated sourcemap ignores everyone of its sources, we ignore-list that source even if we didn't find a mapping. This is similar to other common heuristic where the closest mapping is used when no exact mapping exists.",213,147,360
vercel/next.js,05d179cb16eee28437ee72fdd4886f2278c8d925,Hendrik Liebau,2025-07-04T18:41:21Z,"Allow `pnpm build` to be run when offline (#81273)  When running `pnpm build` in the Next.js repo without an internet connection, this currently fails while trying to download the AMP `validator_wasm.js` file. We can fix this, and thus enable offline support for `pnpm build`, by moving the download of this file from the `precompile` task to the `ncc_amphtml_validator` task. The file is then committed to `src/compiled/amphtml-validator`, and later copied into `dist/compiled/amphtml-validator` as part of the build command, without the need to trigger a request.",2689,17,2706
vercel/next.js,383e000d380e60567a946ef820bd2af1e7459f9e,"Sebastian ""Sebbie"" Silbermann",2025-07-04T16:47:54Z,"[sourcemaps] ignore-list Webpack runtime (#81229)  The way this works in dev is by assigning a dummy sourcemap to the Webpack runtime that ignore-lists everything. The mappings will will be incorrect in development. Production sourcemaps will be correct since those emit real sourcemaps for the webpack runtime where we just start ignore-listing modules that look like Webpack runtime.  Chrome already has this heuristic where it ignore-lists a source if its sourcemap ignore-lists every source. We'll use the same heuristic in the terminal and Redbox in a follow-up. We'll implement this heuristic for the Redbox and terminal in a follow-up.   https://github.com/user-attachments/assets/b250e61d-c6f9-49b6-85c4-8bdd54275a01  Closes https://linear.app/vercel/issue/NEXT-4409/",66,4,70
vercel/next.js,a0a882e063b95302c6f14f7428005f8cb60175ad,"Sebastian ""Sebbie"" Silbermann",2025-07-04T16:21:10Z,Current behavior for module evaluation sourcemapping (#73737)  Looks pretty bad. Most of it is due to added functions by bundlers that aren't sourcemapped.,178,72,250
vercel/next.js,dc48e551fa956d6c992f59aaf76b033c656d6ec7,Niklas Mischkulnig,2025-07-04T16:14:48Z,Turbopack: fix instrumentation-edge layer name (#81304)  A typo  Regression from https://github.com/vercel/next.js/pull/80388,1,1,2
vercel/next.js,e574dcb2e11ec80daa68015540f7b53cf5694675,Niklas Mischkulnig,2025-07-04T14:53:06Z," Turbopack: sourceMappingURL for Node.js runtime chunk (#81300)  The file was generated, but the comment referencing it was missing. Copy the logic over from the browser runtime chunk",21,5,26
vercel/next.js,999035c772d879ef3b633695858fc4bddd579b33,Donny/강동윤,2025-07-04T13:43:06Z,"perf(turbopack): Make `File` => json faster (#81279)  ### What?  Considering the way `serde_json` works, I expect this to be faster. Also, a JSON string is very likely to be a single `bytes::Bytes` already, so it would not regress the memory usage.  ### Why?  <img width=""843"" alt=""image"" src=""https://github.com/user-attachments/assets/2c5ebb0b-335c-4ca1-aebd-64a6da9e0671"" />",2,1,3
vercel/next.js,c12c9c1f78ad384270902f0890dc4cd341408105,"Sebastian ""Sebbie"" Silbermann",2025-07-04T08:24:02Z,[test] Keep Playwright stackframes out of tests (#81240),16,62,78
vercel/next.js,0dada4a10425bfdc83bb6e7301ff756fe8ce8f48,Donny/강동윤,2025-07-04T06:51:44Z,build: Update `swc_core` to `v30.1.1` (#81276)  ### What?  ChangeLog: http://github.com/swc-project/swc/compare/swc_core%40v30.0.1...swc_core%40v30.1.1  ### Why?  To apply   - https://github.com/swc-project/swc/pull/10772  - https://github.com/swc-project/swc/pull/10773  ### How?  Closes PACK-4995,26,35,61
vercel/next.js,ed892f70c388cc71ec588d2cfd71a446eff79f89,Jude Gao,2025-07-04T01:44:24Z,Add regression test for conflicting search and route params (#81249)  Follow-up to https://github.com/vercel/next.js/pull/81209,91,0,91
vercel/next.js,f5c9910881a1547074ef035dfc41d40667975c71,Luke Sandberg,2025-07-04T00:24:06Z,[turbopack] Remove unused no_move_vec code (#81141)  A `pub use` statement was obscuring that half the code is dead.,0,108,108
vercel/next.js,250f008b8a94d889391ff9a838409c46d9352b0d,Vercel Release Bot,2025-07-04T00:19:57Z,Update Rspack development test manifest (#81219)  This auto-generated PR updates the development integration test manifest used when testing Rspack.,37,39,76
vercel/next.js,9f99743ef8aee158bc1c086cfedbec35ce771b22,nextjs-bot,2025-07-03T23:25:49Z,v15.4.0-canary.113,34,34,68
vercel/next.js,5c59feb79757d7416f977d66f53f7cc0d456d458,JJ Kasper,2025-07-03T23:21:32Z,Ensure resolvedPathname normalizes trailing slash (#81265)  Fixes case with trailing slash from refactoring done in https://github.com/vercel/next.js/pull/81144,6,1,7
vercel/next.js,45a5405de21fe158e93aec6441e3ed70399323dd,Zack Tanner,2025-07-03T21:58:27Z,"bugfix: propagate staleTime to seeded prefetch entry (#81263)  In #71280, we hooked up the server-side `staleTime` header to the client-side prefetch cache. This means that if the server responds with a staleTime value, the client router will use that rather than the previous heuristic when determining if a prefetch entry can be reused.  However, there was missing functionality to set a proper staleTime value for the initially seeded prefetch entry (aka the first page visit). In the case of customizing staleTimes, this meant that navigations back to the original page would defer back to the old stale heuristic, which would differ from subsequent navigations that were properly seeded with a staleTime.  Separately, I believe that it's problematic that if the `staleTime` header is present, that we honor that and only set a fresh/stale cache status, because the newer heuristic doesn't consider the `reusable` cache status. This should probably be flagged to the clientSegmentCache flag. However, to minimize the changes here, I've only addressed this particular case.",65,6,71
vercel/next.js,c450cd83d1ad34e7906582573584956f401feb2a,Luke Sandberg,2025-07-03T21:09:48Z,"[turbopack] Remove a vec clone from `primary_chunkable_referenced_modules`  (#81206)  Remove a vec clone when resolving module primary references.  Since it is stored in a turbotask we can just pass around a ReadRef to the Vec.  By avoiding the copy we make the `ModulesWithRefData` type a little smaller and should speed up the loop, the cost is some additional indirection when iterating, however all callers only iterate once so this ends up as a win in all cases.",3,5,8
vercel/next.js,b4698a74ae05ca856c88b56b49ce214cb2e3679d,JJ Kasper,2025-07-03T20:26:24Z,Update matching query and route param handling (#81209)  Validated this is un-necessary and handling an edge case we don't need to be worried about and it's better to leave the query param for this case instead  Deploy tests checked https://github.com/vercel/vercel/actions/runs/16058085256/job/45317414336?pr=13522 and https://github.com/vercel/next.js/actions/runs/16059083218/job/45320691422,37,29,66
vercel/next.js,1c677a233b50d71d9f428dfcd5f4b343b3dcb2cd,Niklas Mischkulnig,2025-07-03T20:16:16Z,"Turbopack: prevent ParseResult recomputation (#81244)  There was a mistake here: `process_parse_result` consumes the `ParseResult` via `ReadRef::try_unwrap`, but then inside of that, `EsmExports ::code_gen` does another read of the same cell with `parse_result.await?`. That required a recomputation because the cell was destroyed shortly before. Don't do that anymore.  Now, this is the only remaining recomputation, but that is somewhat expected (multiple facade modules have the same empty `ParseResult`):  ![Bildschirmfoto 2025-07-03 um 16 18 15](https://github.com/user-attachments/assets/468e1ef6-3e5a-4508-be48-da037bd44263)",57,46,103
vercel/next.js,d888428df0ebd0d2ee3c5914373864dc6b298736,Jiachi Liu,2025-07-03T20:01:07Z,[devtool] css imports and share css variables (#81236),315,118,433
vercel/next.js,fb9334d0db8e49888c530fdb6c4e61aa2aa3a7dd,JJ Kasper,2025-07-03T19:41:50Z,Ensure default run name is correct for deploy tests (#81255)  Looks like when the retry workflow is triggered from the release workflow it doesn't have the default input like it should so this adds the fallback inline for the run-name.,1,1,2
vercel/next.js,1296528038a0c1aa011c4b7bb406f3f090c0c6e8,Niklas Mischkulnig,2025-07-03T18:47:53Z,Turbopack: delete module_context.remove_unused_exports (#81239)  #81238 moved this into the chunking context.,23,84,107
vercel/next.js,5557bdda5173e75c1337452cc71a720aa0dee46b,Andrew Clark,2025-07-03T18:03:33Z,"[Segment Cache] Support third-party redirects in output: ""export"" mode (#81247)  In output: ""export"" mode, we can't use headers to request a particular segment. Instead, we encode the extra request information into the URL. This is not part of the ""public"" interface of the app; it's an internal Next.js implementation detail that the app developer should not need to concern themselves with.  For example, to request a segment:  - Path passed to <Link>:   /path/to/page - Path passed to fetch:    /path/to/page/__next-segments/_tree  *(This is not the exact protocol, just an illustration.)*  Before we do that, though, we need to account for redirects. Even in output: ""export"" mode, a proxy might redirect the page to a different location, but we shouldn't assume or expect that they also redirect all the segment files, too.  To check whether the page is redirected, we perform a range request of the first N bytes of the HTML document, just enough to verify the document comes from the same build. The canonical URL is determined from the response.  Then we can use the canonical URL to request the route tree.  Note: We could embed the route tree into the HTML document, to avoid a second request. We're not doing that currently because it would make the HTML document larger and affect normal page loads.",264,75,339
vercel/next.js,f5376f422362f9c312a8e84ad258e866d12d2ee2,Niklas Mischkulnig,2025-07-03T17:50:07Z,"Turbopack: codegen modules without module graph (#81238)  - We didn't actually need the module graph in the chunk item, so this now ensures that we only codegen modules once, regardless on how many pages they are (in dev, nothing changes about builds). - For that, move the export usage information onto the chunking context, just like the module id functionality.",530,461,991
vercel/next.js,b60f614ed9da0799b49b91179660937dd6708718,nextjs-bot,2025-07-03T17:48:46Z,v15.4.0-canary.112,34,34,68
vercel/next.js,b8d5f262429f6543e975fd11255297883dace1d6,Niklas Mischkulnig,2025-07-03T17:12:11Z,Turbopack: move write_version feature to env var (#81250)  This is useful for debugging infinite file write loop situations. Put it behind the env var `TURBO_ENGINE_WRITE_VERSION=1` to be able to debug this if other people want to debug this without recompiling Next.js,7,5,12
vercel/next.js,7c048e337883c172b7a5ff8685426c7d838da6d7,nextjs-bot,2025-07-03T17:05:43Z,v15.4.0-canary.111,34,34,68
vercel/next.js,f5f559220a09880ed8d8d55e73c4bd65dcc89af1,Tim Neutkens,2025-07-03T17:02:13Z,Fix NEXT_CPU_PROF during development (#81248)  ## What?  `next dev` spawns a forked process that wouldn't be instrumented because `cpu-profile.ts` only runs in `cli/next-dev.ts` which is the process that boots the forked process. This adds the initialization to the forked process too.,2,0,2
vercel/next.js,e2422f4c94685e040d868033a6d666ccc183d6fd,Luke Sandberg,2025-07-03T15:43:01Z,[turbopack] Add FileSystemPath.has_extension and optimize module graph operations (#81205)  ## Optimize file extension checks and module graph traversal  ### What? This PR introduces several optimizations:  1. Added a new `has_extension()` method to `FileSystemPath` for more efficient extension checking 2. Improved module graph traversal with a dedicated `has_entry_module()` method 3. Reordered code in `AppProject` to avoid unnecessary clones 4. Simplified CSS resource handling in client reference manifest generation  ### Why? These changes improve performance by: - Replacing string comparisons with more efficient suffix matching for file extensions - Providing a direct way to check if a module is an entry point without iterating all entries - Avoiding unnecessary clones operations when possible,101,98,199
vercel/next.js,8ecf21e59f219d4f91ba19eafd3f32bdc11a841d,zoomdong,2025-07-03T15:24:20Z,"perf(next-napi): optimize output assets collection using flat_map (#81222)  <!-- Thanks for opening a PR! Your contribution is much appreciated. To make sure your PR is handled as smoothly as possible we request that you follow the checklist sections below. Choose the right checklist for the change(s) that you're making:  ## For Contributors  ### Improving Documentation  - Run `pnpm prettier-fix` to fix formatting issues before opening the PR. - Read the Docs Contribution Guide to ensure your contribution follows the docs guidelines: https://nextjs.org/docs/community/contribution-guide  ### Adding or Updating Examples  - The ""examples guidelines"" are followed from our contributing doc https://github.com/vercel/next.js/blob/canary/contributing/examples/adding-examples.md - Make sure the linting passes by running `pnpm build && pnpm lint`. See https://github.com/vercel/next.js/blob/canary/contributing/repository/linting.md  ### Fixing a bug  - Related issues linked using `fixes #number` - Tests added. See: https://github.com/vercel/next.js/blob/canary/contributing/core/testing.md#writing-tests-for-nextjs - Errors have a helpful link attached, see https://github.com/vercel/next.js/blob/canary/contributing.md  ### Adding a feature  - Implements an existing feature request or RFC. Make sure the feature request has been accepted for implementation before opening a PR. (A discussion must be opened, see https://github.com/vercel/next.js/discussions/new?category=ideas) - Related issues/discussions are linked using `fixes #number` - e2e tests added (https://github.com/vercel/next.js/blob/canary/contributing/core/testing.md#writing-tests-for-nextjs) - Documentation added - Telemetry added. In case of a feature if it's used or not. - Errors have a helpful link attached, see https://github.com/vercel/next.js/blob/canary/contributing.md   ## For Maintainers  - Minimal description (aim for explaining to someone not on the team to understand the PR) - When linking to a Slack thread, you might want to share details of the conclusion - Link both the Linear (Fixes NEXT-xxx) and the GitHub issues - Add review comments if necessary to explain to the reviewer the logic behind a change  ### What?  ### Why?  ### How?  Closes NEXT- Fixes #  -->  Replace manual loop with `extend()` calls with a single `flat_map().collect()` operation to reduce function call overhead and improve memory allocation efficiency when collecting output assets from multiple endpoints.",4,4,8
vercel/next.js,7ed2d23ae59f557e99c0e512a986e1c4fe2fb5e9,"Sebastian ""Sebbie"" Silbermann",2025-07-03T13:23:27Z,[devtools] Omit line/col numbers for anonymous sources (#81223),206,192,398
vercel/next.js,c28261568f50c47595b06dce631ac89c07338d07,mm,2025-07-03T10:45:47Z,"Update caching.mdx (#81185)  Updating caching guide to be more specific on fetch API. Solves https://github.com/vercel/next.js/issues/81183  <!-- Thanks for opening a PR! Your contribution is much appreciated. To make sure your PR is handled as smoothly as possible we request that you follow the checklist sections below. Choose the right checklist for the change(s) that you're making:  ## For Contributors  ### Improving Documentation  - Run `pnpm prettier-fix` to fix formatting issues before opening the PR. - Read the Docs Contribution Guide to ensure your contribution follows the docs guidelines: https://nextjs.org/docs/community/contribution-guide  ### Adding or Updating Examples  - The ""examples guidelines"" are followed from our contributing doc https://github.com/vercel/next.js/blob/canary/contributing/examples/adding-examples.md - Make sure the linting passes by running `pnpm build && pnpm lint`. See https://github.com/vercel/next.js/blob/canary/contributing/repository/linting.md  ### Fixing a bug  - Related issues linked using `fixes #number` - Tests added. See: https://github.com/vercel/next.js/blob/canary/contributing/core/testing.md#writing-tests-for-nextjs - Errors have a helpful link attached, see https://github.com/vercel/next.js/blob/canary/contributing.md  ### Adding a feature  - Implements an existing feature request or RFC. Make sure the feature request has been accepted for implementation before opening a PR. (A discussion must be opened, see https://github.com/vercel/next.js/discussions/new?category=ideas) - Related issues/discussions are linked using `fixes #number` - e2e tests added (https://github.com/vercel/next.js/blob/canary/contributing/core/testing.md#writing-tests-for-nextjs) - Documentation added - Telemetry added. In case of a feature if it's used or not. - Errors have a helpful link attached, see https://github.com/vercel/next.js/blob/canary/contributing.md   ## For Maintainers  - Minimal description (aim for explaining to someone not on the team to understand the PR) - When linking to a Slack thread, you might want to share details of the conclusion - Link both the Linear (Fixes NEXT-xxx) and the GitHub issues - Add review comments if necessary to explain to the reviewer the logic behind a change  ### What?  ### Why?  ### How?  Closes NEXT- Fixes #  -->  ---------  Co-authored-by: Joseph <sephxd1234@gmail.com> Co-authored-by: Joseph <joseph.chamochumbi@vercel.com>",19,19,38
vercel/next.js,81f0c7645b360d4056976ada0dc2e81de49e08e8,Jiachi Liu,2025-07-03T10:15:31Z,"[devtool] styling fixes (#81228)  ### Styling fixes  * The overlay needs to have the highiest index, it's regressed from the change in #80974 while tweaking around new panel UI * Noticed the route info needs to be set as nowrap when pathname is super long  | After | Before | |:-- |:-- | | ![image](https://github.com/user-attachments/assets/0b4b2583-9b71-4a42-9255-ccd555afb3af) |  ![image](https://github.com/user-attachments/assets/16f5c3ae-2f68-4f53-aaef-983a1e4c88f6)  | | ![image](https://github.com/user-attachments/assets/8f6f234a-a29b-4c4d-abf9-f75b0cb0b294) | ![image](https://github.com/user-attachments/assets/2aef4bb4-320e-43c3-984e-45d1b28bf0fc) |",3,1,4
vercel/next.js,4551373c972d0a9c49874258f66ffff73d7109c3,Ethan Niser,2025-07-03T09:38:48Z,"Docs: include effect in docs for default optimized libraries (#81203)  This PR updates the docs for `optimizePackageImports` default optimized packages to include `effect` and the `@effect/*` packages  These were added by 9f647f311fc051ca65a3fd810533ed1d5254020b   <!-- Thanks for opening a PR! Your contribution is much appreciated. To make sure your PR is handled as smoothly as possible we request that you follow the checklist sections below. Choose the right checklist for the change(s) that you're making:  ## For Contributors  ### Improving Documentation  - Run `pnpm prettier-fix` to fix formatting issues before opening the PR. - Read the Docs Contribution Guide to ensure your contribution follows the docs guidelines: https://nextjs.org/docs/community/contribution-guide  ### Adding or Updating Examples  - The ""examples guidelines"" are followed from our contributing doc https://github.com/vercel/next.js/blob/canary/contributing/examples/adding-examples.md - Make sure the linting passes by running `pnpm build && pnpm lint`. See https://github.com/vercel/next.js/blob/canary/contributing/repository/linting.md  ### Fixing a bug  - Related issues linked using `fixes #number` - Tests added. See: https://github.com/vercel/next.js/blob/canary/contributing/core/testing.md#writing-tests-for-nextjs - Errors have a helpful link attached, see https://github.com/vercel/next.js/blob/canary/contributing.md  ### Adding a feature  - Implements an existing feature request or RFC. Make sure the feature request has been accepted for implementation before opening a PR. (A discussion must be opened, see https://github.com/vercel/next.js/discussions/new?category=ideas) - Related issues/discussions are linked using `fixes #number` - e2e tests added (https://github.com/vercel/next.js/blob/canary/contributing/core/testing.md#writing-tests-for-nextjs) - Documentation added - Telemetry added. In case of a feature if it's used or not. - Errors have a helpful link attached, see https://github.com/vercel/next.js/blob/canary/contributing.md   ## For Maintainers  - Minimal description (aim for explaining to someone not on the team to understand the PR) - When linking to a Slack thread, you might want to share details of the conclusion - Link both the Linear (Fixes NEXT-xxx) and the GitHub issues - Add review comments if necessary to explain to the reviewer the logic behind a change  ### What?  ### Why?  ### How?  Closes NEXT- Fixes #  -->  Co-authored-by: Joseph <joseph.chamochumbi@vercel.com>",2,0,2
vercel/next.js,2212ea72dd1dd87df95d9b5090d42157daea24cd,Niklas Mischkulnig,2025-07-03T09:04:28Z,Turbopack: exclude resolve-rewrites if possible (#80939)  Implement this https://github.com/vercel/next.js/blob/6c4ca1cb12a36d23ddd86fd13e0c87c72d628317/packages/next/src/build/create-compiler-aliases.ts#L174-L181 in Turbopack as well.  This would not be necessary if we consumed Next.js internal files in ESM and they were marked as `sideEffects: free`...,7,16,23
vercel/next.js,82115d6e5e3bb746846af35dfe61169d00cb8f70,Joseph,2025-07-03T08:44:21Z,"Docs/after function mdx fix (#81174)  The current formatting caused the mdx parser to do `details > p > summary` - which caused a hydration error for invalid HTML, but also just rendered `> Details`  <img width=""501"" alt=""Screenshot 2025-07-02 at 10 38 51"" src=""https://github.com/user-attachments/assets/61819edc-75bb-4824-a000-71a4dc880905"" />  After:  <img width=""481"" alt=""Screenshot 2025-07-02 at 10 47 23"" src=""https://github.com/user-attachments/assets/d42c2087-ce78-4944-a580-e4630cfa864d"" />",2,1,3
vercel/next.js,0bad0e5d87aa2d40afdc6c8e8bde2fde0122daee,Niklas Mischkulnig,2025-07-03T08:03:34Z,"chore(turbopack): Remove unused dependencies reported by cargo-shear (#81221)  <!-- Thanks for opening a PR! Your contribution is much appreciated. To make sure your PR is handled as smoothly as possible we request that you follow the checklist sections below. Choose the right checklist for the change(s) that you're making:  ## For Contributors  ### Improving Documentation  - Run `pnpm prettier-fix` to fix formatting issues before opening the PR. - Read the Docs Contribution Guide to ensure your contribution follows the docs guidelines: https://nextjs.org/docs/community/contribution-guide  ### Adding or Updating Examples  - The ""examples guidelines"" are followed from our contributing doc https://github.com/vercel/next.js/blob/canary/contributing/examples/adding-examples.md - Make sure the linting passes by running `pnpm build && pnpm lint`. See https://github.com/vercel/next.js/blob/canary/contributing/repository/linting.md  ### Fixing a bug  - Related issues linked using `fixes #number` - Tests added. See: https://github.com/vercel/next.js/blob/canary/contributing/core/testing.md#writing-tests-for-nextjs - Errors have a helpful link attached, see https://github.com/vercel/next.js/blob/canary/contributing.md  ### Adding a feature  - Implements an existing feature request or RFC. Make sure the feature request has been accepted for implementation before opening a PR. (A discussion must be opened, see https://github.com/vercel/next.js/discussions/new?category=ideas) - Related issues/discussions are linked using `fixes #number` - e2e tests added (https://github.com/vercel/next.js/blob/canary/contributing/core/testing.md#writing-tests-for-nextjs) - Documentation added - Telemetry added. In case of a feature if it's used or not. - Errors have a helpful link attached, see https://github.com/vercel/next.js/blob/canary/contributing.md   ## For Maintainers  - Minimal description (aim for explaining to someone not on the team to understand the PR) - When linking to a Slack thread, you might want to share details of the conclusion - Link both the Linear (Fixes NEXT-xxx) and the GitHub issues - Add review comments if necessary to explain to the reviewer the logic behind a change  ### What?  ### Why?  ### How?  Closes NEXT- Fixes #  -->",4,9,13
vercel/next.js,36764b9916f317d5d5bd1c430e44802906abe82a,Niklas Mischkulnig,2025-07-03T07:54:42Z,"Turbopack: fix source map panic (#81212)  Fix a panic, related to scope hoisting. ``` An error occurred while generating the chunk item X Caused by: - Cannot decode dummy BytePos ```  ``` thread 'tokio-runtime-worker' panicked at turbopack/crates/turbopack-ecmascript/src/lib.rs:2431:13: Cannot decode dummy BytePos stack backtrace:    0: __rustc::rust_begin_unwind              at /rustc/59aa1e873028948faaf8b97e5e02d4db340ad7b1/library/std/src/panicking.rs:697:5    1: core::panicking::panic_fmt              at /rustc/59aa1e873028948faaf8b97e5e02d4db340ad7b1/library/core/src/panicking.rs:75:14    2: <turbopack_ecmascript::CodeGenResultComments>::decode_bytepos              at next.js/turbopack/crates/turbopack-ecmascript/src/lib.rs:2431:13    3: <turbopack_ecmascript::CodeGenResultCommentsConsumable as swc_common::comments::Comments>::has_leading              at next.js/turbopack/crates/turbopack-ecmascript/src/lib.rs:2499:21    4: <swc_ecma_codegen::Emitter<swc_ecma_codegen::text_writer::basic_impl::JsWriter<&mut alloc::vec::Vec<u8>>, turbopack_ecmascript::CodeGenResultSourceMap>>::has_leading_comment              at .cargo/registry/src/index.crates.io-1949cf8c6b5b557f/swc_ecma_codegen-15.0.1/src/lib.rs:839:24    5: <swc_ecma_codegen::Emitter<swc_ecma_codegen::text_writer::basic_impl::JsWriter<&mut alloc::vec::Vec<u8>>, turbopack_ecmascript::CodeGenResultSourceMap>>::has_leading_comment              at .cargo/registry/src/index.crates.io-1949cf8c6b5b557f/swc_ecma_codegen-15.0.1/src/lib.rs:830:29 ```",25,7,32
vercel/next.js,97958668025bedbc51e188cc01143e9be80f764f,Niklas Mischkulnig,2025-07-03T07:37:57Z,"Fix future Rust warnings (#81217)  I tried to upgrade to nightly-2025-07-02, but rust-analyzer is just completely broken:  ![Bildschirmfoto 2025-07-03 um 08.52.48.png](https://graphite-user-uploaded-assets-prod.s3.amazonaws.com/sjZSbv6AFeuDg7Gb9rma/56c6fece-893c-41fb-98e6-fa225b325225.png)  So I reverted that again but here are all fixes to the new compiler warnings: ``` warning: lifetime flowing from input to output with different syntax can be confusing   --> turbopack/crates/turbo-tasks/src/read_ref.rs:89:27    | 89 |     fn value_debug_format(&self, depth: usize) -> ValueDebugFormatString {    |                           ^^^^^                   ---------------------- the lifetime gets resolved as `'_`    |                           |    |                           this lifetime flows to the output    |    = note: `#[warn(mismatched_lifetime_syntaxes)]` on by default help: one option is to remove the lifetime for references and use the anonymous lifetime for paths    | 89 |     fn value_debug_format(&self, depth: usize) -> ValueDebugFormatString<'_> {    |                                                                         ++++  ```",38,34,72
vercel/next.js,fbc988d042e7a421d1e2aaf993eb6671d8614cf0,Joseph,2025-07-03T07:07:29Z,docs: Getting started pages and search params (#80616)  Closes: https://linear.app/vercel/issue/DOC-4789/getting-started-layout-and-pages-search-params  ---------  Co-authored-by: Delba de Oliveira <32464864+delbaoliveira@users.noreply.github.com>,105,2,107
vercel/next.js,289f5d55f3514b362e416a168341812a00b1c23b,Niklas Mischkulnig,2025-07-03T06:44:15Z,"Sync NFT test suite from upstream (#81189)  Prompted by https://github.com/vercel/next.js/pull/81186   zeromq fails with: ``` 2025-07-02T18:18:18.6796394Z         FAIL [   2.187s] turbopack::node-file-trace node_file_trace_noop_backing_storage::case_109_zeromq Error: Failed to load zeromq.js addon.node: Error: ENOENT: no such file or directory, open '/private/var/folders/s5/952zt8mn6ms05__7r749hkjm0000gn/T/tests_output/persistent_cache_node-file-trace/integration/zeromq.js/tests/node-file-trace/node_modules/.pnpm/zeromq@6.4.2/node_modules/zeromq/build/manifest.json' ``` probably because of `__importDefault` here ```js var __importDefault = (this && this.__importDefault) || function (mod) {     return (mod && mod.__esModule) ? mod : { ""default"": mod }; }; const fs_1 = __importDefault(require(""fs"")); const path_1 = __importDefault(require(""path"")); const manifest = JSON.parse(fs_1.default.readFileSync(path_1.default.resolve(buildDir, ""manifest.json""), ""utf-8"")); ``` Created PACK-4987 to track that",3350,1077,4427
vercel/next.js,ee1026494618291b62a23be57546dc41e17aff3e,Niklas Mischkulnig,2025-07-03T06:36:36Z,"Turbopack: add `EcmascriptExports::Unknown` (#81214)  Closes PACK-4881  Previously, you'd get both a `Parsing ecmascript source code failed` error and a `export Abc was not found in module` error if anything imported from the module with the parse error (because it had `EcmascriptExports::None` in that case).",48,2,50
vercel/next.js,e358e301dc00e4d18e00da4bb80e53c9087af423,Niklas Mischkulnig,2025-07-03T05:19:33Z,"Format Turbopack NFT tests (#81199)  <!-- Thanks for opening a PR! Your contribution is much appreciated. To make sure your PR is handled as smoothly as possible we request that you follow the checklist sections below. Choose the right checklist for the change(s) that you're making:  ## For Contributors  ### Improving Documentation  - Run `pnpm prettier-fix` to fix formatting issues before opening the PR. - Read the Docs Contribution Guide to ensure your contribution follows the docs guidelines: https://nextjs.org/docs/community/contribution-guide  ### Adding or Updating Examples  - The ""examples guidelines"" are followed from our contributing doc https://github.com/vercel/next.js/blob/canary/contributing/examples/adding-examples.md - Make sure the linting passes by running `pnpm build && pnpm lint`. See https://github.com/vercel/next.js/blob/canary/contributing/repository/linting.md  ### Fixing a bug  - Related issues linked using `fixes #number` - Tests added. See: https://github.com/vercel/next.js/blob/canary/contributing/core/testing.md#writing-tests-for-nextjs - Errors have a helpful link attached, see https://github.com/vercel/next.js/blob/canary/contributing.md  ### Adding a feature  - Implements an existing feature request or RFC. Make sure the feature request has been accepted for implementation before opening a PR. (A discussion must be opened, see https://github.com/vercel/next.js/discussions/new?category=ideas) - Related issues/discussions are linked using `fixes #number` - e2e tests added (https://github.com/vercel/next.js/blob/canary/contributing/core/testing.md#writing-tests-for-nextjs) - Documentation added - Telemetry added. In case of a feature if it's used or not. - Errors have a helpful link attached, see https://github.com/vercel/next.js/blob/canary/contributing.md   ## For Maintainers  - Minimal description (aim for explaining to someone not on the team to understand the PR) - When linking to a Slack thread, you might want to share details of the conclusion - Link both the Linear (Fixes NEXT-xxx) and the GitHub issues - Add review comments if necessary to explain to the reviewer the logic behind a change  ### What?  ### Why?  ### How?  Closes NEXT- Fixes #  -->",790,736,1526
vercel/next.js,c66739e60fbd3d119e18ae00354e2dfcbb2a50bd,JJ Kasper,2025-07-03T03:07:42Z,Fix if condition in retry workflow (#81211)  Fixes: https://github.com/vercel/next.js/actions/runs/16040442318,1,1,2
vercel/next.js,2db64b485eb684212109a8e464382522c36db70a,JJ Kasper,2025-07-03T02:57:07Z,Skip alert as well for non-canary e2e deploy (#81210)  Follow-up to https://github.com/vercel/next.js/pull/81207,1,0,1
vercel/next.js,ca8a0662356ec3064b4c577e8ce7af5656366014,JJ Kasper,2025-07-03T02:46:25Z,Only retry deploy tests for canary (#81207)  This avoids retrying/alerting if triggering the deploy tests with a custom next tarball. The `run_name` is available as `display_title` [per docs here](https://docs.github.com/en/webhooks/webhook-events-and-payloads#workflow_run:~:text=The%20event%2Dspecific%20title%20associated%20with%20the%20run%20or%20the%20run%2Dname%20if%20set%2C%20or%20the%20value%20of%20run%2Dname%20if%20it%20is%20set%20in%20the%20workflow)  x-ref: [slack thread](https://vercel.slack.com/archives/C04KC8A53T7/p1751485507582049),3,0,3
vercel/next.js,4cf90059c3ca91e8b2a4f718c98972b48aa08c2e,JJ Kasper,2025-07-03T02:21:09Z,Reuse resolvedPathname from prepare (#81194)  This applies the fixed `resolvedPathname` from https://github.com/vercel/next.js/pull/81144 to the other route handlers that were trying to build this value as well so we use single source of truth.  Validated against our deploy tests https://github.com/vercel/vercel/actions/runs/16038359282/job/45254959257?pr=13520 and https://github.com/vercel/next.js/actions/runs/16038663582/job/45255920639,7,53,60
vercel/next.js,ac393c2658ea12a579a5c89d903696d104e3a6fc,nextjs-bot,2025-07-02T23:24:48Z,v15.4.0-canary.110,34,34,68
vercel/next.js,084825c2a548634cf660e98d8631d841f6b995a7,Jiachi Liu,2025-07-02T23:10:08Z,"[segment explorer] fix route path in top navbar (#81195)  * Remove the `app` prefix in top bar of route info as we only need to know the pathname. It's also removed in the new design * `state.page` was only passed for panel ui but missing in segment explorer of dock indicator",5,4,9
vercel/next.js,799b1be6652438dfd6ec71b25d51ac784f492aca,Joshua Hannaford,2025-07-02T20:39:14Z,"cleanup(turbopack) Show users an error message when Webpack loaders have a glob in only the extension (#81084)  This PR adds validation for webpack loader rules in Next.js configuration to prevent a common issue where users define wildcard extensions without corresponding wildcard patterns in the `as` option. This situation causes all modules to be transformed into the same name, resulting in duplicate module errors.  The changes: - Add a new `InvalidLoaderRuleError` issue type that provides clear error messages when this misconfiguration is detected - Check if an extension contains a wildcard (`*`) but the `rename_as` option does not - Display helpful error messages with links to documentation when this issue is found - Update the `webpack_rules` function to accept the project path for error reporting  This validation helps users avoid confusing duplicate module errors by providing clear guidance on how to properly configure webpack loaders in Next.js.   ![image.png](https://graphite-user-uploaded-assets-prod.s3.amazonaws.com/IhNrutw2qOTgYcgE6MlR/6bae20b6-34b0-4643-9a5c-f580ba32c550.png)",88,6,94
vercel/next.js,6111192f4ad08c79856497942d48028a604dc0e5,zoomdong,2025-07-02T20:31:19Z,"feat(turbopack): turbo-esregex support captures method (#81119)  EsRegex support captures method, in utoo situation, we need Esregexp to support captures the match string from user's regex config item.",46,0,46
vercel/next.js,21cae09ddfc898adf434e5844f0e966c1aada4f0,Niklas Mischkulnig,2025-07-02T19:04:57Z,"Turbopack: lazily create syntax contexts for scope hoisting (#81193)  Previously, if 10k modules are merged together, it would create 10k syntax context for each of the 10k modules. That involves a TLS and a `Mutex`. Most of these are never used, so instead create the contexts lazily with some interior mutability. Now this step doesn't show up in the trace at all anymore (in one case, cutting build time from 10s to 5s)  https://vercel.slack.com/archives/C06PPGZ0FD3/p1751475796580989?thread_ts=1751302539.808369&cid=C06PPGZ0FD3",94,72,166
vercel/next.js,6ad8a1ecc3ecc3ca92a3e54a58b8a3ab6ebdd3b0,Niklas Mischkulnig,2025-07-02T18:33:32Z,Bump lightningcss to not include browserslist-rs twice (#81184),10,30,40
vercel/next.js,52b185d81339820651fec76a67f5d4f73b8ca4ab,Vercel Release Bot,2025-07-02T18:16:23Z,Upgrade React from `7216c0f0-20250630` to `73aa744b-20250702` (#81192)   Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,2694,2662,5356
vercel/next.js,aef6ddc069323e17418c167f670b9a9350d5162b,Benjamin Woodruff,2025-07-02T17:49:37Z,"Turbopack: Rewrite IntervalMap using a BTreeMap (#81095)  Changes: - Rewrote using a `BTreeMap`. This makes `update` `O(log n)`. It was previously `O(n)` which could give accidentally-quadratic time complexity when inserting `n` intervals. We don't think we have enough SST files for this to have been an issue, but how this data structure is used could change over time, and it was a bit risky. - There was some implicit `Option<T>` behavior in `IntervalMap` making it act like a sparse array. This made the type signature and behavior of some of its methods confusing. Removed that from `IntervalMap` and made the few callsites that actually need it explicitly use `Option<T>`. - Added a small `NaiveIntervalMap` implementation along with a narrowly bounded `TinyInt` type, and prove the correctness of `replace`, `update`, and `iter` by exhaustively comparing against it. - Added logic to merge adjacent intervals. This isn't really needed given how the map is currently used, but it's a possible optimization for some use-cases, and it helped align the behavior with `NaiveIntervalMap`. - Use `RangeInclusive<T>` or `impl RangeBounds<T>` instead of just `(u64, u64)` so that the inclusive/exclusive behaviors are always as explicit as possible.  The implementation is not entirely optimal, but in part that's because it avoids using the nightly `btree_cursors` feature. However, the big-O time complexity should still be optimal.  Some additional minor changes to `turbopack/crates/turbo-persistence/src/compaction/selector.rs`:  - Avoid implicitly-overflowing `as u64` casts, prefer `from` and `try_from`. - Make `spread` return a `u128`, since that's slightly more correct than a `saturating_add`, the callsites were casting it to a `u128` anyways. - Add some more comments that are hopefully correct.",613,229,842
vercel/next.js,58bc2f112c0df424c2c9fe3f5c01bd9c7fe888a2,JJ Kasper,2025-07-02T17:18:13Z,Migrate usage of web-server in edge-ssr (#80915)  This continues the work for the `handlers` interface for the edge runtime and re-uses the existing `route-module` interface we have instead of initializing and using `web-server`/`base-server`.  Validated against our deploy tests https://github.com/vercel/vercel/actions/runs/15987684940/job/45095833866?pr=13505 https://github.com/vercel/next.js/actions/runs/15987664161/job/45095390463,654,303,957
vercel/next.js,1e9f598ba6b234442b0ff788598fa21096e7d4c9,Jiachi Liu,2025-07-02T16:48:03Z,[segment explorer] refactor boundary trigger with ui primitives (#81147),91,153,244
vercel/next.js,543edced207fd65ffda70d6fe3af77fdd8b8093e,Luke Sandberg,2025-07-02T16:42:14Z,"[turbopack] Move global names onto the NativeFunction object (#81143)  ### What?  Instead of a global `&'static NativeFunction`->`&'static str` map, just put the names onto the `NativeFunction` struct and delete the global map.  ### Why?  Using a RwLock means every read requires a `fetch_add` to update the reader count, so if lookups are performed on multiple threads we can expect contention on the RwLock reader count.  Using a OnceLock instead just means we need to perform a consistent read which shouldn't trigger cross processor cache traffic.  I don't know that this is a problem, and if it is it would only show up during PC serialization.",24,24,48
vercel/next.js,af0dd9eef47676f0539f963ed9e28006bf5a9a78,Jiachi Liu,2025-07-02T15:58:26Z,"[segment explorer] custom tooltip (#80974)  ## Feature  Add a custom tooltip for DevTool, it can position based on `direction`, `arrowSize` and `offset`.  ### Segment Explorer Case https://github.com/user-attachments/assets/dcdce824-8731-4546-a3d4-ba847fb3b86a  ### Storybook https://github.com/user-attachments/assets/70cd7cba-4fd4-4401-b69d-a0c38e54772d",554,15,569
vercel/next.js,07a6e5b588d1f8aea55b78c9abab076206fae3f5,xusd320,2025-07-02T14:49:17Z,"perf(turbopack): let some Clone be conditional in insert_alias_option (#81175)  ## What As the title described.",7,9,16
vercel/next.js,5dac44820cdb54bcffeb31fdf534bed75db93649,Tobias Koppers,2025-07-02T13:18:41Z,"Turbopack: fix and finish immutable tasks (#80996)  ### What?  Fixes the problems with the implementation of immutable tasks, adds tests and debug asserts to ensure it's working.  * There was some confusion between children and dependencies. Children are not involved with immutablility, only dependencies are. * Opt out of immutablility for reading collectibles and for getting an invalidator. * Removed `#[turbo_tasks::function(invalidator)]` and the logic of discovering statically immutable with macro code. It won't work as local tasks are invisible and can cause dependencies   Follow-up changes: * Technically immutability could be per cell instead of per task. A task produces immutable cells until it does something that depends on mutable cells or other opt-outs. It could be `RawVc::ImmutableCell` and the immutable flag would be only in `InProgressState` and not on a task.",312,218,530
vercel/next.js,cd3f86815f3ffefff8bb2143a7339655fd93621a,Niklas Mischkulnig,2025-07-02T12:47:33Z,Disable Turbopack manifest (#81170)  - Don't create update PRs anymore for the manifests - Don't read the manifest when running tests,3,11,14
vercel/next.js,1eb5a426e23e96e4be3303da4a58effff552ae55,Niklas Mischkulnig,2025-07-02T12:07:40Z,Turbopack: rename simple tree shaking (#81181),6,6,12
vercel/next.js,fa3e45ea158effc2e98800d349dfbddcbf21792d,Donny/강동윤,2025-07-02T12:02:12Z,build(turbopack): Update `swc_core` to `v30.0.1` (#81179)  ### What?  ChangeLog: https://github.com/swc-project/swc/compare/swc_core%40v29.4.2...swc_core%40v30.0.1  ### Why?  Apply https://github.com/swc-project/swc/pull/10754 to fix preset-env,142,132,274
vercel/next.js,5efef452262235a19baee2e35c9acdb0c1cbd7e7,Marek Lisy,2025-07-02T07:56:02Z,"Update caching.mdx (#81129)  ### What?  Fix misleading information in the docs about mixing cached and uncached `fetch` calls during dynamic rendering.  ### Why?  I followed the guide (using Next.js 15.3.2) and tried it out with this code: ```ts   const joke = await fetch(""https://api.chucknorris.io/jokes/random"", {     cache: ""no-cache"",   });   const jokeData = await joke.json();    console.log(""Fetched joke:"", jokeData.value);    const joke2 = await fetch(     ""https://api.chucknorris.io/jokes/random?category=dev""   );   const jokeData2 = await joke2.json();   console.log(""Fetched joke2:"", jokeData2.value); ```  After building and starting the production server, when I refresh the page, both `jokeData.value` and `jokeData2.value` are different, uncached. If I want the other `fetch` to be cached, I need to explicitly enable caching, e.g.  ```ts   const joke = await fetch(""https://api.chucknorris.io/jokes/random"", {     cache: ""no-cache"",   });   const jokeData = await joke.json();    console.log(""Fetched joke:"", jokeData.value);    const joke2 = await fetch(     ""https://api.chucknorris.io/jokes/random?category=dev"",     {       cache: ""force-cache"",     }   );   const jokeData2 = await joke2.json();   console.log(""Fetched joke2:"", jokeData2.value); ```  This way the first fetch is not cached while the second one is.  ### How?  The previous version claimed: > Other `fetch` requests that do not opt out of caching will still be cached in the Data Cache.  But below in the guide, we can see this: > The default caching behavior of fetch (e.g., when the cache option is not specified) is equal to setting the cache option to no-store:  So the first citation is misleading - the fetch requests are not cached by default (with dynamic rendering - static rendering would cache the single call it into the output), so we actually need to explicitly enable caching to have them cached.  Co-authored-by: Joseph <joseph.chamochumbi@vercel.com>",1,1,2
vercel/next.js,d41950dc96761d4b5f85e50462cd84ec3b35f498,nextjs-bot,2025-07-02T07:32:43Z,v15.4.0-canary.109,34,34,68
vercel/next.js,f546aa9516715d33c9eb67a6f75c014270def2a7,Vercel Release Bot,2025-07-02T05:54:43Z,Upgrade React from `65c4decb-20250630` to `7216c0f0-20250630` (#81133),418,404,822
vercel/next.js,16e1e1455ece2a198e7b83793a1455f87aab9293,"Sebastian ""Sebbie"" Silbermann",2025-07-02T05:53:34Z,"[node-webstreams] Use React builds for Node.js (#81048)  Closes https://linear.app/vercel/issue/NEXT-4560/  React now exposes Web stream APIs in their Node.js builds so we can use the Node.js builds.  That enable us to use some of the Node.js goodies like `async_hooks` which is required for the React's experimental Server Requests track.  ## Test plan  `next-server` runtimes did not increase bundle size. We even saved some in the `app-page` entries since we no longer have to bundle Edge and Node.js versions of React Server. We can rely solely on the Node.js variant of React Server.  A build of `test/e2e/app-dir/hello-world` shows no significant bundle size changes",512,708,1220
vercel/next.js,343c83807fd53a2052fce6f7ddccf8461edee8b8,"Sebastian ""Sebbie"" Silbermann",2025-07-02T05:28:36Z,"[node-webstreams] Exhaustive React aliases in App Router (#81040)  The previous logic relied heavily on default-fallthroughs which makes it hard to follow what alias we end up using in which bundle.  The new logic has more duplication which is intended so that you think about each entrypoint. With the new factoring, some bad combinations are more obvious (e.g. `react-dom/server` in product code not using the vendored version or `react-server-dom-webpack/server` not throwing in a Client environment). Compare changing aliases to .node in https://github.com/vercel/next.js/pull/81048/ (based on this refactor) vs changing it without the refactor: https://github.com/vercel/next.js/pull/80941  Fixing the bad combinations is not part of this work. We probably need to finish `react-markup` first before we get more strict with `react-dom/server` usage in Server code.",450,176,626
vercel/next.js,3e022577f2cacfc5c5bb0553327b3e116a58f68d,JJ Kasper,2025-07-02T03:53:54Z,Fix resolvedPathname for middleware rewrite (#81144)  This updates the handling of `resolvedPathname` to handle the case we don't know the `rewroteURL` for example when it's a middleware rewrite and we can't derive it since it's fully dynamic. Since we always know the `srcPage` we can always recreate the final URL using the params which this does as it's more reliable than relying on the parsed URL as a backup.  Validated against our deploy tests https://github.com/vercel/next.js/actions/runs/16014327609/job/45178072108 and https://github.com/vercel/vercel/actions/runs/16014347060/job/45178081995?pr=13509  x-ref: [slack thread](https://vercel.slack.com/archives/C093RLQ7RGC),206,12,218
vercel/next.js,3cb2f2737a48883f8c6de9f8d7013c5cd5a6554e,Maia Teegarden,2025-07-02T03:48:16Z,"Remove unneccesary step that's making workflow fail (#81164)  This step was causing the front-sync job to fail. I'm not totally sure how it was working before, some other workflow must have logged logged in at some point. This is just a debug step anyway, so I think we can delete it. **I confirmed that the next step worked just fine.** We could also add a step that runs `gh login` if we think it would actually be useful.",0,4,4
vercel/next.js,e52d8c71f180a0791dec1b57f1129ee4571b14c4,Josh Story,2025-07-02T02:59:22Z,[dynamicIO] recognize prerender interrupted errors as well known (#81160)  all Next.js errors should pass through the RSC boundary with an in tact digest,4,0,4
vercel/next.js,0a67d1c701e1881a567b2ac226e7fb4938441e66,Hendrik Liebau,2025-07-02T02:54:49Z,[dynamicIO] Don't abort on sync request data access (#81162),1212,4897,6109
vercel/next.js,6951729f435f130c11d436ed9b8dabea253a0ee2,Benjamin Woodruff,2025-07-02T00:24:35Z,"refactor(turbopack): Implement `BackingStorage` for `Either`, replace `NextTurboTasks` with a type alias (#80823)  The `NextTurboTasks` enum existed to allow us to enable or disable persistent caching at runtime.  This PR implements `BackingStorage` for `Either`, so that the complexity of this branching is moved into `turbo-tasks-backend`.  This eliminates the need for the next.js and eventually other consumers (`turbopack-cli`, Utoo) to handle this branching if they want to support multiple backing storage layers.  The tradeoff is that moving these branches further down in the callstack might lead to more (easily predicted) branches in the code. We can see if codspeed notices anything. **Update:** Codspeed is performance-neutral.",180,162,342
vercel/next.js,02c09965a7678cb1ef170e160abf819d9df11e0a,nextjs-bot,2025-07-01T23:24:48Z,v15.4.0-canary.108,34,34,68
vercel/next.js,546cdee5672dce4fde8057dd59232acadad41142,Benjamin Woodruff,2025-07-01T22:34:27Z,"refactor(turbo-tasks-backend): Remove `ExecuteContextImpl::lower_read_transaction` (#80822)  Following the removal of the other `transaction` and `lower_read_transaction` callsites in #80816...  If `ExecuteContextImpl::transaction` is inlined into `ExecuteContextImpl::restore_task_data` (the only remaining callsite), we no longer need `lower_read_transaction` and its crimes against Rust lifetimes.  Sanity checked with:  ``` cargo check --features turbo-tasks-backend/lmdb ```",11,68,79
vercel/next.js,b6a2a2edd469e59ba8707ab462878069234e4eb8,Luke Sandberg,2025-07-01T22:28:23Z,[turbopack] Move static type ID variables into getters (#81150)  Simplify some of the static macro variables by moving them into their only callsites.  Delete dead `ident` factories  Just a tiny cleanup motivated by reading through the `registry` codegen and realizing that many of the `ident`s aren't needed.,36,76,112
vercel/next.js,1a075b192032291cbfecfb89a2195a9793175f1f,Jiachi Liu,2025-07-01T22:08:30Z,[devtool] enable segment explorer when new panel present by default (#81152)  Ensure the segment explorer is enabled when enabling the new panel UI is enabled,6,2,8
vercel/next.js,c1000be093f561e9c014691028e4d0293f9147b2,Luke Sandberg,2025-07-01T21:43:39Z,"[turbopack] Remove an unnecessary clone (#81153)  It's dead, Jim!!",0,1,1
vercel/next.js,08bd8fb0f4a6617bba24d3b0aa8f8d9ee3c878f4,Niklas Mischkulnig,2025-07-01T21:40:23Z,"Turbopack: simplify `ReducedGraphs` and `find_server_entries` (#81118)  - Renamed `ReducedGraphs` to `GlobalInformation`, these graphs never ended up getting reduced - Simplify and rename `VisitClientReference`, as its only remaining use is finding server entries (layout segments), and not client references anymore.",93,251,344
vercel/next.js,354900cdbf92bffb149678c9fe1a39baf241a345,Benjamin Woodruff,2025-07-01T20:57:59Z,chore(turbo-tasks-backend): Remove unused support for nested database operations (#80816)  Supporting nested operations adds a lot of complexity. I have a feeling it's partially responsible for some of the lifetime stuff here. It doesn't look like it's actually needed?  Sanity checked with:  ``` cargo check --features turbo-tasks-backend/lmdb ```,2,87,89
vercel/next.js,4a1b510fc100e0f18eeeb9f2358818528a8696bb,Hendrik Liebau,2025-07-01T20:57:40Z,"Add more test cases to the `dynamicIO` sync IO access test suite (#81045)  With this PR, we're adding test fixtures for `headers()`, `draftMode()`, and (fallback) `params`, by more or less copy&pasting the fixture for `cookies()`.  We're also adding assertions for environment prefixes of `console.log()` calls that happen after the sync IO access.",1085,55,1140
vercel/next.js,b8eb7314be7e1117a9f255adbb5f1a18bbf06489,Vercel Release Bot,2025-07-01T20:54:38Z,Update Turbopack development test manifest (#81104)  This auto-generated PR updates the development integration test manifest used when testing Turbopack.,34,43,77
vercel/next.js,6533c297160449d6f2d9967e79d9713aa2a873ea,Vercel Release Bot,2025-07-01T20:50:47Z,Update Turbopack production test manifest (#81105)  This auto-generated PR updates the production integration test manifest used when testing Turbopack.,44,42,86
vercel/next.js,cd49d8b67129b7a01f469386e303be92d321f05f,Vercel Release Bot,2025-07-01T20:48:05Z,Update Rspack production test manifest (#81102)  This auto-generated PR updates the production integration test manifest used when testing Rspack.,52,51,103
vercel/next.js,9929022e67cf1d03daca1fa639eab33dc8dff6a0,Vercel Release Bot,2025-07-01T20:37:58Z,Update Rspack development test manifest (#81103)  This auto-generated PR updates the development integration test manifest used when testing Rspack.,43,53,96
vercel/next.js,c6343db71ee1afd3cb29c805443fcf4152d9eccb,Jiachi Liu,2025-07-01T20:19:15Z,"[segment explorer] reset error and not-found boundary (#81115)  ### Description  Add a `key` prop to the segment state boundary and change the key when we call reset, this way it will force the children re-render with the new state where the boundaries will get reset and the simulated error will be gone since we're rendering the page component now.  Reseting the error boundary only won't help, it will still get the error from `getDerivedStateFromError` class method and apply to the state. This approach will reset the state group of layout-router, and ensure we keep rendering the page segment (or anything by default).  ### Video  https://github.com/user-attachments/assets/f6fc21da-abc1-41fc-857f-136a203f6039   Closes NEXT-4583",28,2,30
vercel/next.js,9e19656ecfe6df31981ad970b1ed4f965090d720,Donny/강동윤,2025-07-01T20:02:33Z,fix(next-swc): Apply SWC minifier bugfixes (#81098)  ### What?  Update `swc_core` to `v29.4.2`   ### Why?  To apply https://github.com/swc-project/swc/pull/10740 and https://github.com/swc-project/swc/pull/10741,7,7,14
vercel/next.js,1beea16b933a7acd3a180050a663d8ff1c41537f,xusd320,2025-07-01T19:07:41Z,chore:  fix typos in rust files (#81113)  Co-authored-by: Niklas Mischkulnig <4586894+mischnic@users.noreply.github.com>,432,375,807
vercel/next.js,dd374da668829a04ed310c1536069ca88cad3ca9,adrian acosta,2025-07-01T18:56:31Z,"Docs: moved table for Unsupported Metadata to the correct location (#80979)  The table used for Unsupported Metadata was misplaced, so I moved it.  Next.js Docs page: https://nextjs.org/docs/app/api-reference/functions/generate-metadata#unsupported-metadata  The section for 'Unsupported Metadata':  ![Screenshot_26-6-2025_183814_nextjs org](https://github.com/user-attachments/assets/a265678c-8330-47cd-bf02-93cc23a9c713)  The misplaced table (located a few sections down):  ![Screenshot_26-6-2025_183914_nextjs org](https://github.com/user-attachments/assets/86ea5c75-4bce-4f50-a2e1-aa8af6a01529)  ---------  Co-authored-by: Joseph <joseph.chamochumbi@vercel.com>",4,4,8
vercel/next.js,573e31d0c15fc664050c1e9e326270584f8a76b8,Maia Teegarden,2025-07-01T18:36:48Z,"Run front-sync after deployment tests finish  (#81023)  The front-sync job has been running directly have new versions are published, but deployment tests only run after a release as well. This PR runs the front-sync job after the deployment tests. There is a new input on the workflow the front-sync triggers to immediately close the PR that gets opened in that repo that will get set to true if the tests fail. It is still beneficial to open a PR so we can more easily bisect problematic releases.  See thread for discussion: https://vercel.slack.com/archives/C08V7CU57E1/p1751053430834889  <!-- Thanks for opening a PR! Your contribution is much appreciated. To make sure your PR is handled as smoothly as possible we request that you follow the checklist sections below. Choose the right checklist for the change(s) that you're making:  ## For Contributors  ### Improving Documentation  - Run `pnpm prettier-fix` to fix formatting issues before opening the PR. - Read the Docs Contribution Guide to ensure your contribution follows the docs guidelines: https://nextjs.org/docs/community/contribution-guide  ### Adding or Updating Examples  - The ""examples guidelines"" are followed from our contributing doc https://github.com/vercel/next.js/blob/canary/contributing/examples/adding-examples.md - Make sure the linting passes by running `pnpm build && pnpm lint`. See https://github.com/vercel/next.js/blob/canary/contributing/repository/linting.md  ### Fixing a bug  - Related issues linked using `fixes #number` - Tests added. See: https://github.com/vercel/next.js/blob/canary/contributing/core/testing.md#writing-tests-for-nextjs - Errors have a helpful link attached, see https://github.com/vercel/next.js/blob/canary/contributing.md  ### Adding a feature  - Implements an existing feature request or RFC. Make sure the feature request has been accepted for implementation before opening a PR. (A discussion must be opened, see https://github.com/vercel/next.js/discussions/new?category=ideas) - Related issues/discussions are linked using `fixes #number` - e2e tests added (https://github.com/vercel/next.js/blob/canary/contributing/core/testing.md#writing-tests-for-nextjs) - Documentation added - Telemetry added. In case of a feature if it's used or not. - Errors have a helpful link attached, see https://github.com/vercel/next.js/blob/canary/contributing.md   ## For Maintainers  - Minimal description (aim for explaining to someone not on the team to understand the PR) - When linking to a Slack thread, you might want to share details of the conclusion - Link both the Linear (Fixes NEXT-xxx) and the GitHub issues - Add review comments if necessary to explain to the reviewer the logic behind a change  ### What?  ### Why?  ### How?  Closes NEXT- Fixes #  -->  ---------  Co-authored-by: graphite-app[bot] <96075541+graphite-app[bot]@users.noreply.github.com> Co-authored-by: JJ Kasper <jj@jjsweb.site>",70,83,153
vercel/next.js,1fc2dfb2fa3cc927bc08912e2396313b9d728f6c,Luke Sandberg,2025-07-01T18:02:51Z,"[turbopack] Remove some unnecessary awaits now that FileSystemPath is synchronously available. (#81090)  ### Remove some unnecessary awaits now that FileSystemPath is synchronously available.  ### What?  * Remove `async` from `ContextCondition::matches` simplifying the implementation and eliminating a bunch of temporary allocations * Remove some unnecessary FileSystemPath clones * Remove recursion from `resolve::base_options` this function really just wants the FileSystem::root so require that instead * Share the same same `cell` for most of the node externals  ### Why?  Noticed this while reviewing the `resovle` codebase.  I expect them to by negligible perf wins, but wins nontheless",56,74,130
vercel/next.js,fb319ce1bf5b95baff2b0d73f995cb9d27ae148d,JJ Kasper,2025-07-01T17:43:14Z,Update nextjs-bot config (#81138)  Follow-up from https://github.com/vercel/next.js/pull/81134 updating the email used in commit messages as well.,3,3,6
vercel/next.js,8f970bfab1cb6a3914e59ce403e62adaf27c5736,nextjs-bot,2025-07-01T17:29:32Z,v15.4.0-canary.107,34,34,68
vercel/next.js,19bf594b60e1f289d35e6c891b0e8cc8a72bda7e,Jiachi Liu,2025-07-01T17:25:00Z,"Revert ""[devtool] merge segment explorer flag into panel ui flag (#81085)"" (#81131)  Reverts #81085 to keep the flags separate so can test separately",91,38,129
vercel/next.js,890c11996a9846094e35b67215dca37461224e35,JJ Kasper,2025-07-01T17:23:05Z,Update workflows for nextjs-bot (#81134)  This updates to use the new bot account specific for Next.js which we've already been using for stale issues for a bit.,6,6,12
vercel/next.js,bd544da719463a6396d85c404328706e42b8afdf,vercel-release-bot,2025-07-01T16:47:49Z,v15.4.0-canary.106,34,34,68
vercel/next.js,a8ae109b3363f74356e04893d3bbf2deaa6b0d05,Luke Sandberg,2025-07-01T16:44:01Z,"[turbopack] Implement `Issue::source` on more Issue subtypes (#80874)  ### What Fill in `source` implementations for the majority of `Issue` implementations, leaving `TODO`s in a number of the buggy or tricky ones.  ### Why?  Currently `Issue` has both `file_path()` and `source()`.  * `file_path()` tells us where the error came from   * `source()` tells us the exact source file the error came from  Generally, if at all possible we should strongly prefer `source()` since it enables better error messages.  Part-of PACK-4879",744,671,1415
vercel/next.js,12ee9b2545bfcad779ae746ed83d44e0afeffeae,Luke Sandberg,2025-07-01T16:12:15Z,"[turbopack] Defend against json cyles in our execution tests (#81079)  Handle circular references in Jest test results   Otherwise failing tests may crash the IPC mechanism. e.g. a test failure induced this  ``` ──── STDERR:             turbopack-tests::execution test_tests__execution__turbopack__basic__esm_this Input: /Users/lukesandberg/projects/next.js/turbopack/crates/turbopack-tests/tests/execution/turbopack/basic/esm-this new file turbopack/crates/turbopack-tests/tests/execution/turbopack/basic/esm-this/issues/Error evaluating Node.js code-4c12f2.txt detected: --- expected +++ actual @@ -0,0 +1,6 @@ +error - [transform] [project]/turbopack/crates/turbopack-tests/tests/execution/turbopack/basic/esm-this/input/index.js  Error evaluating Node.js code +  TypeError: Converting circular structure to JSON +      --> starting at object with constructor 'Object' +      --- property 'foo' closes the circle +      [at <anonymous>] +      at run (turbopack:///[turbopack-node]/ipc/evaluate.ts:96:52) [WORKSPACE_ROOT/turbopack/crates/turbopack-tests/tests/execution/turbopack/basic/esm-this/output/[turbopack-node]__b000890d._.js:414:66] \ No newline at end of file ```  With this change we can see the actual test failure  ``` thread 'test_tests__execution__turbopack__basic__esm_this' panicked at turbopack/crates/turbopack-tests/tests/execution.rs:106:9: Failed with error(s) in the following test(s):  ""`this` in esm should be undefined"": Error: expect(received).toBe(expected) // Object.is equality  Expected: undefined Received: {""foo"": [Circular]}     at Object.eval (file:///Users/lukesandberg/projects/next.js/turbopack/crates/turbopack-tests/tests/execution/turbopack/basic/esm-this/output/b1abf_turbopack-tests_tests_execution_turbopack_basic_esm-this_input_index_021e2195.js:18:19)     at Promise.then.completed (/Users/lukesandberg/projects/next.js/node_modules/.pnpm/jest-circus@29.5.0/node_modules/jest-circus/build/utils.js:293:28)  ```",17,1,18
vercel/next.js,7131d706ae63bd8314ffbd91ca4bd08b32e7855d,Niklas Mischkulnig,2025-07-01T16:01:18Z,"Fix flakey devtools test (#81127)  A regression from #81085 @huozhi    The problem is that `openDevToolsIndicatorPopover` doesn't tell anymore whether the popup menu is open, but if the panel is open, but the ""Try Turbopack"" text is in the popup menu (only in the old UI).",14,9,23
vercel/next.js,9c3b6f76c1b8bbdc2d05b483a4ed4176178228b3,vercel-release-bot,2025-07-01T15:44:29Z,v15.4.0-canary.105,34,34,68
vercel/next.js,13401d8fd84f4801da98f90fbfc5fc82a4056da2,Jiachi Liu,2025-07-01T13:35:21Z,[devtool] merge segment explorer flag into panel ui flag (#81085),50,91,141
vercel/next.js,6f0225a09b27679310eddc0858172355fd875def,Zack Tanner,2025-07-01T13:07:20Z,"[devtools]: default to issues tab when error overlay is programmatically toggled (#81091)  When there's a build error and we toggle the error overlay on page load, we should ensure that the issues tab is used rather than the one stored in session storage, to avoid the case where we bring up the modal intending to show the user an error but instead show the settings page.  Drive-by refactor: lifted storage variable to the other places where they're defined Closes NEXT-4596",5,2,7
vercel/next.js,f9a7d73ac25b3267837fafd61151a28394dcdf29,Niklas Mischkulnig,2025-07-01T12:58:08Z,"Turbopack: scope hoist tree shaking modules as well (#80527)  Scope hoist the facade and the locals module (which are the only ones used in reexports-only tree shaking mode?) as well:  ![Bildschirmfoto 2025-06-14 um 14.13.36.png](https://graphite-user-uploaded-assets-prod.s3.amazonaws.com/sjZSbv6AFeuDg7Gb9rma/419a611c-f814-48d9-908c-980f2c6791bd.png)  Closes PACK-2960 Builds on top of https://github.com/vercel/next.js/pull/79459",171,67,238
vercel/next.js,ce553744b5ea16b92b6334f086a9b741885f524c,Joseph,2025-07-01T11:20:17Z,"Docs: paper cuts July 1st  (#81109)  Just a couple of adjustments to Caching docs claim that React State is preserved upon SPA transitions - as of today, without the Activity API, only shared layouts state is preserved.  And we are saying redirect should be called outside try/catch blocks, but rather, it is the try block that's the problem. So I am rephrasing that.  I still think it is best to keep the redirect away from the try/catch statement altogether.",7,6,13
vercel/next.js,21ff892d05e43644ebfd990d03d7f1742f9c46a7,Niklas Mischkulnig,2025-07-01T09:51:18Z,"Turbopack: also inline env vars with undefined value (#80990)  Previously, only env vars with set values were inline. But some of them, e.g. `process.env.__NEXT_MANUAL_TRAILING_SLASH` and `process.env.__NEXT_CROSS_ORIGIN` are always set, but might be `undefined` in the env mapping. Don't drop these but replace them with undefined, as Webpack does.",99,123,222
vercel/next.js,41eaf0e83fbcf6780507e6e1e9050b1ca5ab1775,Jiachi Liu,2025-07-01T09:44:28Z,"[build] remove the default imports for error boundary (#81000)  After we have all the conventions properly defined in the loader tree including the built-in ones since #80957 , the fix in  #59085 is not required anymore.  If you have custom conventions, they'll be bundled. If you don't have the custom conventions, the default one will be bundled.",0,5,5
vercel/next.js,52060515d5241f4c80b36716b5b1710d7bf93db7,Niklas Mischkulnig,2025-07-01T09:40:14Z,"Turbopack: apply browserslist config in dev (#81075)  Next.js wasn't yet using user-provided browserslist configs in dev with Turbopack.  Webpack does the same  Closes https://github.com/vercel/next.js/issues/80986",2,6,8
vercel/next.js,b059afdf4f55c085ac67a451bfd2ee53cc688b62,Tobias Koppers,2025-07-01T09:32:54Z,"Revert ""perf(turbopack/rcstr): Add serialization-time optimization (#78645)"" (#81112)  This reverts commit 2689a741014f57c3fbda32cb488f67607fbc6fe6.  Reverts https://github.com/vercel/next.js/pull/78645 as it causes an incremental build regression",72,512,584
vercel/next.js,dde872d7e5432df98bf287a5f1c4c2f183927f96,Donny/강동윤,2025-07-01T09:29:21Z,perf(turbopack): Disable `concurrent` of the SWC minifier. (#80981),0,7,7
vercel/next.js,80a580573e8a1ba1305a254b96e1071a441d87cc,Exotic,2025-07-01T08:48:47Z,"docs: fix grammatical error in upgrading to v15 guide (#81038)  Title is pretty self descriptive.  <img width=""667"" alt=""image"" src=""https://github.com/user-attachments/assets/211f9eee-5d39-494e-abb9-9cad996b75be"" />  Removes the word ""you"" for better grammatical clarity.  Co-authored-by: Joseph <joseph.chamochumbi@vercel.com>",1,1,2
vercel/next.js,79572631397b447884ef037df027db5d1d9ae794,"Sebastian ""Sebbie"" Silbermann",2025-07-01T07:13:20Z,"[node-webstreams] Remove unused App externals from next-server bundler config (#81039)  These externals have no effect since we don't import the legacy `react-dom/server` APIs in `next-server` anyway.  We only import the modern APIs since we alias `react-dom/server` to `build/webpack/alias/react-dom-server-edge.js` which does not import from the legacy entrypoint.  ## Test plan  - [x] `compiled/next-server` remained unchanged",1,8,9
vercel/next.js,3c274b743e6e833b3c3568e5b479efd418d56d62,"Sebastian ""Sebbie"" Silbermann",2025-07-01T06:47:11Z,"[node-webstreams] Remove unused PagesApi matching condition when setting react-server (#81037)  This looked like we were using `react-server` for Pages Router API routes. That wouldn't match Webpack behavior. We have an existing test in `test/e2e/import-conditions/import-conditions.test.ts` that checks the used import conditions in Pages Router API rotues.  Probably just an oversight when Turbopack started using `react-server` for Middleware and Instrumentation: https://github.com/vercel/next.js/pull/62134/files#diff-611c2f629b9a4c9ccb2fa2f6def7b7bbe8cde6fec2b5e085c3132250f7819803R164-R171  The aliasing implementation is now more closer structured to its Webpack counterpart in `packages/next/src/build/create-compiler-aliases.ts`.  I plan to move them closer together in a follow-up so that future alias work is easier to port between Webpack and Turbopack.",20,28,48
vercel/next.js,b3a6dcba71563b7e958e4524d99bd7d136d57f29,Niklas Mischkulnig,2025-07-01T06:20:28Z,"Turbopack: instrument scope hoisting with tracing spans (#81078)  <!-- Thanks for opening a PR! Your contribution is much appreciated. To make sure your PR is handled as smoothly as possible we request that you follow the checklist sections below. Choose the right checklist for the change(s) that you're making:  ## For Contributors  ### Improving Documentation  - Run `pnpm prettier-fix` to fix formatting issues before opening the PR. - Read the Docs Contribution Guide to ensure your contribution follows the docs guidelines: https://nextjs.org/docs/community/contribution-guide  ### Adding or Updating Examples  - The ""examples guidelines"" are followed from our contributing doc https://github.com/vercel/next.js/blob/canary/contributing/examples/adding-examples.md - Make sure the linting passes by running `pnpm build && pnpm lint`. See https://github.com/vercel/next.js/blob/canary/contributing/repository/linting.md  ### Fixing a bug  - Related issues linked using `fixes #number` - Tests added. See: https://github.com/vercel/next.js/blob/canary/contributing/core/testing.md#writing-tests-for-nextjs - Errors have a helpful link attached, see https://github.com/vercel/next.js/blob/canary/contributing.md  ### Adding a feature  - Implements an existing feature request or RFC. Make sure the feature request has been accepted for implementation before opening a PR. (A discussion must be opened, see https://github.com/vercel/next.js/discussions/new?category=ideas) - Related issues/discussions are linked using `fixes #number` - e2e tests added (https://github.com/vercel/next.js/blob/canary/contributing/core/testing.md#writing-tests-for-nextjs) - Documentation added - Telemetry added. In case of a feature if it's used or not. - Errors have a helpful link attached, see https://github.com/vercel/next.js/blob/canary/contributing.md   ## For Maintainers  - Minimal description (aim for explaining to someone not on the team to understand the PR) - When linking to a Slack thread, you might want to share details of the conclusion - Link both the Linear (Fixes NEXT-xxx) and the GitHub issues - Add review comments if necessary to explain to the reviewer the logic behind a change  ### What?  ### Why?  ### How?  Closes NEXT- Fixes #  -->",132,95,227
vercel/next.js,fc008727f0034eba395cafb7f4d68a6de3cac096,Niklas Mischkulnig,2025-07-01T06:20:24Z,Turbopack: guard against more eventual consistency (#81080)  These might be `None` due to eventual consistency. Don't crash the build because of that.,15,4,19
vercel/next.js,bab9377990b9c437b176a6f2961e0edb3563d9e3,Vercel Release Bot,2025-07-01T05:50:59Z,Upgrade React from `4db4b21c-20250626` to `65c4decb-20250630` (#81077),16441,8337,24778
vercel/next.js,9b151f2d54abe4bafd41c27d6d2bc381dedb6036,Tobias Koppers,2025-07-01T04:34:09Z,"Turbopack: Improve compaction in Persistent Caching (#80860)  ### What?  Refactors the compaction algorithm with the following improvements.  * Multiple ranges can be compacted in parallel * Instead of going for the largest merge it looks for an ""optimal"" size and runs multiple in parallel * Compaction considers duplicated size and tries to reduce it * Compaction works on recent SST files first as they tend to be less compacted yet and potentially contains more duplication. * Limits the parallel compactions to CPUs / 4 during the build and CPUs / 2 after the build",857,357,1214
vercel/next.js,726d7b0f418cc117e4cee38dfe79a912584d0ee0,Donny/강동윤,2025-07-01T00:52:23Z,build(turbopack): Update `swc_core` to `v29.4.0` (#81092)  ### What?  - ChangeLog for `swc_core`: https://github.com/swc-project/swc/compare/swc_core%40v29.2.0...swc_core%40v29.4.0 - ChangeLog for `styled_jsx`: https://github.com/swc-project/plugins/pull/485   ### Why?  To apply the styled-jsx patch,18,17,35
vercel/next.js,26773413d8dc9e23337039e406675faaf77e51ae,Vercel Release Bot,2025-07-01T00:49:12Z,Update font data (#81093)  This auto-generated PR updates font data with latest available,518,39,557
vercel/next.js,d5d10e17a9330abd2cf7dab5c0b3ae742b9b5c57,Luke Sandberg,2025-06-30T23:44:32Z,[turbopack] Make internal functions private and use rcstr! macro (#81041)  ## Refactor resolve module and improve RcStr usage  ### What? - Made several internal methods private that were unnecessarily public - Removed unused methods like `ResolveResult.map()` - Removed redundant fragment resolution code path - Improved RcStr usage by using `rcstr!` macro instead of `.into()` conversions - Fixed string handling in resolve functions to use RcStr consistently  ### Why?  I was taking a close look at `resolve` to understand how it worked and stumbled across these improvements,37,92,129
vercel/next.js,bd8e04be7512994be9e7a366d583d5dc5406b264,vercel-release-bot,2025-06-30T23:02:46Z,v15.4.0-canary.104,34,34,68
vercel/next.js,824f853747a63702526803aea373895a8177ed7e,Zack Tanner,2025-06-30T21:18:47Z,"[devtools]: move RestartServerButton to panel footer (#81082)  This moves the restart button to the footer in the new panel UI. It also properly gates to only be enabled with Turbopack + Persistent Cache.  Because it's no longer part of the error overlay, I refactored the logic a bit to hoist the flag into overlay state and setup the beforeunload listener from within the error renderer.  This heuristic still feels a bit unreliable and I'm not entirely convinced how useful it is yet, but the goal with this PR is just to get it to render in the right spot for now.  ![CleanShot 2025-06-30 at 10 24 12@2x](https://github.com/user-attachments/assets/7c96b7ad-0b90-4a08-9b9d-5bea02348ab8)  Closes NEXT-4561",88,25,113
vercel/next.js,626998177ec746d238e9c215be7c82fcf2859efe,Niklas Mischkulnig,2025-06-30T20:40:33Z,"Turbopack: fix exposed modules in scope hoisting (#81073)  Closes PACK-4943 Closes https://github.com/vercel/next.js/issues/80998  If we have to split up a merged group because multiple chunks have different execution order, we need to make sure that the references that cross merged groups because of this actually work at runtime (i.e. the referenced modules need to expose themselves in the runtime module registry).  Open for ideas on how to optimize this computation. It's the usual question of HashSet vs iterating a list multiple times.  The core problem is: we need to expose all modules that appear in `intra_group_references` as values with a key that is in a different list (i.e. key and value musn't both be in `after`, `common`, or `before`)",76,24,100
vercel/next.js,4e53b980a1926dffc70274ac8fbdd485cabe5320,Niklas Mischkulnig,2025-06-30T18:20:02Z,Turbopack: cleanup NextConfig derives (#81071)  `OperationValue` doesn't appear to be needed. Does that mean it can be removed without further consideration? Or can it still affect behavior?,2,2,4
vercel/next.js,2714a2a0787eb71d81711404ff8473cf57ca2c20,Jiachi Liu,2025-06-30T17:38:19Z,[segment explorer] show current route (#81003),119,32,151
vercel/next.js,b1ea75541598855fd564c015a969cfe7f1c0b7ad,Luke Sandberg,2025-06-30T17:25:39Z,[turbopack[ Fix a bug in top level `this` analysis (#81076)  ### What  Fix a bug where we incorrectly identified a `this` reference in a getter prop of an object literal as being 'top level'.  Reported here: https://github.com/vercel/next.js/pull/80925#issuecomment-3018327194,23,5,28
vercel/next.js,75e00d6a52518dd845f27f4b9af98a38911359c5,Niklas Mischkulnig,2025-06-30T16:59:40Z,Turbopack: inline `typeof window` in node_modules for server (#80945),1,9,10
vercel/next.js,890c19fa2c16774eb1520ebdddb7584de575fbb1,Jiachi Liu,2025-06-30T16:06:18Z,[test] fix browser chunk test failure (#81074),9,7,16
vercel/next.js,b9cabd28137040e847b7ba1fa67b5a13409f195d,Zack Tanner,2025-06-30T16:00:38Z,[devtools]: width/height adjustments (#81072)  Before:    https://github.com/user-attachments/assets/f4fdda52-452c-4990-818d-0a0db331a02b      After:    https://github.com/user-attachments/assets/ee58f986-96b3-4cf0-920e-aaee3370eea5      Fixes NEXT-4575,6,7,13
vercel/next.js,82c85a5b7bfbe38ee9c979d9da739925da20723c,Jiachi Liu,2025-06-30T14:54:46Z,[segment explorer] trigger boundary initial support (#80948),780,151,931
vercel/next.js,0888886df0394bf28cb465e8ca302e5b52f3d90f,Niklas Mischkulnig,2025-06-30T11:52:54Z,Turbopack: correctly apply generate_source_map with scope hoisting (#81060)  Don't generate source maps if the corresponding merged module specified that (i.e. have different values of `generate_source_map: bool` inside a single AST.,51,19,70
vercel/next.js,52a761e65210155f482218c30f6fbd782a67e74b,Joseph,2025-06-30T11:28:48Z,chore: `.ts` ext is most commonly used for middleware and routes (#81059)  `middleware.ts` and `route.ts` are commonly used,1,1,2
vercel/next.js,3825ea566476fe731c01911fd72e077932e2b0c1,"Sebastian ""Sebbie"" Silbermann",2025-06-30T09:37:50Z,[test] Add case for import conditions in Pages Router API routes (#81036)  Case was absent from the react-server condition test suite but relevant to double check for an upcoming refactor,87,0,87
vercel/next.js,b1e3a7dd74f9fcea14721dc5e33c5e209f013bae,Donny/강동윤,2025-06-30T08:48:05Z,refactor(turbopack): Use `FileSystemPath` instead of `Vc<T>` (#80634)  ### What?  Make `FileSystemPath` usable without `Vc<T>`.  ### Why?  String concatenation does not require caching.  ### How? Closes PACK-4468,4128,3869,7997
vercel/next.js,2689a741014f57c3fbda32cb488f67607fbc6fe6,Donny/강동윤,2025-06-30T08:46:35Z,perf(turbopack/rcstr): Add serialization-time optimization (#78645)  ### What?  Interns `RcStr` as an index set upon serialization.  ### Why?  It's required for future optimization.,512,72,584
vercel/next.js,3d0e472132e8495feaf0ebfc8f9718faac6dc505,Donny/강동윤,2025-06-30T08:29:38Z,"perf(turbopack): Drop `tokio::fs` usages (#80674)  ### What?  `std::fs` with manual `spawn_blocking` is better than using `tokio::fs`  ### Why?  `tokio::fs` inevitably calls `spawn_blocking` internally, but it calls `spawn_blocking` way too much time  ---------  Co-authored-by: graphite-app[bot] <96075541+graphite-app[bot]@users.noreply.github.com> Co-authored-by: Tobias Koppers <tobias.koppers@googlemail.com>",92,112,204
vercel/next.js,3327565c43e1e224665f11a8ad69d1d3a32285f7,Mohammed,2025-06-30T08:12:38Z,"docs(fetch): update wording on conflicting cache and revalidate options (#80591)  Clarifies that using conflicting options such as `{ revalidate: 3600, cache: 'no-store' }` results in a warning in the terminal rather than an error.  This change helps accurately reflect the current runtime behavior and avoids misleading readers into expecting a hard failure.  The update improves developer understanding when configuring fetch/cache strategies in their applications.  ---------  Co-authored-by: Joseph <joseph.chamochumbi@vercel.com>",1,1,2
vercel/next.js,e0a7a95fb20ccce92abe94c1679fd004144f1376,Tim Neutkens,2025-06-30T07:41:18Z,Turbopack: @next/mdx extension option is supported (#81058)  ## What?  @wbinnssmith added support for this option some time ago.,0,2,2
vercel/next.js,5c1769ea89483c3fe5396817149a4849e5cd62a3,Tobias Koppers,2025-06-30T06:55:27Z,"Turbopack: move tests to backend (#80995)  ### What?  We no longer have multiple backends, so no need to have these symlink hack to clone tests",2835,2856,5691
vercel/next.js,0cfdf50b5ed3964f34b82328baf4bc8270332354,Donny/강동윤,2025-06-30T06:48:54Z,refactor(turbopack): Make `create_visitor` rustfmt-able (#81053)  ### What?  Make `create_visitor!` macro work with rustfmt  ### Why?  It's better!  ### How?  Closes PACK-4922,261,160,421
vercel/next.js,2ae5e2af6c24a7c8182218a932df360dfdab9ad1,Donny/강동윤,2025-06-30T04:10:57Z,chore(turbopack): Fix typo (#80983)  ### What?  Fix a typo  ### Why?  https://github.com/vercel/next.js/pull/80830#pullrequestreview-2964742420,2,2,4
vercel/next.js,030463929eb9baa59dfff76a84395dcb52a3eb21,vercel-release-bot,2025-06-29T23:24:33Z,v15.4.0-canary.103,34,34,68
vercel/next.js,5d9ed230185f4fae4f7374cd9d26d79d572221da,Hendrik Liebau,2025-06-29T21:22:20Z,"Stop installing test apps that are skipped anyways (#81043)  In dev test mode, when running with `--prerender-debug`, instead of skipping the test suite, we can split up the test matrix to avoid installing the non-applicable test apps.",122,187,309
vercel/next.js,36930024ff9e0d9d070f4c3e5ba1f865202c4c23,Hendrik Liebau,2025-06-29T19:35:04Z,"Ignore `JSON.parse <anonymous> (0:0)` stack frames in test snapshots (#81044)  These frames will be ignore-listed soon. Until then, we remove them from the test snapshots, because their occurrence seems to be non-deterministic. They come from React's RSC parsing.",4,44,48
vercel/next.js,09a2167b0a970757606b7f91ff2d470f77f13f8c,vercel-release-bot,2025-06-27T23:24:43Z,v15.4.0-canary.102,34,34,68
vercel/next.js,2308ce058ba1f34abf3a6374198bf46a366c332c,zoomdong,2025-06-27T21:52:48Z,"feat(turbopack): externalType support script (#80768)  This pr introduce a new external type: `Script`, which has the same behaviour as webpack's https://webpack.js.org/configuration/externals/#externalstypescript  And i also refer to the webpack's implement, this external type accept a request like: `root@script_url` which same as webpack:   ![image](https://github.com/user-attachments/assets/f5b7489d-c4e5-4daa-aa5b-f92e10051c0d)  In the utoo, we use it as follows:   https://github.com/umijs/mako/blob/next/crates/pack-core/src/shared/resolve/externals_plugin.rs#L202-L208  It will generate runtime code to load the external package from the `script_url`",62,4,66
vercel/next.js,a9fac70b261a4b80e40810a9647825d475d6b7b5,Zack Tanner,2025-06-27T20:39:32Z,[tests]: fix failing searchparams test (#81013)  - Adds a more reliable heuristic for when the test should start navigating (after prefetches are initiated) as `waitForIdleNetwork` is discouraged - Normalizes RSC request keys to ignore the redirect value from the middleware case,40,17,57
vercel/next.js,2a75a93388ac9a9f1106f2d04a0fcca28d0ff477,Hendrik Liebau,2025-06-27T16:15:57Z,"Don't start next server unnecessarily to assert build output (#80994)  In some of these tests we only need to check the CLI output after a build, so we can skip starting the server to save some cycles.",15,16,31
vercel/next.js,b91297d9c8d2bad4e93043628d0dab0e87473e5f,Hendrik Liebau,2025-06-27T15:35:11Z,"Use snapshots to verify dynamic validation errors in dev mode (#80992)  Follow-up to #80946, asserting on the collapsed redbox errors in dev mode.  > [!NOTE]   > This PR is best reviewed with hidden whitespace changes.",1695,1105,2800
vercel/next.js,186913a23a343109e01e4fd1b34c2e4fd57e7c90,Jiachi Liu,2025-06-27T15:07:25Z,"[segment explorer] builtin slots style (#80972)  Show builtin slots with a style showing that component is possible for users to customize  ![image](https://github.com/user-attachments/assets/60351baf-ed0b-44fb-8ede-754b79b16dde)  Closes NEXT-4540",67,3,70
vercel/next.js,468b5129fb696f1a2ca053b99357ed4ee67487d8,vercel-release-bot,2025-06-27T14:55:57Z,v15.4.0-canary.101,34,34,68
vercel/next.js,33477b7e64fbfaa5f59e833a4cc161cf0793ede6,Jiachi Liu,2025-06-27T14:41:07Z,"[segment-explorer] display the builtin conventions (#80961)  Track built-in conventions in segment explorer. The default `global-not-found.js` and `global-error.js` will be displayed. Their style will be different to the others, we'll follow up in the later PRs.  Closes NEXT-4576",238,85,323
vercel/next.js,c1f4e3e759ed6eb5f27a028fc547f513a7386d92,Niklas Mischkulnig,2025-06-27T14:09:48Z,"Turbopack: fix sourcemaps of scopehoisted comments (#80987)  There was a bug in the source mappings for scope hoisted comments. They actually contained invalid mappings, which was only caught by the invalid mapping landing exactly on an invalid multibyte character boundary, which triggered a debug assertion: ![Bildschirmfoto 2025-06-27 um 10 01 15](https://github.com/user-attachments/assets/90cd7771-72c2-41ea-bc54-05b3be5f17f7)  What's happening is: 1. You do `comments.add_leading` with a `Comment` containing the real span 2. Traverse the AST and encode all bytepos in the soans 3. codegen, the bytepos in the AST are encoded, but the ones in the comments (Comment.span) are not (i.e. via `comments.take_leading`  Now, they are all consistently encoded and correctly mapped: ![Bildschirmfoto 2025-06-27 um 10 02 47](https://github.com/user-attachments/assets/90b4bb58-e946-4781-b498-d88668193107)",190,4,194
vercel/next.js,c910be03ee262e75187d9c477e71b9d24024b1f7,Hendrik Liebau,2025-06-27T12:42:13Z,"Use snapshots to verify error stack traces for dynamic validation errors (#80946)  For now, this is just documenting the current state of affairs with regards to how we print dynamic validation errors during prerendering.  Previously, the tests were run with and without `experimental.serverMinification`. Now, we're running them with and without the `--debug-prerender` CLI flag instead.  In follow-ups, we will add assertions for `next dev`, and also improve the errors for `next build`.  > [!NOTE]   > This PR is best reviewed with hidden whitespace changes.",1389,811,2200
vercel/next.js,345d4d4f25ab7ddb832d196dce00acb5271318d2,Niklas Mischkulnig,2025-06-27T11:10:41Z,Use proper reexports in entry-base.ts (#80988)  Purely a cosmetic change I noticed while debugging a Turbopack bug (but unrelated to that),21,39,60
vercel/next.js,3e170746b2e70cd9c0cdd27a06c7aaf3a80fc58e,Jiachi Liu,2025-06-27T10:58:42Z,"[devtools] polish icon and label color (#80976)  * In devtool panel the icons should be gray-1000 Closes NEXT-4584  ![image](https://github.com/user-attachments/assets/5eba7071-706c-4c64-9ac4-f86fe8457296)   * In segment explorer the page label color should be -900 Closes NEXT-4581  ![image](https://github.com/user-attachments/assets/71b78c28-08a8-4f46-94aa-f96fe364abb9)  * hide side bar when there's no error  ![image](https://github.com/user-attachments/assets/30eaeac8-0c9e-4347-a489-dd0672fd21df)",6,2,8
vercel/next.js,08aad0c425b70086df238832f8340cc7000e3a33,Niklas Mischkulnig,2025-06-27T10:10:11Z,"Turbopack: fix codegen of directives  (#80895)  Closes PACK-4894  Previously, directives in the input weren't handled correctly, this was the output: The `use strict` doesn't do anything here because directives only have an effect at the top of modules and at the top of functions. ```js ""[project]/turbopack/crates/turbopack-tests/tests/snapshot/basic/use-strict/input/index.js [test] (ecmascript)"": ((__turbopack_context__) => {  var { m: module, e: exports } = __turbopack_context__; { 'use strict'; console.log('this is CJS'); module.exports = 1234; }}), }]); ```  Instead: 1. detect if `use strict` is in the input file 2. strip all directives 3. prepend `""use strict""`  at the top of the chunk item, if it was strict strict",113,4,117
vercel/next.js,5d94c8063ec4ff22069db999394ab72d802793ce,Vercel Release Bot,2025-06-27T09:59:19Z,Upgrade React from `cee7939b-20250625` to `4db4b21c-20250626` (#80959)  Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,1696,939,2635
vercel/next.js,790a627177650884f450f6dd6ef41806114158be,Jiachi Liu,2025-06-27T09:46:08Z,"[segment explorer] hover state for open-in-editor color (#80950)  Add a simple hover state for the open in editor button  https://github.com/user-attachments/assets/fcca7f7e-3a73-41e0-a24f-47a86313a969  Closes NEXT-4582",5,0,5
vercel/next.js,69f805c32dd466c518e52ccc083f2b34e5d9298c,Niklas Mischkulnig,2025-06-27T09:29:08Z,"Turbopack: Add PURE comments for FreeVarReference::EcmaScriptModule (#80902)  Ideally, we'd refactor `Effect`s so that overlapping effects (i.e. `process.env.NODE_ENV` inlining and polyfilling the `process` variable in the browser context) don't run twice.  But this lessens the impact by making ```js console.log(process.env.NODE_ENV); ``` produce ```js var __TURBOPACK_imported_$process = /*@__PURE__*/ __turbopack_import__(""[project]/node_modules/process/index.js""); console.log(""production)""; ``` so that the minifier can get rid of the import (even though the module will still be bundled).",68,23,91
vercel/next.js,e186b697fbaefb5b65a181b4d1f456339c3657e7,Hendrik Liebau,2025-06-27T07:41:51Z,"[Segment Cache] Enable deploy tests (#80947)  With this PR, we're enabling deployment testing for the existing Segment Cache test suites (excluding those that need a custom server setup).  Two timing issues were fixed, and one bug was uncovered. For details see the inline comments below.",82,62,144
vercel/next.js,d93f940a50b810621c0fed839566897a1c375022,Vercel Release Bot,2025-06-27T07:16:36Z,Upgrade React from `fa3feba6-20250623` to `cee7939b-20250625` (#80904)    Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,10482,7371,17853
vercel/next.js,54c38a62eb532db227fd4763d2e12d6263f359ad,Tim Neutkens,2025-06-27T07:02:00Z,"Turbopack/Webpack Build: Remove dead code (#80938)  ## What?  `__NEXT_OPTIMIZE_FONTS` doesn't exist anymore, so this is dead code.",0,23,23
vercel/next.js,6c50eada220cbbee6057f2931b9ce04c2d59f38a,Niklas Mischkulnig,2025-06-27T07:01:54Z,Turbopack: improve unit tests (#80940),26,1,27
vercel/next.js,c2be57cc1d7a50ce22f3eb2988cf38c5198c9a1b,Niklas Mischkulnig,2025-06-27T06:27:16Z,Turbopack: pass current Node.js version from JS side instead of invoking node (#80949),81,37,118
vercel/next.js,4eea8e75a79512d8e5cd5d93de9a958de4fd4f3a,Donny/강동윤,2025-06-27T03:42:09Z,perf(turbopack): Apply small-vector optimization for `TaskId`s (#80830)  ### What?  Reduce memory allocations by applying small vector optimization.  ### Why?  `sizeof(SmallVec<[TaskId; 4]>)` == `sizeof(Vec<TaskId>)` so it's an simple optimization.  Reducing memory allocation may yield performance improvements.,52,34,86
vercel/next.js,36448ea998a2dc17abbe41b0fc40a65006a3c241,Cong-Cong Pan,2025-06-27T03:32:56Z,fix: webpack config context when using rspack (#80921)  `webpackConfigContext.webpack` should be Rspack exports when using Rspack.,1,1,2
vercel/next.js,78ed6a289ab357c04ce67d91386cedf64254dd81,Donny/강동윤,2025-06-27T02:52:48Z,"perf(turbopack): Remove needless allocation (#80980)  ### What?  Remove needless conversion to `String`, which unconditionally allocates.  ### Why?  I missed this while updating `swc_core`",232,232,464
vercel/next.js,e59c3479d4d68a3f961455c2a5db60514809d5e2,Donny/강동윤,2025-06-27T02:35:38Z,"chore(turbopack): Add instrumentation to `Code::generate_source_map` (#80978)  ### What?  ### Why?  It turns out that `minify()` function itself was consuming lots of memory, instead of the SWC minifier.",2,0,2
vercel/next.js,de7adc2425e07441de8b5ce85cc6e70c634358ef,Donny/강동윤,2025-06-27T01:56:05Z,"chore(turbopack): Add `swc_ecma_minifier` to turbopack trace target (#80977)  ### What?  Make tracing spans in `swc_ecma_minifier` show up in the profiling result.  ### Why?  SWC Minifier consumes a noticeable amount of time in turbopack production builds, so I need to break it down.",1,0,1
vercel/next.js,112a7657dfa6f2abaed35fbfadf5a60e150487f6,Luke Sandberg,2025-06-27T01:40:47Z,"[tubopack] Compile time replace top level `this` expressions to fix a subtle esm bug and simplify the client side runtime (#80925)  ### What Use the 'free variable' system to compile time replace `this` expressions at the top level.  In ESM modules it is rebound to `undefined`, this fixes an existing bug in turbopack where it was instead bound to `globalThis` In CJS modules it is rebound to `exports` via the `__turbopack_context__.e` alias  Then remove the implicit `this` propagation from the runtime so we can adopt arrow functions everywhere.  Closes PACK-4905",111,61,172
vercel/next.js,694ec0b06ab3c3bbcd20e97e532d2092e6fb1dae,Zack Tanner,2025-06-26T23:28:43Z,"[tests]: add failing deploy test to manifest (#80973)  For the same reason we have the other `unstable_expire<x>` tests disabled, this adds another one that has been frequently failing for us. ([Linear x-ref](https://linear.app/vercel/issue/ENET-1729))  `app-action-node-middleware` is also a duplicate of `app-action`, but when we created it, we did not copy over the manifest exclude list.",12,14,26
vercel/next.js,dd49f046dd4e5d1c2886d745c79a842ae6d771b4,vercel-release-bot,2025-06-26T23:24:30Z,v15.4.0-canary.100,34,34,68
vercel/next.js,71cdce68e02c1cb5bd31afe60dd2276bb5a8ef7e,Jiachi Liu,2025-06-26T21:36:57Z,"[refactor] group the built-in conventions (#80957)  Group all the built-in conventions into `src/client/components/builtin` with the actual same name of the conventions they represent.  e.g.  The default `not-found.js` is `next/dist/client/compoents/builtin/not-found.js`; The default `global-error.js` is `next/dist/client/compoents/builtin/global-error.js`;  This give us an easier way to track all the builtin conventions. This is also the preparation work for #80961 where we display the builtin conventions in the segment explorer.",41,40,81
vercel/next.js,ee5c6eb73f3a3dd2d1b474664f1b93a1d397ed93,Joshua Hannaford,2025-06-26T19:30:29Z,"fix(turbopack): Fix a panic when the generated hash is too short when radix formatting a string. (#80966)  ## Fix hash length check in metadata formatting  ### What? Fixed a panic in the `format_radix` function when the generated hash is shorter than 6 characters.  ### Why? The current implementation always tries to take the first 6 characters of the hash using a fixed slice `result[..6]`, which would panic if the hash is shorter than 6 characters. This doesn't match the JavaScript behavior where `toString(36).slice(0, 6)` automatically takes the minimum of the hash length and 6.  ### How? Added a check to determine the minimum length between the hash length and 6, then use that value for slicing: ```rust let len = result.len().min(6); result[..len].iter().collect() ```  Fixes #PACK-4495",13,2,15
vercel/next.js,3bad7cc77993d97a0583c36d00af9e047847c965,Jude Gao,2025-06-26T18:35:28Z,Roll out validateRSCRequestHeaders (#80954),4,1,5
vercel/next.js,812596e77e73f0a7f02ea3ec34d5bc2c0e9f9093,Luciano Mammino,2025-06-26T18:08:22Z,"Update backend-for-frontend.mdx (#80942)  Example function in [App Router > Guides > Backend For Frontend > Public Endpoints](https://nextjs.org/docs/app/guides/backend-for-frontend#public-endpoints) should be `async` (since using `await`)  <!-- Thanks for opening a PR! Your contribution is much appreciated. To make sure your PR is handled as smoothly as possible we request that you follow the checklist sections below. Choose the right checklist for the change(s) that you're making:  ## For Contributors  ### Improving Documentation  - Run `pnpm prettier-fix` to fix formatting issues before opening the PR. - Read the Docs Contribution Guide to ensure your contribution follows the docs guidelines: https://nextjs.org/docs/community/contribution-guide  ### Adding or Updating Examples  - The ""examples guidelines"" are followed from our contributing doc https://github.com/vercel/next.js/blob/canary/contributing/examples/adding-examples.md - Make sure the linting passes by running `pnpm build && pnpm lint`. See https://github.com/vercel/next.js/blob/canary/contributing/repository/linting.md  ### Fixing a bug  - Related issues linked using `fixes #number` - Tests added. See: https://github.com/vercel/next.js/blob/canary/contributing/core/testing.md#writing-tests-for-nextjs - Errors have a helpful link attached, see https://github.com/vercel/next.js/blob/canary/contributing.md  ### Adding a feature  - Implements an existing feature request or RFC. Make sure the feature request has been accepted for implementation before opening a PR. (A discussion must be opened, see https://github.com/vercel/next.js/discussions/new?category=ideas) - Related issues/discussions are linked using `fixes #number` - e2e tests added (https://github.com/vercel/next.js/blob/canary/contributing/core/testing.md#writing-tests-for-nextjs) - Documentation added - Telemetry added. In case of a feature if it's used or not. - Errors have a helpful link attached, see https://github.com/vercel/next.js/blob/canary/contributing.md   ## For Maintainers  - Minimal description (aim for explaining to someone not on the team to understand the PR) - When linking to a Slack thread, you might want to share details of the conclusion - Link both the Linear (Fixes NEXT-xxx) and the GitHub issues - Add review comments if necessary to explain to the reviewer the logic behind a change  ### What?  ### Why?  ### How?  Closes NEXT- Fixes #  -->  ---------  Co-authored-by: Joseph <joseph.chamochumbi@vercel.com>",2,2,4

sha,author_login,date,message,additions,deletions,total_changes,commit_count,total_prs,merged_prs,pr_acceptance_rate
4a0aa9caba9be6ccc17de770efb3cdbe5b5d41a7,vercel-release-bot,2025-07-17 23:36:46+00:00,"Update Rspack development test manifest (#81747)

This auto-generated PR updates the development integration test manifest used when testing Rspack.",43,9,52,18,0,0,
2bd45abdb937e70739012f50298c180ecb0fa62b,vercel-release-bot,2025-07-17 23:27:02+00:00,"Update Rspack production test manifest (#81746)

This auto-generated PR updates the production integration test manifest used when testing Rspack.",25,8,33,18,0,0,
bbddbeeba2f0aacf1db39d7dd9f6d5be36e21aee,nextjs-bot,2025-07-17 23:24:57+00:00,v15.4.2-canary.7,34,34,68,38,0,0,
53a92f872236c9fd0208519a6e91e3d3187d8722,padmaia,2025-07-17 22:53:03+00:00,"Add trigger for v0 sync workflow (#81645)

<!-- Thanks for opening a PR! Your contribution is much appreciated.
To make sure your PR is handled as smoothly as possible we request that
you follow the checklist sections below.
Choose the right checklist for the change(s) that you're making:

## For Contributors

### Improving Documentation

- Run `pnpm prettier-fix` to fix formatting issues before opening the
PR.
- Read the Docs Contribution Guide to ensure your contribution follows
the docs guidelines:
https://nextjs.org/docs/community/contribution-guide

### Adding or Updating Examples

- The ""examples guidelines"" are followed from our contributing doc
https://github.com/vercel/next.js/blob/canary/contributing/examples/adding-examples.md
- Make sure the linting passes by running `pnpm build && pnpm lint`. See
https://github.com/vercel/next.js/blob/canary/contributing/repository/linting.md

### Fixing a bug

- Related issues linked using `fixes #number`
- Tests added. See:
https://github.com/vercel/next.js/blob/canary/contributing/core/testing.md#writing-tests-for-nextjs
- Errors have a helpful link attached, see
https://github.com/vercel/next.js/blob/canary/contributing.md

### Adding a feature

- Implements an existing feature request or RFC. Make sure the feature
request has been accepted for implementation before opening a PR. (A
discussion must be opened, see
https://github.com/vercel/next.js/discussions/new?category=ideas)
- Related issues/discussions are linked using `fixes #number`
- e2e tests added
(https://github.com/vercel/next.js/blob/canary/contributing/core/testing.md#writing-tests-for-nextjs)
- Documentation added
- Telemetry added. In case of a feature if it's used or not.
- Errors have a helpful link attached, see
https://github.com/vercel/next.js/blob/canary/contributing.md


## For Maintainers

- Minimal description (aim for explaining to someone not on the team to
understand the PR)
- When linking to a Slack thread, you might want to share details of the
conclusion
- Link both the Linear (Fixes NEXT-xxx) and the GitHub issues
- Add review comments if necessary to explain to the reviewer the logic
behind a change

### What?

### Why?

### How?

Closes NEXT-
Fixes #

-->",20,10,30,3,96,83,0.86
a87a0721098e3fb6fbfb9102f7c160917ae72461,Cy-Tek,2025-07-17 21:22:47+00:00,"fix(turbopack) Adjust the way catchall routes are handled when a more specific parallel route exists (#81634)

## Improve App Router Route Prioritization

### What?
Fixed a logic bug where we were failing to correctly identify routes as
catchall routes due to treating parallel routes as a completed route
path. This shouldn't happen because parallel routes do not affect the
routing structure.

### How?

- Modified the route selection logic to more clearly prioritize specific
routes over catch-all routes
- Make sure we only count true leaf nodes when determining when to use
the catch-all. Parallel is not a leaf node
- Added a test case to ensure middleware rewrites and redirects work
correctly with both parallel and non-parallel catch-all routes.

Fixes #PACK-4490",170,9,179,3,16,16,1.0
65e0b7b7579614b07a53ed24d229064c7e2f869d,ztanner,2025-07-17 20:31:55+00:00,"bugfix: static resources staleTime should be renewed once refetched (#81771)

When the `x-nextjs-staletime` header is sent from the server, the client
router was discarding all of its staleTime heuristics (such as
lastUsedTime and ""reusable"" cache entries). This caused an issue where
after the static staleTime window expired and the prefetch data was
renewed, the static staleTime itself was not being renewed.

As a result, once the static staleTime expired, the client would
continuously refetch the resource on every navigation, even though it
had just been renewed.

This removes the `x-nextjs-staleTime` logic from this heuristic because
it was only intended to be considered for the new `clientSegmentCache` &
cache components work",74,18,92,7,633,579,0.91
8a4abf7dc3b378bf9795c122b270534cae598357,nextjs-bot,2025-07-17 19:31:48+00:00,v15.4.2-canary.6,34,34,68,38,0,0,
5b998d69553df2f96c0dc398d8e483a6cc7c387f,wyattjoh,2025-07-17 19:23:46+00:00,"fix: revert client segment route changes for sub shell generation (#81740)

### What?

Implements a new sortable routes system that distinguishes between
source pages and rendered pages for sub-shell generation.

### Why?

The existing route sorting logic in Next.js doesn't account for the
distinction between the original page definition (`sourcePage`) and the
final rendered route (`page`). This is critical for sub-shell
generation, given this example:

| Page | Source Page |
|--------|--------|
| `/en/[teamSlug]/[projectSlug]/monitoring` |
`/[lang]/[teamSlug]/[projectSlug]/monitoring` |
| `/fr/[teamSlug]/[projectSlug]/monitoring` |
`/[lang]/[teamSlug]/[projectSlug]/monitoring` |
| `/[lang]/[teamSlug]/~/monitoring` | `/[lang]/[teamSlug]/~/monitoring`
|

And a request to `/en/vercel/~/monitoring` that it will hit the
`/[lang]/[teamSlug]/~/monitoring` page instead of the
`/en/[teamSlug]/[projectSlug]/monitoring`. This is because we first need
to sort by the Source Page and then the Page to ensure that the correct
route ordering is respected.

### How?

- Adds new `SortableRoute` type that tracks both `sourcePage` and `page`
- Implements depth-first route comparison algorithm that properly
handles segment specificity
- Refactors build process to use the new sorting functions instead of
legacy `getSortedRoutes`
- Adds source page tracking for PPR-enabled routes with
`clientSegmentEnabled`
- Includes comprehensive test coverage for all route sorting scenarios

The new sorting algorithm ensures consistent route ordering across
builds and proper sub-shell generation behavior.",1337,39,1376,6,307,243,0.79
cff812b4d02764961571069818e172053984003f,mischnic,2025-07-17 19:21:12+00:00,"Turbopack: include more details in panic (#81773)

<!-- Thanks for opening a PR! Your contribution is much appreciated.
To make sure your PR is handled as smoothly as possible we request that you follow the checklist sections below.
Choose the right checklist for the change(s) that you're making:

## For Contributors

### Improving Documentation

- Run `pnpm prettier-fix` to fix formatting issues before opening the PR.
- Read the Docs Contribution Guide to ensure your contribution follows the docs guidelines: https://nextjs.org/docs/community/contribution-guide

### Adding or Updating Examples

- The ""examples guidelines"" are followed from our contributing doc https://github.com/vercel/next.js/blob/canary/contributing/examples/adding-examples.md
- Make sure the linting passes by running `pnpm build && pnpm lint`. See https://github.com/vercel/next.js/blob/canary/contributing/repository/linting.md

### Fixing a bug

- Related issues linked using `fixes #number`
- Tests added. See: https://github.com/vercel/next.js/blob/canary/contributing/core/testing.md#writing-tests-for-nextjs
- Errors have a helpful link attached, see https://github.com/vercel/next.js/blob/canary/contributing.md

### Adding a feature

- Implements an existing feature request or RFC. Make sure the feature request has been accepted for implementation before opening a PR. (A discussion must be opened, see https://github.com/vercel/next.js/discussions/new?category=ideas)
- Related issues/discussions are linked using `fixes #number`
- e2e tests added (https://github.com/vercel/next.js/blob/canary/contributing/core/testing.md#writing-tests-for-nextjs)
- Documentation added
- Telemetry added. In case of a feature if it's used or not.
- Errors have a helpful link attached, see https://github.com/vercel/next.js/blob/canary/contributing.md


## For Maintainers

- Minimal description (aim for explaining to someone not on the team to understand the PR)
- When linking to a Slack thread, you might want to share details of the conclusion
- Link both the Linear (Fixes NEXT-xxx) and the GitHub issues
- Add review comments if necessary to explain to the reviewer the logic behind a change

### What?

### Why?

### How?

Closes NEXT-
Fixes #

-->",4,1,5,34,340,285,0.84
a093d32d3e6f90d5afd3ac7d0dd1e4c6267f505c,mischnic,2025-07-17 18:39:12+00:00,"Turbopack: consistently name runtime chunk (#81769)

Name runtime chunks like this: `bench/basic-app/.next/static/chunks/turbopack-5356a889447ffe6d.js`",145,104,249,34,340,285,0.84
3a5d293c38881b2f37b165b24dc31b309f1c4175,bgw,2025-07-17 15:51:59+00:00,"feat(turbopack): Log anonymized internal error (panic) information to telemetry (#81272)

## Goals

- Pass through a custom `TurbopackInternalError` type when a Rust panic or an unexpected top-level `anyhow::Error` occurs.
- Make a best-effort attempt to log a location of the error to telemetry.
  - In the case of a panic, we should have the file, line, and column where the panic occured. This could be obscured inside of a helper method, but it's better than nothing. Since this is a position in Turbopack's source code, there's zero risk of user data being included here, so it should be safe to log to telemetry.

## How it works

In previous PRs, @wbinnssmith did the following:
- Added a thread-local for storing the most recent panic information in Rust
- Added `catch_unwind` logic to intercept the panic in turbo-tasks and read the thread-local information, with care take to make sure we're reading from the same thread (not across an `await` boundary).
- Added a custom `std::error::Error` type for internal errors, with support for storing information about a source panic.
- Ensured we set up `Error::source` correctly everywhere so that you can trace an error back to the root cause (presumably a panic).

In #80881, I added a `NextTurbopackContext` type that we can extend to store additional helpers on.

In this PR:
- Adds a callback to the `Project` constructor called `throwTurbopackInternalError` that constructs and throws a custom `TurbopackInternalError`. The definition of `TurbopackInternalError` must be in JS, as we cannot reasonably define the error subclass using NAPI.
- Wraps the callback in a `ThreadsafeFunction` so that it can be called in any of our async functions.
- Replaces all the places we were previously converting to `napi::Error` with logic to run `throwTurbopackInternalError`.

In a subsequent PR, we could move more of the panic handling into JS using `throwTurbopackInternalError`.

## Testing

Added a panic and ran:

```
NEXT_TELEMETRY_DEBUG=1 pnpm next dev --turbopack examples/basic-css/
```

<img src=""https://graphite-user-uploaded-assets-prod.s3.amazonaws.com/HAZVitxRNnZz8QMiPn4a/7f261d3f-351e-436a-9345-fd6e9056d20c.png"" width=""600"">",594,399,993,11,335,315,0.94
f8afa172a0710575ca514b700d282935c5bd2d79,huozhi,2025-07-17 15:40:37+00:00,"[chore] bump zod to latest v3 (#81757)

Update zod v3 to latest. Noticed this while playing with ai sdk as it's requires new versions of zod. Hence realized we haven't updated for a while. Bump to newer versions of `zod@3`",14,14,28,24,1020,896,0.88
b7eff6dea8382bb36aab2b711eb6755cf40b3f78,mischnic,2025-07-17 15:39:15+00:00,Remove unnecessary await (#81761),3,3,6,34,340,285,0.84
5b37421527b8a98389a6b4d4181df88e787f755f,eps1lon,2025-07-17 13:10:59+00:00,[turbopack] Stop exposing globals from Turbopack runtime (#81727),36,15,51,32,540,451,0.84
10fb5bc683d6a37af04d17e42123e75b30d25726,huozhi,2025-07-17 11:01:50+00:00,"[devtool] enable segment explorer by default (#81737)

Enable `experimental.devtoolSegmentExplorer` on canary by default and update snapshots",339,205,544,24,1020,896,0.88
719bc5e71bdcf4881e71ec54e1cdffa19e32f455,nextjs-bot,2025-07-16 23:24:53+00:00,v15.4.2-canary.5,34,34,68,38,0,0,
96b31f8e678bfe2c259a96b97d35632373bced38,huozhi,2025-07-16 23:19:46+00:00,"[devtool] fix duplicate rendered indicator on server (#81729)

There're should be only one indicator rendered when `showIndicator` state is true, the previous condition is not correct since the previous change seem causing indicator always rendered even on SSR. since devtool bundle is also bundled on ssr layer, but the related code should not get executed. We noticed the previous condition will always render the indicator, which likely triggered some `base-ui` browser code to execute on server and crash on windows.

Related #81722",235,1555,1790,24,1020,896,0.88
4e0b1125a466bdc81ead94969008c55509ea4ad0,unstubbable,2025-07-16 21:27:05+00:00,"Improve error handling for `headers`/`cookies`/`draftMode` in `'use cache'` (#81716)

This ensures that we show a proper error with an error stack
(potentially source-mapped) when accessing
`headers`/`cookies`/`draftMode` in `'use cache'`, even when caught in
user-land code. For `searchParams` (currently triggering a timeout
error) we'll need a slightly different solution, which will be handled
in a future PR.

The approach chosen here is somewhat temporary, as we'd like to
implement compile-time errors instead for accessing any kind of request
data in `'use cache'` functions. However, this would require a larger
change to our bundlers.

closes NAR-201",601,193,794,25,331,294,0.89
63090e20f198f7bda7bb746e29fe6a25a1391d8c,ztanner,2025-07-16 21:25:01+00:00,"fix: pages router metadata bugs with React 19 (#81733)

When we updated `experimental.strictNextHead` to be true in #65418, we
did not update all spots that would default to true in the case where
the value was omitted entirely.

This led to the default value not being correctly applied in pages
router, which resulted in duplicate metadata w/ React 19.

Since we made the flag the default, we can also probably clean up this
flag all together, but that can be done separately.

Fixes #81655
Fixes #81689",106,55,161,7,633,579,0.91
2eac9dccd85d8ec941c416de5f8f01236a8f1e2e,bgub,2025-07-16 20:58:34+00:00,"chore: update username from 'nebrelbug' to 'bgub' (#81734)

## Update GitHub username in labeler configuration

I just changed my username from ""nebrelbug"" to ""bgub""",1,1,2,2,7,4,0.57
40d2fa9b5e578c71989251ad387214ffb2c1507f,nextjs-bot,2025-07-16 19:31:14+00:00,v15.4.2-canary.4,34,34,68,38,0,0,
9d1e94d56d4d3ad8ff0119192733b760fe8752ad,wyattjoh,2025-07-16 19:25:12+00:00,"fix: revert client segment route changes for sub shell generation (#81731)

Reverts changes to the `routes-manifest.json` from #81321. Incorrect
route sorting was causing some routing errors.",6,30,36,6,307,243,0.79
382b79bcc9fb1446e8f88d7a321c365aaece8a2c,eps1lon,2025-07-16 18:45:34+00:00,"[sourcemaps] Consistent cursor columns (#81375)

Co-authored-by: Niklas Mischkulnig <4586894+mischnic@users.noreply.github.com>",822,941,1763,32,540,451,0.84
a04a5efe80d88e603ded31c20645a0ddc76e1104,lukesandberg,2025-07-16 18:11:26+00:00,"Add an e2e test for the css serving issue (#81683)

## Add a regression test for when a not-found component depends on css and triggers a bug in turbopack

To correctly serve js and css resources during server side rendering we construct a client manifest that lists all the server components and their required resources.  Turbopack has a bug where we fail to collect css that is used by the page if it is also used by a not-found page (and other error handlers as well).

When a not-found component is present all pages pages implicitly depend on this module and depend on it as an early dependency of the generated `app-page.js` file.  This means if a `not-found.js` file (or a global error file) would happen to depend on the same css as a normal component we would associate it as a client-reference of that component instead of any other.  Then on a server side render we would simply omit it.  This PR adds a regression test for this issue.

See  #77861 and  #79535",69,0,69,7,83,69,0.83
5444efa2d205bcbc49fbbde4a753582731b0a4a2,vercel-release-bot,2025-07-16 18:10:17+00:00,"Update Rspack production test manifest (#81701)

This auto-generated PR updates the production integration test manifest used when testing Rspack.",46,7,53,18,0,0,
f0099cd448efe6f28b046d84ba4961a1d36f8153,vercel-release-bot,2025-07-16 18:08:41+00:00,"Update Rspack development test manifest (#81702)

This auto-generated PR updates the development integration test manifest used when testing Rspack.",77,5,82,18,0,0,
f74a1697a919ec222c3950190ddd09519432baf3,acdlite,2025-07-16 16:13:54+00:00,"[Segment Cache] Support dynamic head prefetching (#81677)

Fixes an issue where opting into dynamic prefetching with
prefetch={true} would not apply to head data (like the title), only the
page data. Although the head was being sent by the server as part of the
prefetch response, it wasn't being transferred correctly to the prefetch
cache.

The net result is that you can now fully prefetch a page with a dynamic
title without any additional network requests on navigation.",102,8,110,3,145,131,0.9
964d0634cd5f8782cfbac145865c7e0f3f414b70,acdlite,2025-07-16 16:12:58+00:00,"Fix: createRouterAct ""reject"" config (#81720)

Fixes a problem with the internal `createRouterAct` testing helper where
the `block: ""reject""` option would not error correctly, leading to
potential false negatives. I think I accidentally broke this when I
added the ability to provide an array of expected responses.",22,10,32,3,145,131,0.9
6f88000f0bce63bb447de2b6843883043347e84a,nextjs-bot,2025-07-16 16:06:17+00:00,v15.4.2-canary.3,34,34,68,38,0,0,
10ce117bdf5d702969fd81ec15d539be4dfa24cd,eps1lon,2025-07-16 16:02:53+00:00,[test] Fix `app-static` deploy test (#81712),45,21,66,32,540,451,0.84
9088ece15f42ff5e11df5ef164fb307494a36e74,nextjs-bot,2025-07-16 15:08:57+00:00,v15.4.2-canary.2,34,34,68,38,0,0,
115eff7201191fcc1d2f10bbc4c69f5359897311,timneutkens,2025-07-16 15:05:23+00:00,"Turbopack: Support string without options for @next/mdx (#81713)

## What?

Adds support for `remarkPlugins: ['remark-gfm']` and `rehypePlugins:
['rehype-slug']`.

Previously you had to nest an array like `remarkPlugins:
[['remark-gfm']]` but that's a bug, that case is only for passing
options. Directly passing the string without options should be allowed.
This PR implements that.",75,15,90,2,1020,933,0.91
c3e6680bfd245d840d479ba3ba1d0b1a570a19b1,wyattjoh,2025-07-16 14:49:40+00:00,"perf(build): optimize buildAppStaticPaths performance and add helper function (#81386)

### What?

Optimizes the `buildAppStaticPaths` function performance and extracts a
helper function `calculateFallbackMode` to reduce code duplication.

### Why?

The `buildAppStaticPaths` function had several performance bottlenecks:

1. **Repeated regex pattern compilation**: Route parameter patterns were
being compiled inside the loop for every route, causing unnecessary
overhead
2. **Inefficient root parameter lookups**: Using `Array.includes()` for
root parameter checks resulted in O(n) lookups for each parameter
3. **Duplicated fallback mode logic**: The same fallback mode
calculation was repeated in multiple places, making the code harder to
maintain and prone to inconsistencies

These inefficiencies became more apparent when processing large numbers
of routes with complex parameter structures.

### How?

**Performance optimizations:**
- Pre-compile regex patterns for route parameters outside the loop and
store them in a Map for O(1) lookups
- Convert `rootParamKeys` to a Set for O(1) lookup time instead of O(n)
array searches
- Optimize the fallback parameter collection loop to break early and
avoid redundant iterations

**Code organization:**
- Extract `calculateFallbackMode` helper function to eliminate code
duplication
- Add comprehensive tests for the new helper function to ensure
correctness
- Simplify the main loop logic by using the pre-compiled patterns and
optimized data structures",207,110,317,6,307,243,0.79
a3f031d834af6da4640a6f33ab6fb86d87df442c,lubieowoce,2025-07-16 14:23:34+00:00,"fix: rootParams should throw in client when fallbackParams are not present (#81711)

`rootParams` was erroring if used in a `'prerender-client'`, but only if
we had `fallbackRouteParams`. this is an edge case, but it is
technically possible to hit if our compiler checks for using
`rootParams` in client code are bypassed.

i've also had to split `PrerenderStoreModern` into two types instead of
having `type: 'prerender' | 'prerender-client'`. otherwise, typescript
would think that the `case 'prerender'` branch wasn't enough to
eliminate `PrerenderStoreModern` even though we already handled the
`prerender-client` case at the top. this made the `prerenderStore
satisfies never` assertion at the bottom fail.

This is a bit tricky to explain, so i'm including a [TS playground
repro](https://www.typescriptlang.org/play/?#code/C4TwDgpgBAysD2AnCAZCBzAhgYxFAvFAN5SiQBcUA5GMsgHYAmEiAtADYY4hUC+AUGWhwkEALLxmiegWKlwESjToQmLKlAA+1Wi1VTW2dgEtVwDQKGwEyWSORosuLddESp9fvwgAPMEmAoADMAV3psYGN4GQBnFgA3FgB5enYQABUAC2N6dAAKGJtFV2QASkpCxBz0Yn4oeqhjIKgCooA6K3wunRU1NiNTenNS2oax0kzEeAB3KHoIWYBRRCnEPKoAOXhAzHZ2GYhGRpkBsypSuoaBMZjp42BsTJbC0Q6FEaJL8agAeh+obCYOI9PR9QwmM5fcZ-KAAPSgAGFMPQqIFGPAJsYYlBMnooJgsDkADRQdIwKAsVbYu7AJ4AA3SCmoACJdAwDKchsyNFi5tsAfAALZgTCITAAI04pAxViorN6Bk4ThAzJc8tBUm5bTpULGMLy4oggJCwOm0EeRoA1ocJphAoagqIAIQXXUNQHA5Qa9SUT7fb7IYAhaRQZkAdQgVFsOXxUEFkhYMjZ+hYzLd9Wu-o90C97JYHC4uCovvT40DwZk4cj0ZkmCgSu4UGTfTT-qgme+zCCmBC7GAJbbNyKUBidqxQVM2PmiUQpb1-1hAH45w0YW11+KQoEyZj6JbsXSXsg6QDkSPInsoIbY-ZxAmQ7jbBBEjJafAQugnmaqIkKSZBTkdo2uK2xPP4MQxMYkrmkCEDYqWHbtvwAhAA)

i'm guessing that `type: 'prerender' | 'prerender-client'` is more
complex than a normal discriminator and TS was getting confused, which
is why having two separate types solves it.",25,10,35,1,218,140,0.64
5608f19a4d4bcf202fbd7df8d5b7dd7d4e4f2b3f,huozhi,2025-07-16 13:36:37+00:00,[lint] keep lint-stage use faster linting (#81710),1,1,2,24,1020,896,0.88
ea2157cd41eb86c58047e0bbf3afeb7a213d93fc,eps1lon,2025-07-16 12:58:22+00:00,[turbopack] Clear chunk cache on HMR instead of creating new `next-server` VM (#81664),2,20,22,32,540,451,0.84
43b64ccdb53eba5589a36b657aa9935dd2367750,unstubbable,2025-07-16 12:12:03+00:00,"Ignore pending revalidations during prerendering (#81621)

When reading a cache entry, we usually check its tags against the recently revalidated tags, and dismiss it, if it has any of those tags. However, this is only needed during dynamic requests, specifically during the rendering that follows a revalidating server action.

During the prerender validation in dev mode, we should not discard the cache entries based on the pending revalidation. The concurrently running dynamic rendering will handle discarding and recreating those cache entries. During build-time prerendering, there will never be any pending revalidated tags.

This fixes a bug where a different value was rendered when revalidating with a server action and then reloading the page afterwards (or triggering another unrelated revalidating server action).",33,12,45,25,331,294,0.89
7efeae3de8f1edee9a20f8e17a5306388b798b48,nextjs-bot,2025-07-16 12:06:11+00:00,Upgrade React from `2f0e7e57-20250715` to `d85ec5f5-20250716` (#81708),658,709,1367,38,0,0,
4430409206e3d634dbc075253277e34912e24bcf,unstubbable,2025-07-16 11:33:39+00:00,"Discard prerendered route handler data from FS cache after revalidation (#81611)

After having revalidated a prerendered route handler, on the subsequent request we must discard the prerendered data from the file system cache, as we already do for pages and fetch caches as well.

> [!NOTE]  
> This PR is best reviewed with hidden whitespace changes.",124,131,255,25,331,294,0.89
08209b9bf46a05d625292b9c0d7150dd61a8c483,unstubbable,2025-07-16 11:33:20+00:00,"Improve error message for sync server functions (#81705)

When a server action or `'use cache'` function is defined as a
synchronous function, the error message now only marks the function name
for better clarity. Previously, the entire function body was marked,
which looks fine in small test fixtures, but is pretty messy for larger
functions, both in the terminal as well as in the dev error overlay.

For anonymous default exports we can't optimize this and are still
marking the entire function body, as we don't have a name to refer to.

closes NAR-165",31,25,56,25,331,294,0.89
152dc29c9441efe12709d9addfcbf322cc053541,unstubbable,2025-07-16 11:31:06+00:00,"Delete unused `renderToString` function (#81707)

The `renderToString` function's last usage was removed in #78495.",0,15,15,25,331,294,0.89
91584bf1a26f3889dd8192869e215d65bee6d327,nextjs-bot,2025-07-16 11:22:15+00:00,"Upgrade React from `97cdd5d3-20250710` to `2f0e7e57-20250715` (#81678)

Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>",499,415,914,38,0,0,
86562e1213f3a3230953c0e86bbe8291af3fcc7a,eps1lon,2025-07-16 11:18:25+00:00,[turbopack] Return cached Promise from `__turbopack_load_by_url__ ` (#81663),142,82,224,32,540,451,0.84
af74b4a36f32d3037d002570800e75217e2199b4,unstubbable,2025-07-16 11:05:25+00:00,"Include `use-cache` test suite in the Cache Components tests (#81610)

We're splitting the test app routes between two root layouts, one for (partially) static pages that does not wrap its children in a Suspense boundary, and one for dynamic pages that adds a Suspense boundary above `body`, which opts those pages into fully dynamic rendering.

Two tests are expected to fail for now, because they revealed bugs related to revalidation, which will be fixed in follow-up PRs:
- https://github.com/vercel/next.js/pull/81611
- https://github.com/vercel/next.js/pull/81621

closes NAR-171",122,72,194,25,331,294,0.89
d8fdb6ffa85269a9696ca905a5ee39d8ae737701,unstubbable,2025-07-16 10:13:54+00:00,"Simplify running test apps locally with `ppr` or `dynamicIO` enabled (#81668)

We want to respect the `__NEXT_EXPERIMENTAL_PPR` and `__NEXT_EXPERIMENTAL_CACHE_COMPONENTS` environment variables in the test apps, so that we can run them locally with these features enabled without needing to modify the config files.

So we're removing the requirement that `__NEXT_TEST_MODE` needs to be set at the same time. Usually you don't want to set this variable locally because it also changes other behavior in a few places.

This really has no downside, because it was already possible for users to set both variables and affect the flags, and now this can be done with a single variable. It allows us to keep the noise out of the test app's next config files.

We're also moving the assignments from the default config into `enforceExperimentalFeatures` to get the nice output when printing the experimental features in the CLI.",367,140,507,25,331,294,0.89
386afcd423999915958c237f6c4532f150463b18,prateekkish,2025-07-16 07:22:07+00:00,"docs: Update redirects i18n documentation for App Router (#81347)

### What?
Updated the documentation to clarify that App Router requires manual
locale handling through dynamic route segments and middleware, with
examples showing how to implement i18n redirects correctly.

### Why?
The App Router doesn't use the i18n configuration in next.config.js like
the Pages Router does.

Closes NEXT-
Fixes #81227

---------

Co-authored-by: Joseph <joseph.chamochumbi@vercel.com>
Co-authored-by: Joseph <sephxd1234@gmail.com>",39,4,43,1,1,1,1.0
01e1854f2a4334fb830c132bfeab85872ad61ddf,huozhi,2025-07-16 02:57:27+00:00,"[segment explorer] remove dev panel ui flag (#81670)

Remove panel ui flag

---------

Co-authored-by: RobPruzan <rapruzan@buffalo.edu>",24,36,60,24,1020,896,0.88
3c38722a1ef6265fef9a3e32e4721872843807aa,huozhi,2025-07-16 00:46:38+00:00,[metadata] replace for initial body icon case (#81688),90,16,106,24,1020,896,0.88
7bcef6872d4ee6afb396050184f93d5902d2f969,ztanner,2025-07-15 23:58:47+00:00,"upgrade to path-to-regexp@6.3.0 (#80123)

Upgrades `path-to-regexp` to address backing concerns from
`CVE-2024-45296`. As a result, this requires some additional
pre-processing on the paths we generate for interception routes, to
ensure we pass a compliant value into `path-to-regexp`.",298,28,326,7,633,579,0.91
8b7f4c50d19ccfce10837f6ca5a0e952e8ae57e0,ijjk,2025-07-15 23:51:16+00:00,"Update NextAdapter type and re-export (#81692)

Just fixes up the type and re-exports it so it can be imported directly
from `next`. Also fixes test file not being type checked which didn't
catch missing optional fields.",7,4,11,13,1020,947,0.93
d884398da6c55f662115cd1b3ff19e72fb6bb8d5,wyattjoh,2025-07-15 23:32:31+00:00,"feat(build): optimize filterUniqueParamsCombinations to generate sub-combinations (#81321)

### What?

Optimizes the `generateParamPrefixCombinations` function (previously
`filterUniqueRootParamsCombinations`) to generate all unique
sub-combinations of route parameters while ensuring partial shells
include complete sets of root parameters.

### Why?

The previous implementation only generated combinations at the root
parameter level, which was insufficient for PPR (Partial Prerendering)
shells. PPR needs all possible prefix combinations of route parameters
to create effective shells for nested routes. For example, for a route
`/[lang]/[region]/[slug]`, we need shells for:
- `/[lang]/[region]` (complete root params)
- `/[lang]/[region]/[slug]` (full route)

Without proper sub-combinations, nested routes couldn't benefit from PPR
shell optimization, leading to performance degradation.

### How?

- Renamed `filterUniqueRootParamsCombinations` to
`generateParamPrefixCombinations` to better reflect its expanded
functionality
- Added logic to generate all prefix combinations of route parameters,
not just root-level combinations
- Implemented root parameter validation to ensure partial shells only
include complete sets of root parameters
- Added comprehensive test coverage for edge cases including undefined
parameters, missing keys, and parameter collisions
- Optimized the algorithm to skip invalid combinations early when root
parameters are incomplete

The function now generates prefix combinations systematically while
maintaining backward compatibility and preventing invalid partial
routes.

NAR-159

---------

Co-authored-by: Hendrik Liebau <mail@hendrik-liebau.de>",1382,126,1508,6,307,243,0.79
2b3728f901a5a189fc09f23353b5c94747739049,styfle,2025-07-15 23:26:23+00:00,"feat(next/image): warn when `images.qualities` is undefined (#81690)

Add a warning to Next.js 15.5 to prepare for Next.js 16 when
`images.qualities` is undefined and the user attempted to use set
`quality` prop to something other than 75.",128,1,129,3,566,521,0.92
8b3c93379b58f210f81d852674808a3bb6fbecfa,nextjs-bot,2025-07-15 23:25:08+00:00,v15.4.2-canary.1,34,34,68,38,0,0,
43b4364f7cbf1b9578a0b2cf4676a7e7de282d98,bgw,2025-07-15 23:00:32+00:00,"Turbopack: Generalize `ImportedBinding` effect creation to avoid as much special-casing of SimpleAssignTarget (#81653)

There was some logic here that checked for the existence of `SimpleAssignTarget`, and using that to bail out of `visit_ident`. That doesn't scale well to pattern assignments, but it turns out that we don't need to bail out, we just need to fix the codegen.

Without this, https://github.com/vercel/next.js/pull/81654 breaks the test cases.",72,89,161,11,335,315,0.94
8659d47c0995f004550c9e521dd4e180b5c23f45,hf,2025-07-15 22:31:46+00:00,"chore: Update `with-supabase` example to use `getClaims()` (#81383)

Updates the `with-supabase` example to use the new and much faster (when
project is configured with asymmetric JWT support)
`supabase.auth.getClaims()` function instead of `getUser()`.

---------

Co-authored-by: Benjamin Woodruff <benjamin.woodruff@vercel.com>",26,18,44,1,1,1,1.0
d0ea7129747a045450c646cc0e4ea4f84348bd32,Anas-github-acc,2025-07-15 22:15:05+00:00,"fix patch-next by adding missing script (#81430)

The `patch-next.cjs` script is failing because two of its dependencies,
`pack-util` and `build-native`, are missing their CommonJS versions,
which are required for compatibility with the current Node.js
environment. To fix this, i added the transpiled `pack-util.js` and
`build-native.js` files.

---------

Co-authored-by: graphite-app[bot] <96075541+graphite-app[bot]@users.noreply.github.com>
Co-authored-by: Benjamin Woodruff <benjamin.woodruff@vercel.com>",182,81,263,1,1,1,1.0
e210360bb9d66870f69d35512a3d317cb68147ec,ijjk,2025-07-15 21:55:42+00:00,"Add create release branch workflow (#81687)

This creates a new workflow to create a release branch and apply the
necessary configs to allow releasing from that branch as this is quite
common for backports.",206,0,206,13,1020,947,0.93
3c2a1959047f668dfffcd6344aeaa4acb531eccf,unstubbable,2025-07-15 20:25:32+00:00,"Also enforce experimental features when there's no next config file (#81679)

When running `next build --debug-prerender`, we also want to set the experimental features even if there is no next.config.js file present.

This PR also fixes the `cloneObject` function to better handle nested optional object properties, and we're now also freezing and cloning the default config before applying changes to it.

> [!NOTE]  
> This PR is best reviewed with hidden whitespace changes.",341,202,543,25,331,294,0.89
1a0c4d089739800c34f825c85d27bf79741f7c0b,SyMind,2025-07-15 19:53:01+00:00,"perf: memorize exclude function in webpack config (#81525)

During JavaScript profiling, I identified repeated calls to the exclude
function in the webpack configuration and implemented caching to
optimize it.

<img width=""2248"" height=""772"" alt=""image""
src=""https://github.com/user-attachments/assets/1fdb03f3-2904-4195-a538-7b1f4646f0f2""
/>

I tested the performance using the
[chakra-ui-docs](https://github.com/SyMind/chakra-ui-docs) repository
with the following steps:
  1. Execute `pnpm run dev`
  2. Wait for the server to be ready (indicated by the 'Ready' message)
  3. Run `curl` on the root endpoint (`/`)

| | Webpack | Rspack |
|-|-|-|
|After| Compiled / in 8.3s (2682 modules) | Compiled / in 2.3s (2650
modules) |
|Before| Compiled / in 7.8s (2682 modules) | Compiled / in 1983ms (2650
modules) |

---------

Co-authored-by: Benjamin Woodruff <github@benjam.info>",17,13,30,2,23,18,0.78
c432d07a595b5edbd6d2ce6c50a065e7115e1622,Han5991,2025-07-15 19:29:26+00:00,"Fix before interactive incorrectly render css (#81146)

Fixing a bug

  - Related issues linked using fixes #81130
- Tests added. See:
https://github.com/vercel/next.js/blob/canary/contributing/core/testing.md#writing-tests-for-nextjs
- Errors have a helpful link attached, see
https://github.com/vercel/next.js/blob/canary/contributing.md

  What?

This PR fixes a bug where Next.js Script components with
strategy=""beforeInteractive"" incorrectly render classname attribute
instead of the HTML standard class attribute.

  Why?

The beforeInteractive script strategy in App Router bypassed the
existing setAttributesFromProps utility function that properly maps
React prop names to DOM attribute names. This caused className props to
be directly set as classname attributes in the HTML, which is
non-standard and breaks CSS styling.

  Before (broken):
```
  <script classname=""example-class"" id=""example"">...</script>
```
  After (fixed):
```
  <script class=""example-class"" id=""example"">...</script>
```
  How?

1. Identified the root cause: In
/packages/next/src/client/app-bootstrap.ts, the loadScriptsInSequence
function manually set attributes using a simple loop that didn't handle
DOM attribute name mapping.
  2. Applied the fix:
    - Imported the existing setAttributesFromProps utility function
- Replaced the manual attribute setting loop with the proper utility
function call
    - This ensures className → class mapping works correctly
3. Added comprehensive tests: Created e2e tests in
/test/e2e/app-dir/script-before-interactive/ that verify:
    - Single scripts render with correct class attribute
    - Multiple scripts work correctly
    - Script execution remains unaffected
    - Scripts are properly placed in document head

  Code changes:
```
  // Before (buggy)
  if (props) {
    for (const key in props) {
      if (key !== 'children') {
        el.setAttribute(key, props[key])  // ❌ className becomes classname
      }
    }
  }
```
  // After (fixed)  
```
  if (props) {
    setAttributesFromProps(el, props)  // ✅ className becomes class
  }
```
  Fixes #81130

---------

Co-authored-by: JJ Kasper <jj@jjsweb.site>",136,5,141,1,2,1,0.5
a0d15704e1c7f5571c1435bf9536592b33690cbd,ijjk,2025-07-15 19:24:23+00:00,"Ensure custom NextServer config is honored (#81681)

This ensures if using NextServer or a custom-server directly we honor
the custom config passed in correctly.",66,3,69,13,1020,947,0.93
f44efa807851c5d0a74c8bb2d9cda673aee753da,vercel-release-bot,2025-07-15 17:46:41+00:00,"Update Rspack production test manifest (#81661)

This auto-generated PR updates the production integration test manifest used when testing Rspack.",33,2,35,18,0,0,
899d993b29063a8586789877c71c5973ecb009aa,vercel-release-bot,2025-07-15 17:38:43+00:00,"Update Rspack development test manifest (#81660)

This auto-generated PR updates the development integration test manifest used when testing Rspack.",37,7,44,18,0,0,
5a7cec1e570d73699a7e6c31790b46eb5c1706d6,skt-t1-byungi,2025-07-15 17:36:54+00:00,"fix(router): Prevent redirect loop on root data requests with basePath (#81096)

Fixes #64910

This PR resolves an issue where a client-side navigation to the root
page fails when both `basePath` and `middleware` are active. This is
caused by an incorrect redirect loop on the `/_next/data` request.

The sequence of events is as follows:
1. Next.js enforces its `trailingSlash: false` policy by adding an
internal redirect from `{basePath}/` to `{basePath}`.
2. For middleware to be invoked correctly, a data request for the root
page is normalized to `/`.
3. The path is then re-joined with the `basePath` using
`path.posix.join(config.basePath, '/')`, which incorrectly results in
`{basePath}/`.
4. This malformed path triggers the redirect from step 1, causing the
data fetch to fail with a 308 status code and resulting in empty
`pageProps`.

This fix isolates the root path (`/`) during path normalization to
prevent an extra trailing slash from being added. By ensuring the path
resolves to `{basePath}` instead of `{basePath}/`, the redirect loop is
avoided.

The change correctly handles the root path while leaving the logic for
all other paths untouched.

---------

Co-authored-by: JJ Kasper <jj@jjsweb.site>",28,1,29,1,1,1,1.0
16011fe88a09eff4914682a9d535bc50e2b692da,mischnic,2025-07-15 16:33:10+00:00,Fix build-native.ts on Windows (#81673),2,1,3,34,340,285,0.84
465c2218356371ef217ae3fa82f663efef4a3253,unstubbable,2025-07-15 16:14:42+00:00,"Improve reliability of owner stacks for async I/O errors (#81501)

When running the following test isolated, and not as part of the full
test suite, the owner stacks for async I/O errors were missing the
top-most stack frame that's pointing at the `fetch` call.

```
pnpm test-dev test/e2e/app-dir/dynamic-io-errors/dynamic-io-errors.test.ts -t ""should show a collapsed redbox with two errors""
```

The same could be reproduced with `pnpm next dev
test/e2e/app-dir/dynamic-io-errors/fixtures/default` at
http://localhost:3000/dynamic-root, unless http://localhost:3000/static
was visited first.

The likely reason for that is that React's async I/O tracking was
recently optimized for performance reasons in facebook/react#33736 and
facebook/react#33737.

We can help React a bit with the tracking by explicitly awaiting our
`makeHangingPromise` calls. With this fix, the case from above reliably
works in isolation.",17,15,32,25,331,294,0.89
92a9d2840db6521190f28755c3905c3000caeb4b,ankur-arch,2025-07-15 15:48:35+00:00,"Add Prisma ORM example to Next.js examples (#75290)

- A Next.js starter app using [Prisma
Postgres](https://www.prisma.io/postgres) and Prisma ORM

This PR adds a new example demonstrating how to integrate Prisma ORM
with a Next.js application. The example includes:

- Setup instructions for Prisma Postgres
- Example models and queries
- Basic CRUD operations using Prisma

---------

Co-authored-by: Nikolas <nikolas.burk@gmail.com>
Co-authored-by: Alex Martin <alex.martin@vercel.com>
Co-authored-by: JJ Kasper <jj@jjsweb.site>",1291,0,1291,1,1,1,1.0
90c71b4608bd3ef8776f31fc6c6bd7fb901c7aeb,styfle,2025-07-15 14:22:21+00:00,"chore(bot): update comment (#81672)

The stale bot comment says 2 years even though its 1.5 years (or 545
days to be precise).

The exact amount of time is not as important in this message so we can
remove it to avoid drift between the message and actual stale time.",2,2,4,3,566,521,0.92
409b14c92e028cf38d9446f1d40aec116b06d0f6,delbaoliveira,2025-07-15 12:37:25+00:00,"Docs: POC (#81419)

Closes: 

-
https://linear.app/vercel/issue/DOC-4841/setup-minimum-working-app-in-the-nextjs-repo
- https://linear.app/vercel/issue/DOC-4845/add-community-readme

---------

Co-authored-by: Joseph Chamochumbi <joseph.chamochumbi@vercel.com>",7047,0,7047,2,278,256,0.92
5c090e81a97d9af54e8ec95b21d5c8d06787462b,huozhi,2025-07-15 08:58:08+00:00,"[segment explorer] fix content overflow styling (#81649)

* The bottom reset button should cover the content
* No need for transparent button background

| After | Before |
|:--|:--|
| <video src=""https://github.com/user-attachments/assets/598a6474-315a-4ed5-819b-dd49306125ef""> | <video src=""https://github.com/user-attachments/assets/9d7ba02c-033e-43b7-a65c-6764e903e10e""> |",1,2,3,24,1020,896,0.88
f1b88b4cfa63a6560a04baa209c09065c419969c,mischnic,2025-07-15 07:02:58+00:00,"Turbopack: content-hash PageLoaderAsset (#81450)

Closes PACK-5035

- [x] Content hash chunks such as `static/chunks/pages/404.js` with  `static/chunks/19a8e82e8f.js` instead
- [x] Including the actual path in `_buildManifest.js`
- [x] Update tests to check the path specified in the manifest",330,119,449,34,340,285,0.84
e54a837ebaad5c8f08291dc5f202e74e2886a57d,RobPruzan,2025-07-15 04:47:40+00:00,"feat: new detachable panel UI (#81483)

This PR updates the devtool overlay to use a new detachable panel based
system for rendering content. Each panel can be configured to:
- drag
- resize
- close on click outside
- have min/max sizes if resizable, size if fixed


https://github.com/user-attachments/assets/982ecee3-5ef0-424e-8fcc-4c54dfadcb25",2134,2353,4487,7,14,9,0.64
0a220665f5ddd4104e42ccb5db3e1166f1970c1b,gnoff,2025-07-15 03:28:25+00:00,"[dynamicIO] Do not use `React.unstable_postpone()` (#81652)

dynamicIO does not rely on Postponing for any prerender reason. This is
an experimental only API with no clear path to stailization. To make
dynamicIO supportable with stable React we should eliminate use of this
API.

This change replaces the postpone value when aborting the resume of a
prerender we want to complete even when it had a postponed state with
the already existing BailoutToCSRError error subclass.

We already have plumbing in place to ignore this error on the client
when hydrating which is exactly what we want to achieve here.",8,12,20,7,162,136,0.84
af42dadd69070c6d34d0f711697fd0fc76775325,unstubbable,2025-07-15 00:13:32+00:00,Allow `beforePageLoad` to be async (#81650),11,10,21,25,331,294,0.89
3c6591c1b2c2071f195a1677c4c110552e155584,gnoff,2025-07-15 00:03:51+00:00,"[dynamicIO] use RSC dynamicness to control partial vs complete PPR result (#81627)

Historically anything dynamic in a prerender would result in a partially
static shell that resumes at runtime. With this change, now partial
shells are only possible when RSC is dynamic. If your client prerender
has any IO but your RSC tree was entirely prerenderable then Next.js
will produce a complete static result and not perform a resume at
runtime. This simplifies how you reason about what will and wil not make
a static page. It also means that anything dynamic in the client layer
will only render in browser.

---------

Co-authored-by: Hendrik Liebau <mail@hendrik-liebau.de>",83,4,87,7,162,136,0.84
17675a2f276e47828b985529270a9d5a7cc6d4c0,vercel-release-bot,2025-07-14 23:50:25+00:00,"Update Rspack development test manifest (#81603)

This auto-generated PR updates the development integration test manifest used when testing Rspack.",22,1,23,18,0,0,
a3d875e0ce5dcee644d93795efe4e9be93319015,unstubbable,2025-07-14 23:42:40+00:00,Enable `@typescript-eslint/switch-exhaustiveness-check` rule (#81583),212,259,471,25,331,294,0.89
6430cbc97680e0df6943735f3f7f00ae655c22fc,nextjs-bot,2025-07-14 23:24:41+00:00,v15.4.2-canary.0,34,34,68,38,0,0,
1c1d9b5fdcebc7b0ff6e1b3ce91954d3c50e5c64,unstubbable,2025-07-14 21:49:57+00:00,"Use and enforce exhaustive switch statements for work unit store (#81577)

This allows us to introduce more work unit store types with confidence.

closes NAR-203",1482,969,2451,25,331,294,0.89
079c06d3c3421c23080dffc6b3c46859f6438212,nextjs-bot,2025-07-14 21:26:55+00:00,v15.4.1,34,34,68,38,0,0,
7ad467409b67691ae4f5dc4dc47f1a247c4ba988,nextjs-bot,2025-07-14 21:13:16+00:00,v15.4.0,34,34,68,38,0,0,
c1fa79be58eb1bc3c08ad834d934a62e91c6964b,nextjs-bot,2025-07-14 20:07:38+00:00,v15.4.0-canary.130,34,34,68,38,0,0,
27a271bd68f8759b0e4cdae04c1a3533233a777e,lukesandberg,2025-07-14 20:00:39+00:00,"[turbopack] Rename `traverse_edges_from_entries_topological` to `traverse_edges_from_entries_dfs` (#81481)

## Rename `traverse_edges_from_entries_topological` to `traverse_edges_from_entries_dfs`

This PR renames the `traverse_edges_from_entries_topological` method to `traverse_edges_from_entries_dfs` to better reflect its actual behavior. The method performs a depth-first search traversal rather than a topological sort.

The PR also:
- Updates the method documentation to clarify that it performs a DFS traversal
- Makes `ClientReferenceMapType` derive `Copy` for better ergonomics
- Removes unnecessary `ResolvedVc::upcast` call in client references mapping
- Renames some variables for clarity (`actions` → `client_references`)
- Removes unused `module_graph_for_entries` function
- Adds some tests for the traversal routine.  Not very interesting for this traversal but should make it easier to test future traversals.

These changes improve code clarity and correctness by ensuring the method name accurately describes its behavior.",334,74,408,7,83,69,0.83
a1339ec6b05ecbebd3cfd0fe5115f63e069ba7b4,bgw,2025-07-14 19:39:09+00:00,"Turbopack: Clean up some of the logic in visit_assign_expr (#81636)

It should be equivalent, but it's clearer that the LHS is always visited",10,16,26,11,335,315,0.94
d48daff8c6efd73f7e546ae4da584b1cb1dcafc8,styfle,2025-07-14 19:24:13+00:00,"fix(next/image): bump sharp to 0.34.3 (#81556)

This fixes a handful of issues including:

- https://github.com/lovell/sharp/issues/4393
- https://github.com/lovell/sharp/issues/4382
- https://github.com/lovell/sharp/issues/4398
- https://github.com/lovell/sharp/issues/4374
- https://github.com/lovell/sharp/issues/4417

See full list of changes
https://github.com/lovell/sharp/compare/v0.34.1...v0.34.3",141,112,253,3,566,521,0.92
de52c00b930f6b791604ff77df959b92aa416d4c,bgw,2025-07-14 19:03:56+00:00,"Turbopack: Fix turbopack-swc-ast-explorer with multi-line inputs (#81635)

Previously this was only parsing the first line of input

```
cargo run -p swc-ast-explorer <turbopack/crates/turbopack-tests/tests/snapshot/comptime/assignment/input/index.js | less
```",5,2,7,11,335,315,0.94
b5f2517a155b8f482c06317f0f6fb4b11530dc91,huozhi,2025-07-14 18:05:37+00:00,[segment explorer] fix boundary trigger state (#81623),16,43,59,24,1020,896,0.88
d04d65b5e69e8b60823de0e80162ff4e93445fe4,huozhi,2025-07-14 18:05:07+00:00,[segment explorer] fix route url is missing cases (#81622),70,25,95,24,1020,896,0.88
1758c3c4427480274211f9dd769cec305b274f62,icyJoseph,2025-07-14 16:56:33+00:00,"docs: onInvalidate router.prefetch (#81609)

Closes:
[DOC-4741](https://linear.app/vercel/issue/DOC-4741/document-oninvalidate-for-userouter-hook)",7,5,12,7,70,54,0.77
d9bcc4a6d354898dba75a1377087bd6a0da8491f,gaojude,2025-07-14 16:34:51+00:00,"[Segment Cache] Fix isHeadPartial logic (#81566)

This PR fixed two typos that affected isHeadPartial logic.",2,2,4,2,134,108,0.81
fcfae6eba077e5eb67775eec7ddfbe647b4423e6,delbaoliveira,2025-07-14 16:33:22+00:00,"15.4 Docs: Minor feature updates (#81618)

Updates the docs to include the new options in 15.4. 

- `prefetch=""auto""` option: https://github.com/vercel/next.js/pull/78689
- `next build` new `--debug-prerender option`:
https://github.com/vercel/next.js/pull/80667

---------

Co-authored-by: graphite-app[bot] <96075541+graphite-app[bot]@users.noreply.github.com>",31,1,32,2,278,256,0.92
ab24f6222a7cb7e37809af6b96432970b655c3dd,eps1lon,2025-07-14 15:54:09+00:00,[sourcemaps] Don't check for vendor chunks when Node.js 18 is used (#81619),15,2,17,32,540,451,0.84
8f060ea25ae201b0e69079ab975b48a13aeed6ca,huozhi,2025-07-14 15:45:48+00:00,"[test] improve segment explorer tests snapshot (#81616)

Format line format: `<segment> [<files,>]`

This will help visualize the rendered segment explorer panel easier by checking the snapshot. e.g.

```
app/ [layout.tsx]
parallel-routes/ [layout.tsx, page.tsx]
@bar/ [layout.tsx, page.tsx]
@foo/ [layout.tsx, page.tsx]
```",83,146,229,24,1020,896,0.88
7d474930a9445b0f8403f68edfdc8c992ce8b93e,sokra,2025-07-14 15:00:42+00:00,"Turbopack: fix hanging problem with reexport cycles (#81620)

### What?

Fix a hanging compilation in a specific case when reexports modules in a cycle.

Fix reported issues for tree shaken modules",49,17,66,12,957,847,0.89
2368e1c3d271dda2674458c9903ff7cc4bec21a4,eps1lon,2025-07-14 09:54:47+00:00,Augment React types internally instead of overwriting them (#81561),81,141,222,32,540,451,0.84
a7a42b389d5568fb699a5533e129a5b43d2174f4,eps1lon,2025-07-14 09:41:16+00:00,Dim console logs from prospective prerender in dev (#81515),280,0,280,32,540,451,0.84
4618e3d902d906fceba981c54db29ab331689a52,eps1lon,2025-07-14 09:41:04+00:00,Hide <anonymous> stackframes if sandwiched between two ignore-listed frames (#81067),703,97,800,32,540,451,0.84
74be505943ad3cf73d9ee95b36fa5da89130a43f,icyJoseph,2025-07-14 07:36:55+00:00,"Update help link for inlined use server in client components (#81495)

Partially Closes:
https://linear.app/vercel/issue/DOC-4854/server-actions-v14-and-v13-links",2,2,4,7,70,54,0.77
ee4d8e6586576527d80d9a0dca7e8daec05d06de,nextjs-bot,2025-07-13 23:25:00+00:00,v15.4.0-canary.129,34,34,68,38,0,0,
4e2b44a977864526312327ba866ac0c77885ba8d,unstubbable,2025-07-13 19:26:04+00:00,"Temporarily disable failing `fallback-shells` deploy test (#81593)

Something may have changed in infra that causes a fallback shell
revalidation instead of the expected route shell revalidation. Until
this is resolved we disable the deploy test to unblock.",20,16,36,25,331,294,0.89
9c980c0179bedc9087a85e9d2e1324d4dad74465,nextjs-bot,2025-07-12 23:25:14+00:00,v15.4.0-canary.128,34,34,68,38,0,0,
0c9355d36eaa853cb402a5a7c8312c9ece2b865a,RobPruzan,2025-07-12 22:06:34+00:00,fix: revert focus trap dependency change (#81571),2,2,4,7,14,9,0.64
0cf373a5857eec1ad4adca213aa8d86dc7d43e80,ztanner,2025-07-12 17:38:37+00:00,"add flag to opt into smooth scroll detection & add warning (#81563)

**What:**
`layout-router` currently forces style recalculation on every navigation by manipulating the `scroll-behavior` CSS property on the `<html>` element. This would impact most navigations, even though most don't use smooth scrolling

**Why:**
To prevent smooth scrolling during router navigation (which can feel janky), Next.js temporarily resets `scroll-behavior` to `auto`, then restores the original value (#40642). While this solves the UX issue, it causes performance overhead for the vast majority of users who don't have smooth scrolling configured.

**How:**
This PR introduces an optimization that checks for a `data-scroll-behavior=""smooth""` attribute before manipulating styles. Only users who explicitly opt into smooth scrolling will experience the style recalculation.

- The existing behavior is preserved by default
- Opt-in to the new behavior by setting `experimental.optimizeRouterScrolling: true` in Next.js config
- When smooth-scroll is detected on the document, a development warning is logged to notify that the default behavior will be changing in an upcoming major.",762,0,762,7,633,579,0.91
9a6f1bd429d413b42e1e3033ab7bcfe35f62e0db,ztanner,2025-07-12 17:20:41+00:00,"rename `handleSmoothScroll` util (#81546)

This function has a confusing name because it doesn't do any sort of smooth scroll handling or behavior, it just resets smooth scroll handling on the document before performing a router transition.  This attempts to rename the function to be more accurate to what it's doing.",8,8,16,7,633,579,0.91
be7b3a64fab12ddb5bb233d384e062125c343306,nextjs-bot,2025-07-11 23:24:47+00:00,v15.4.0-canary.127,34,34,68,38,0,0,
145d7613b621369afa7ddc0a05ed3ebecda4b624,RobPruzan,2025-07-11 21:08:22+00:00,"fix: update useEffect closure when menu is truly mounted (#81531)

Previously we mounted event handlers on the the menu's
[`ownerDocument`](https://developer.mozilla.org/en-US/docs/Web/API/Node/ownerDocument)
to listen for clicks outside the menu. This causes a bug where the ref
the useEffect captures is not set yet, and when it is set the effect
does not try to run again. The fix is to derive active state from the
true state tracking if the menu is mounted, not if the menu __will be
open__

### Before

https://github.com/user-attachments/assets/d88f9b46-2203-45f3-a184-46db39584679

### After


https://github.com/user-attachments/assets/57a0f68f-8d46-41ea-b761-222c82e4b6bc",4,4,8,7,14,9,0.64
3be29d88298c12ec313d771a5e7ccbdad55b9b60,nextjs-bot,2025-07-11 21:00:51+00:00,Upgrade React from `96c61b7f-20250709` to `97cdd5d3-20250710` (#81551),7022,4365,11387,38,0,0,
4dd01eea2f852dfc41a955dacae8cbc4510df758,eps1lon,2025-07-11 19:45:49+00:00,[sourcemaps] Properly devirtualize `rsc:` URLs (#81554),125,199,324,32,540,451,0.84
fcadb6846ebbf21ce861abcdd2e00850c0fe5cba,nick20name17,2025-07-11 19:40:04+00:00,"docs: update Page example to use Promise-based params in 05-server-and-client-components.mdx (#81557)

What?
This PR updates the Page component example in
05-server-and-client-components.mdx to use Promise-based params as
recommended in the Next.js 15 documentation.

Why?
Next.js 15 introduced support for async props, allowing the params prop
to be a Promise in Server Components. Updating the documentation ensures
that users follow the latest recommended practices and avoid confusion
when working with dynamic routes in Next.js 15.

How?
- Changed the Page component example to accept params as a Promise and
use await params to destructure the id.
- Updated the type annotation accordingly.",14,4,18,1,2,1,0.5
d7fa64ea3babbcdebabeaae48bbc3da3bb347828,unstubbable,2025-07-11 19:17:40+00:00,"Update eslint and restore `.eslintrc.cli.json` being used for CLI/CI-based linting (#81553)

This will allow us (again) to selectively use type-checked rules
internally, as stipulated in #67689. In a follow-up, we'll likely add
https://typescript-eslint.io/rules/switch-exhaustiveness-check/ as a
first type-checked rule.",167,155,322,25,331,294,0.89
f1b95e04e9ae9fcd85cba20f9291e1519e03acac,ijjk,2025-07-11 18:33:50+00:00,"Update rust-cache action to v1.0.9 (#81555)

Adds a 60s timeout for fetching the cache to avoid this blocking
continuing

x-ref:
https://github.com/ijjk/rust-cache/commit/a34594c450817c9860143c79797a8770c4e587f5",3,3,6,13,1020,947,0.93
d6bc6b055d05bf0861a0b8a216405bec1a2db93e,mischnic,2025-07-11 14:01:59+00:00,"Turbopack: only emit `*.single.css` chunks in dev (#81490)

They are only ever used in dev.

Closes PACK-4767",91,1041,1132,34,340,285,0.84
4bfa2986054db7c58a94b268565960cef8673b7d,eps1lon,2025-07-11 13:55:50+00:00,[test] Use same pnpm in temporary repo directory (#81540),6,1,7,32,540,451,0.84
27250721aa125ec27d03b3111a3e15569ba57983,huozhi,2025-07-11 13:42:57+00:00,[segment explorer] redesign file pills and boundary trigger (#81302),640,219,859,24,1020,896,0.88
f024178135f1e4f468644715e138f05b064fe120,mischnic,2025-07-11 13:07:28+00:00,"Turbopack: fix `@opentelemetry/api` resolve fallback (#81541)

Previously, it tried `[project]/node_modules/@opentelemetry/api` and then fell back to `node_modules/next/dist/compiled/@opentelemetry/api`.

But that doesn't work if the dependency is installed in a monorepo subpackage and should have been resolved from `packages/my-app/node_modules/@opentelemetry/api`.

We already have `fallback_import_map` which is exactly what's needed here.

Closes PACK-5054",41,21,62,34,340,285,0.84
48b2976ed268a78249679a82da43750e190943a1,sokra,2025-07-11 12:34:38+00:00,"Turbopack: add module cost benchmark (#81530)

### What?

Add a benchmark that requires/imports nearly 10k of empty modules.

Measures load and execution time for these modules.

Might also be useful to measure the compile overhead of modules.",414,12,426,12,957,847,0.89
7560398745ed989253920d6f08fba56e11496ca0,icyJoseph,2025-07-11 11:27:55+00:00,"docs: root layout + opengraph-image + cna-eslit vs next lint bootstrap (#81542)

Fixes: https://github.com/vercel/next.js/issues/81529,
https://github.com/vercel/next.js/issues/81352 and
https://github.com/vercel/next.js/issues/78630",11,6,17,7,70,54,0.77
8389b9f7f5f9a4c568725e2dceedfbdc5949c675,mischnic,2025-07-11 09:43:54+00:00,"Turbopack: remove `clone_value` again (#81539)

```
ast-grep run --pattern '$$$X.await?.clone_value()' --rewrite '$$$X.owned().await?' --lang rust -U
```

This was originally removed in #75852, but added again in #80634 for no apparent reason.",297,413,710,34,340,285,0.84
e3a1aba8ed55afe04b0cad6de79e855efc4b1262,mischnic,2025-07-11 09:10:44+00:00,"Turbopack: refactor ReadRef deref + clone to the intended pattern (#81537)

```
ast-grep run --pattern '(*$$$X.await?).clone()' --rewrite '$$$X.owned().await?' --lang rust -U
```",49,32,81,34,340,285,0.84
e53f84b3fbbb4b2ec420eb8d01c30fe49e7e4674,nextjs-bot,2025-07-11 08:22:15+00:00,Upgrade React from `60b5271a-20250709` to `96c61b7f-20250709` (#81505),392,392,784,38,0,0,
72c963503ce8b6804807f1d42f5f726654ca35f8,eps1lon,2025-07-11 07:53:30+00:00,Pass `filterStackFrame` everywhere (#81516),44,61,105,32,540,451,0.84
2f97e3c04ef73466223e863ae4a1473de77a71ed,nextjs-bot,2025-07-11 00:44:06+00:00,v15.4.0-canary.126,34,34,68,38,0,0,
a4a754d01cd1dd1f1d1498a2135c382328537dd0,bgw,2025-07-11 00:38:49+00:00,"fix(CI): On musl/alpine builds, pin llvm to llvm20, add llvm bin directory to path (#81519)

Alpine Edge recently removed `llvm-config` from the PATH:

- 3.22:
https://pkgs.alpinelinux.org/contents?file=llvm-config&path=&name=&branch=v3.22&repo=&arch=x86_64
- Edge:
https://pkgs.alpinelinux.org/contents?file=llvm-config&path=&name=&branch=edge&repo=&arch=x86_64

CI job: https://github.com/vercel/next.js/actions/runs/16208743604

Also, fix a bunch of escaping problems with how we invoke bash inside of
docker...

Co-authored-by: Will Binns-Smith <wbinnssmith@gmail.com>",51,45,96,11,335,315,0.94
5157472d841b06cf58f5e63b38167256fb01f012,nextjs-bot,2025-07-10 23:24:47+00:00,v15.4.0-canary.125,34,34,68,38,0,0,
16c53236a7cafb2dae74656dfdb4127ca4a84241,eps1lon,2025-07-10 22:05:27+00:00,"Configure `url` for responses from patched fetch like the original `response.url` (#81507)

The main config that was missing is enumerability which is relevant for showing properties in the Chrome performance track and inferring shorthands.",15,3,18,32,540,451,0.84
e98773491894e386c7dab016599331a2152221b3,nextjs-bot,2025-07-10 21:34:52+00:00,v15.4.0-canary.124,34,34,68,38,0,0,
df2c2a8cf0b7287bed517153db5758d365b95c6c,eps1lon,2025-07-10 21:29:58+00:00,[sourcemaps] Stop sending stackframes in third-party chunks (#81344),247,46,293,32,540,451,0.84
b0641f12e9fefb7e75049c6ab9477ce2d211e471,eps1lon,2025-07-10 21:21:30+00:00,"[turbopack] Improve internal error message when source map retrieval fails (#81508)

Mostly so that I know which source URL slipped through.",22,10,32,32,540,451,0.84
535ba0676ab5f46a1e6dcc88306914091515f468,unstubbable,2025-07-10 19:45:30+00:00,"Remove unused `syncDynamicExpression` (#81187)

The `syncDynamicExpression` property of `DynamicTrackingState` is not
used anymore.",0,4,4,25,331,294,0.89
bdcb114ddbb7207108d21f142727465d134a2f9e,mischnic,2025-07-10 19:31:06+00:00,"Turbopack: fix export-all-as with name collision (#81510)

`EcmascriptModulePartReference` is a pretty counterintuitive reference. The `part` declares which module should be synthesised on the other side. That doesn't have anything to do with which exports are actually being imported by reference.

This only triggered a bug when these exports here had the same name by coincidence
```js
// reexport.js
export * as Sub from './sub.js' // <--
// sub.js
export const Sub = 123 // <-- 
```",18,13,31,34,340,285,0.84
17a1fd8f4caa56e31ed4541068f19ea4963f3036,sokra,2025-07-10 18:53:23+00:00,"Turbopack: improve debugging features (#81415)

### What?

* add no_fast_stale feature
* nicer hanging messages
* print details on strongly consistent hanging (prints which tasks are
not completing and the chain to them)",140,17,157,12,957,847,0.89
f219487dcdde38b9263e797d452c65f48ee65d39,wyattjoh,2025-07-10 17:48:57+00:00,"feat(test): introduce cache components testing infrastructure (#81394)

### What?

Introduces a testing infrastructure to validate Next.js behavior with
the experimental Cache Components feature (`dynamicIO`) enabled. This PR
adds dedicated CI jobs and configuration to run a subset of existing
tests with Cache Components activated.

This has 271 more disabled test suites than the Legacy PPR test suite
manifest. The expectation is that we will be resolving the test failures
in followup PRs.

### Why?

Cache Components (dynamicIO) represents a significant architectural
change in how Next.js handles component caching and rendering. To ensure
a smooth transition when this becomes the default behavior, we need to:

1. **Validate compatibility** - Ensure existing applications continue to
work correctly when Cache Components is enabled
2. **Identify edge cases** - Catch potential issues early by running
tests in this new mode
3. **Build confidence** - Provide a safety net for the eventual
migration to Cache Components as the default

The manifest-based approach allows us to incrementally expand test
coverage as we fix compatibility issues, rather than attempting to run
all tests at once which would be overwhelming and block progress.

### How?

- **Test manifest** (`test/cache-components-tests-manifest.json`):
Defines which tests to run and tracks known failures that need
addressing
- **CI workflow changes**: Adds three new job groups that mirror
existing test jobs but with Cache Components enabled:
  - `test-cache-components-integration`
  - `test-cache-components-dev` (parallelized across 6 groups)
  - `test-cache-components-prod` (parallelized across 7 groups)
- **Conditional feature activation**: When
`__NEXT_EXPERIMENTAL_CACHE_COMPONENTS=true` is set during testing,
`dynamicIO` is automatically enabled unless explicitly disabled
- **Test adjustments**: Updates error message expectations in tests to
handle the different environment label (""Prerender"" vs ""Server"") when
Cache Components is active

The infrastructure is designed to be temporary and will be removed once
Cache Components becomes the default behavior.

NAR-172",444,1,445,6,307,243,0.79
7c6ac5fd191fc602de348846fbe12798c860bcea,vercel-release-bot,2025-07-10 15:45:23+00:00,"Update Rspack development test manifest (#81484)

This auto-generated PR updates the development integration test manifest
used when testing Rspack.

Co-authored-by: nextjs-bot <it+nextjs-bot@vercel.com>",40,54,94,18,0,0,
efe425070a1749c1c689793733e4995478133748,vercel-release-bot,2025-07-10 15:44:58+00:00,"Update Rspack production test manifest (#81485)

This auto-generated PR updates the production integration test manifest
used when testing Rspack.

Co-authored-by: nextjs-bot <it+nextjs-bot@vercel.com>",54,68,122,18,0,0,
8886e01d1ae51f8f4572713e3e9d143c40e076b1,mischnic,2025-07-10 14:15:51+00:00,"Turbopack: remove duplicate newlines in CSS chunks (#81488)

![Bildschirmfoto 2025-07-10 um 09 50 56](https://github.com/user-attachments/assets/440d8d6e-c612-426d-bf30-46b20a50866e)",69,175,244,34,340,285,0.84
b5ced37273d49cefa447c3e87895fda338f1afe3,unstubbable,2025-07-10 13:48:42+00:00,"Name patched `fetch` function `fetch` (#81499)

This ensures that `fetch` is shown in stack traces (in collapsed
ignore-listed frames), instead of `patched`.",9,10,19,25,331,294,0.89
094253c14c136164212eca856b52b1b218b91a94,icyJoseph,2025-07-10 09:18:22+00:00,"docs: add missing switcher (#81489)

Fixing a couple of code snippets annoyances",6,6,12,7,70,54,0.77
fceb19f9b470980ac7384fde07b8f3cdd0201a73,mischnic,2025-07-10 08:48:36+00:00,"Turbopack: remove CssOptionsContext.minify (#81487)

Use `chunking_context.minify_type().await?` just as JS does",748,293,1041,34,340,285,0.84
c278c8792f78daf2fe6c18d985f1e82ffdce93a8,sokra,2025-07-10 06:47:41+00:00,"Turbopack: make invalidation from chunking context more granular (#81457)

### What?

More granular invalidation to improve incremental builds with Skew Protections (modifies chunking context as it includes `chunk_suffix_path`).",75,95,170,12,957,847,0.89
04f77423296506747f94eab8b62c8e93c667c6f5,icyJoseph,2025-07-10 06:26:37+00:00,"docs: PPR requires canary (#81294)

Fixes: https://github.com/vercel/next.js/issues/81292",1,1,2,7,70,54,0.77
45c48f2944a049770659f47e4abdaef04d36b797,sokra,2025-07-10 06:15:40+00:00,"Turbopack: improve fuzz testing to handle more cases (#81204)

### What?

* Improve fuzz testing to test tasks becoming active and inactive.
* Improve the verify_aggregation_graph feature to panic to allow running
it during fuzz testing",147,44,191,12,957,847,0.89
c6e23a6bb3947486e0df44fb661cb9ea2dc243cd,bgw,2025-07-10 05:22:06+00:00,"Turbopack: Use a factory factory (yes, really) to make hanging detection construction lazier (#81434)

This is an alternate attempt at solving #81424 without macros.

The extra laziness desired can be accomplished with an outer wrapping
`FnOnce`. It's a bit confusing, but I think it causes less problems than
a macro does?

Checked compilation and lints with:

```
cargo clippy --all-targets
cargo clippy --all-targets --features turbo-tasks/hanging_detection
```

// TODO: Find somewhere else to insert a closure so that we can have a
factory factory factory!",195,125,320,11,335,315,0.94
2f43b359dfc0f3afb6fbab03867d3f8a2fa4ea66,bgw,2025-07-10 05:05:52+00:00,"fix(turbopack-tests): Ignore or clean up empty snapshot test directories, fix non-nextest execution testing (#81479)

This PR fixes two bugs I ran into while trying to add a test case.

## Empty Snapshot Tests With No Input

Git tracks files, not directories, so it doesn't track or delete empty directories. This can lead to broken behavior in our test cases:

1. Somebody deletes a test case, git no longer has any files in that directory to track. They push this to canary.
2. Somebody else runs `git pull` and git deletes the files, but leaves behind a directory structure.
3. Later, they run the snapshot tests with `UPDATE=1`. The snapshot test script sees the directory and tries running the test.
4. There's no input files, so it just tries to do a compilation with no files, which of course fails, but generates some output of the failure.
5. We accumulate these broken tests with an output directory but no input directory.

## Tracing Subscriber Init in Execution Tests

- You can only call tracing-subscriber's `init()` once per-process as it sets global state.
- We need each tracing-subscriber to be configured with a different output directory.
- `cargo test` runs multiple tests in parallel inside the same process.

Therefore, our use of `tracing-subscriber` is unfortunately incompatible with `cargo test`.

In contrast, `cargo nextest` runs every test case in an isolated process.

The use of `tracing-subscriber` here is just as a debugging tool (we don't commit these traces), so only enable it when we're running under `cargo nextest`.

I tested running the execution tests with both `cargo test` and `cargo nextest` and observed the trace file was written out only when using `nextest`.",71,101,172,11,335,315,0.94
1781abd7d4a7e48e1fbd1b121d79ae26f8935645,shantanu2307,2025-07-10 04:37:39+00:00,"fix(packages/next-bundle-analyzer): file extension of webpack bundle analyzer report (#81372)

### Issue

When `analyzerMode` is selected as `json`, the bundle analyzer still
emits a `.html` file.

### Fix

Added a check for `analyzerMode` === `json` to determine file extension.

---------

Co-authored-by: graphite-app[bot] <96075541+graphite-app[bot]@users.noreply.github.com>",4,2,6,1,1,1,1.0
b49ed9087df94b7b8f3b4bd6fd80731feb3db9bd,vercel-release-bot,2025-07-10 04:36:22+00:00,"Update Rspack development test manifest (#81440)

This auto-generated PR updates the development integration test manifest used when testing Rspack.",87,16,103,18,0,0,
0827a6e02194d163ba8584df2def58667785c7a9,vercel-release-bot,2025-07-10 04:35:59+00:00,"Update Rspack production test manifest (#81441)

This auto-generated PR updates the production integration test manifest used when testing Rspack.",22,5,27,18,0,0,
5e65f807f637728f97ad44088717071ffe5084b6,nextjs-bot,2025-07-09 23:24:48+00:00,v15.4.0-canary.123,34,34,68,38,0,0,
a8fbbf0245407ebf9b9f75f51e02537124561f47,huozhi,2025-07-09 22:12:55+00:00,[devtool] patch base-ui and migrate segment explorer inline styles (#81474),266,242,508,24,1020,896,0.88
c10d258482a7d56560ee0391fc42ef12840b708f,rortan134,2025-07-09 21:27:20+00:00,"Add @sparticuz/chromium-min to default server externals (#81309)

This package needs to be externalized to have it's wasm dependencies
traced properly for node runtime so this adds it to the default list.",3,0,3,1,2,2,1.0
60ee0dd54a8b3f8be59cf1d457c66219f06e9ea0,sokra,2025-07-09 21:24:14+00:00,"Turbopack: reduce temp allocation during compute_blocks (#81459)

### What?

Reduce allocation size a little bit.",10,9,19,12,957,847,0.89
aa9c6d274e4c3b641d6b222d3061e47641115b3e,nextjs-bot,2025-07-09 20:53:45+00:00,v15.4.0-canary.122,34,34,68,38,0,0,
322e2d9044e5707c525846f46828666a5689a13d,huozhi,2025-07-09 20:44:02+00:00,[devtool] dynamically import segment explorer when enabled (#81473),14,2,16,24,1020,896,0.88
639c731600746c9be4543c9662b540e7d5ef0fb0,rachnac-emeritus,2025-07-09 18:41:14+00:00,"Update image.mdx (#81454)

fix: Input image name and output image name is different and causes
confusion.

---------

Co-authored-by: Joseph <joseph.chamochumbi@vercel.com>",5,5,10,1,1,1,1.0
4e51eb2140119bf29d953f30aadec578abf72076,unstubbable,2025-07-09 18:32:43+00:00,"Support `Uint8Array` bodies when generating cache keys for POST requests (#81465)

When opting into caching a POST request with the `revalidate` option, or
when the Server Components HMR Cache implicitly caches a POST request,
the body of the request is now correctly handled if it is a
`Uint8Array`. Previously, we logged `Failed to generate cache key for
...` and the cache was bypassed.

closes NAR-180",27,29,56,25,331,294,0.89
8f014afff307d22e1d2b2c844b3ed940e645c6db,unstubbable,2025-07-09 18:09:38+00:00,"Consolidate dynamic IO errors test suites into a single fixture (#81451)

Previously, we had separate fixtures for each test case because it's
complicated to assert on build errors when multiple pages have errors.
This meant that running those tests, and especially updating their
snapshots, took forever because each test case needed to be installed
and built separately.

We can consolidate the cases into a single fixture (and test suite) by
leveraging the internal `NEXT_PRIVATE_APP_PATHS` environment variable to
prerender individual pages, along with `--experimental-build-mode
generate`. The compilation is done upfront for all tests using
`--experimental-build-mode compile`. Dev mode also profits, by sharing a
single dev server instance across all tests.

For convenient updating of the snapshots for all modes and bundlers,
we're also adding a small script at
`test/e2e/app-dir/dynamic-io-errors/update-snapshots.sh`.

closes NAR-183",2076,2273,4349,25,331,294,0.89
747ef2babe269885621d552fe980f7f6838aea6b,eps1lon,2025-07-09 17:13:20+00:00,Fail task if one of the parallel ones fails (#81464),25,4,29,32,540,451,0.84
84873e00874e096e6c4951dcf070e8219ed414e5,nextjs-bot,2025-07-09 16:29:30+00:00,v15.4.0-canary.121,34,34,68,38,0,0,
80ad3b8dc4c5722cc2de89d4d3a7895295be80d4,nextjs-bot,2025-07-09 15:58:25+00:00,"Upgrade React from `a7a11657-20250708` to `60b5271a-20250709` (#81463)



Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>",2957,1761,4718,38,0,0,
af6fc0ab691a724007583a9f3fb4c320da96d1a7,sokra,2025-07-09 15:20:34+00:00,"Turbopack: handle all side effects and improve pattern (#81455)

Avoid the `let _ = task().resolve().await?` pattern.
Instead use the `task().as_side_effect().await?` pattern.

This is much better, because the compiler will yell at you if you miss
out the `as_side_effect()` or the `await?` due to `must_use`. In the old
pattern forgetting the `.resolve()` or the `await?` did not trigger any
warning but silently ignored errors.

<!-- Thanks for opening a PR! Your contribution is much appreciated.
To make sure your PR is handled as smoothly as possible we request that
you follow the checklist sections below.
Choose the right checklist for the change(s) that you're making:

## For Contributors

### Improving Documentation

- Run `pnpm prettier-fix` to fix formatting issues before opening the
PR.
- Read the Docs Contribution Guide to ensure your contribution follows
the docs guidelines:
https://nextjs.org/docs/community/contribution-guide

### Adding or Updating Examples

- The ""examples guidelines"" are followed from our contributing doc
https://github.com/vercel/next.js/blob/canary/contributing/examples/adding-examples.md
- Make sure the linting passes by running `pnpm build && pnpm lint`. See
https://github.com/vercel/next.js/blob/canary/contributing/repository/linting.md

### Fixing a bug

- Related issues linked using `fixes #number`
- Tests added. See:
https://github.com/vercel/next.js/blob/canary/contributing/core/testing.md#writing-tests-for-nextjs
- Errors have a helpful link attached, see
https://github.com/vercel/next.js/blob/canary/contributing.md

### Adding a feature

- Implements an existing feature request or RFC. Make sure the feature
request has been accepted for implementation before opening a PR. (A
discussion must be opened, see
https://github.com/vercel/next.js/discussions/new?category=ideas)
- Related issues/discussions are linked using `fixes #number`
- e2e tests added
(https://github.com/vercel/next.js/blob/canary/contributing/core/testing.md#writing-tests-for-nextjs)
- Documentation added
- Telemetry added. In case of a feature if it's used or not.
- Errors have a helpful link attached, see
https://github.com/vercel/next.js/blob/canary/contributing.md


## For Maintainers

- Minimal description (aim for explaining to someone not on the team to
understand the PR)
- When linking to a Slack thread, you might want to share details of the
conclusion
- Link both the Linear (Fixes NEXT-xxx) and the GitHub issues
- Add review comments if necessary to explain to the reviewer the logic
behind a change

### What?

### Why?

### How?

Closes NEXT-
Fixes #

-->",144,97,241,12,957,847,0.89
6560ec279aaca9734df0f430800489319e1684b2,mischnic,2025-07-09 15:06:53+00:00,"Turbopack: fix unused export removal with mixed reexport and locals (#81422)

We had this reference which caused all locals to be used:
```
node_modules/@react-spring/core/dist/react-spring-core.esm.js [app-client] (ecmascript) <module evaluation>
->
node_modules/@react-spring/core/dist/react-spring-core.esm.js [app-client] (ecmascript) <locals>
with
export_usage=all
```

So for
```js
import {config, useSpring} from ""@react-spring/core"";
```
the output was
```js
""[project]/node_modules/.pnpm/@react-spring+core@9.4.5_react@19.2.0-canary-fa3feba6-20250623/node_modules/@react-spring/core/dist/react-spring-core.esm.js [app-client] (ecmascript) <locals>"": ((__turbopack_context__) => {
__turbopack_context__.s({
    ""BailSignal"": ()=>BailSignal,
    ""Controller"": ()=>Controller,
    ""FrameValue"": ()=>FrameValue,
    ""Interpolation"": ()=>Interpolation,
    ""Spring"": ()=>Spring,
    ""SpringContext"": ()=>SpringContext,
    ""SpringRef"": ()=>SpringRef,
    ""SpringValue"": ()=>SpringValue,
    ""Trail"": ()=>Trail,
    ""Transition"": ()=>Transition,
    ""config"": ()=>config,
    ""easings"": ()=>easings,
    ""inferTo"": ()=>inferTo,
    ""interpolate"": ()=>interpolate,
    ""to"": ()=>to,
    ""update"": ()=>update,
    ""useChain"": ()=>useChain,
    ""useSpring"": ()=>useSpring,
    ""useSpringRef"": ()=>useSpringRef,
    ""useSprings"": ()=>useSprings,
    ""useTrail"": ()=>useTrail,
    ""useTransition"": ()=>useTransition
});
```
instead of only listing the used exports
```js
""[project]/node_modules/.pnpm/@react-spring+core@9.4.5_react@19.2.0-canary-fa3feba6-20250623/node_modules/@react-spring/core/dist/react-spring-core.esm.js [app-client] (ecmascript) <locals>"": ((__turbopack_context__) => {
""use strict"";

__turbopack_context__.s({
    ""config"": ()=>config,
    ""useSpring"": ()=>useSpring
});
```",170,39,209,34,340,285,0.84
8b390602489f12d7ad597939fb8851ef357c7b7c,mischnic,2025-07-09 14:04:42+00:00,"Turbopack: fix duplicate externals modules (#81306)

Don't attatch the resolve request's affecting sources to the external module itself. This list wasn't part of the module ident and would lead to duplicate modules.",94,97,191,34,340,285,0.84
6c112f67f2162cdfcf19b306e8e591adfdd2a38a,nextjs-bot,2025-07-09 13:53:27+00:00,v15.4.0-canary.120,34,34,68,38,0,0,
4d3a02d86f7163cc6a7a7b3a6366c11e12d6c78d,unstubbable,2025-07-09 13:41:15+00:00,"Allow server functions to be used as client component props in `'use cache'` (#81431)

When passing server actions or nested `'use cache'` functions inside of
cached components as props to client components, we need to make sure
that those are registered as server references, even when restoring the
parent component from the cache, e.g. during the resume of a partially
static shell. Otherwise, React would throw a runtime error while trying
to serialize the props.

<details>
<summary>Example</summary>

```tsx
import { connection } from 'next/server'
import { Suspense } from 'react'

export default function Page() {
  return (
    <div>
      <Suspense fallback={<h1>Loading...</h1>}>
        <Dynamic />
      </Suspense>
      <CachedForm />
    </div>
  )
}

const Dynamic = async () => {
  await connection()
  return <h1>Dynamic</h1>
}

async function CachedForm() {
  'use cache'

  return (
    <form
      action={async () => {
        'use server'
        console.log('Hello, World!')
      }}
    >
      <button>Submit</button>
    </form>
  )
}
```
</details>

Previously, for inline server functions, the Next.js compiler placed the
`registerServerReference` calls where the server function was originally
declared. When the enclosing function was restored from a cache, this
call was skipped and the reference was not registered, leading to the
serialization error. To fix it, we can hoist the
`registerServerReference` call into the module scope, where the
reference itself also has been hoisted to. For simplicity, we're doing
this now generally, regardless of whether the server function is inline
or top-level.

Note: Since `registerServerReference` uses `Object.defineProperties` to
mutate the given reference, we don't need to assign the result to
anything. We already did this for exported functions of a module with a
top-level `'use server'` directive.

closes NAR-167",518,251,769,25,331,294,0.89
11cbba8bd5967ce605ce351956fca4d50b0ead99,eps1lon,2025-07-09 13:11:24+00:00,[build-sourcemaps] Default `experimental.enablePrerenderSourceMaps` to `experimental.dynamicIO` (#81449),76,59,135,32,540,451,0.84
8a80e4afdfa3bd60378878d03e9a3f1a29ad360b,mischnic,2025-07-09 11:56:49+00:00,"Turbopack: filter NftJsonAsset entries earlier (#81446)

Improves invalidation (and performance)

1. filter out client asset while discovering client assets, so this filters out the whole subgraph already
2. apply the user-defined excludes while discovering the assets, this is also what the JS implementation does:
https://github.com/vercel/next.js/blob/b77eb3e127986b47cab9eced2253f00de12a5a14/packages/next/src/build/collect-build-traces.ts#L336-L343

Closes PACK-5037",75,28,103,34,340,285,0.84
53a46b391c7a8d75f0e7ce8cad28545f243252b2,huozhi,2025-07-09 11:33:13+00:00,Upgrade vercel og to 0.7.2 (#81447),8063,5719,13782,24,1020,896,0.88
b77eb3e127986b47cab9eced2253f00de12a5a14,sokra,2025-07-09 06:19:21+00:00,"Turbopack: fix hanging problem due to stale tasks (#81413)

### What?

When tasks become dirty they eventually need to be scheduled again when needed. To do that we maintain ""activeness"" of tasks. And we also maintain ""dirtyness"" of subgraphs, to allow for strongly consistency of a subgraph. But all that is a bit more involved since we don't want to touch all tasks of a subgraph (a subgraph could be millions of nodes).

So we do some ""aggregation"" of subgraphs to optimize the affected tasks. Once a task becomes dirty, we propagate that dirtyness up the aggregated tasks: Every aggregated task has a list of inner tasks which subgraph contain dirty tasks (`dirty_containers`). This way we can follow the graph directly down the dirty tasks without walking the whole graph.

This is where activeness comes into play. When a task is active we want to schedule all dirty tasks in the subgraph. This can happen under 2 cases:
1. A task becomes active -> all dirty_containers are scheduled
2. A dirty_container propagates to an already active task -> that task is scheduled

There is this case where a task is newly connected to an active task. This is covered by case 2, because a newly connected tasks will apply its aggregated info to the upper case, which hit case 2 then.

All root tasks are active as long as they are relevant (you can dispose them, or some are once off tasks). So when a task becomes dirty, it propagates the `dirty_container` to the root tasks, which would schedule the subgraph by walking the dirty_containers.

But it would break if another task becomes dirty below the same aggregated task. The aggregated task is already listed as `dirty_container` in the root tasks and it would not be scheduled again. To handle this all aggregated tasks, that are listed as `dirty_container` of an active task, are made temporarily active (`active_until_clean`). This also has the benefit that we don't have to do so many hops to schedule a task.

So this works in most cases, but there is a race condition in this design which this pull request fixes. We said only aggregated tasks are made temporarily active. But there is this edge case where while a task is already dirty, it is converted from a leaf task into an aggregated tasks and a inner task becomes dirty. This leads to the problem that the newly aggregated task is not temporarily active - as it was not an aggregated task when it was scheduled. So the inner task is not scheduled - since the upper task is not (temporarily) active. So the task is never executed and stays stale. But a strongly consistent read further up the graph will wait for this task to become not-dirty - since it is listed as `dirty_container`. This leads to a hanging build.

To fix that we make all tasks temporarily active, even leaf tasks.",12,16,28,12,957,847,0.89
25781670de462dec915af465da6d623aefbf8397,vercel-release-bot,2025-07-09 02:23:21+00:00,"Update Rspack development test manifest (#81398)

This auto-generated PR updates the development integration test manifest
used when testing Rspack.

Co-authored-by: nextjs-bot <it+nextjs-bot@vercel.com>",16,9,25,18,0,0,
37ab1aac4983f85d8bd94c6cb1a2f4ef9d6b7678,bgub,2025-07-09 02:04:49+00:00,update: add nebrelbug to labeler.json (#81437),1,0,1,2,7,4,0.57
203adbd5d054609812d1f3666184875dcca13f3a,bgw,2025-07-09 02:00:29+00:00,"refactor(turbopack): Rewrite `EsRegex::captures` to return an iterator, use `None` for unmatched capture groups (#81200)

This is a follow-up to #81119.

- Make each returned capture use `Option` and return `None` if the capture doesn't match instead of an empty string. There is a meaningful difference between a capture not matching at all or a zero-width capture.
- Return an iterator instead of a `Vec`. Some lifetime issues with both `regex` and `regress` pushed me to make this a manual iterator implementation (versus using `Either`), but the upside is that the type is now named!",92,23,115,11,335,315,0.94
48aebf9c571b29b60a080c6c6c23868739a86a75,unstubbable,2025-07-09 01:03:26+00:00,"Revert ""[test] Skip flaky cdn-cache-busting test"" (#81433)",1,2,3,25,331,294,0.89
a546b131ed5bf8c1d50f79dea0a93c8c6e5b58a0,RobPruzan,2025-07-09 00:49:13+00:00,"fix: referencing unavailable __dirname (#81436)

Patch missing __dirname usage for storybook css injection",3,1,4,7,14,9,0.64
94f8aecf2622d778b097780eec0992104f709528,RobPruzan,2025-07-08 23:40:01+00:00,"feat: forward browser errors/logs to terminal (#80909)

Closes NEXT-4534

This PR introduces the ability for next.js to forward logs, errors, and
unhandled rejections from the browser to the terminal the dev server is
running in (behind an experimental flag)

# Explanation

The 2 main components of this pr are the client side error accumulation
logic, and the ingest handling on the other side of the hmr socket.

We listen on the existing hmr socket to send batched logs, errors, and
uncaught rejections the frame after they were captured. All forwarded
data is sent with metadata so we can have reconstruct the log with an
equivalent level of information to the browser- since we expect AI
agents that can't access the browsers to be consumers of this feature
(and it's generally useful).

All foreign data created by the user in the browser is serialized using
`safe-stable-serializer`, a popular serializer [used by other logging
libraries](https://www.npmjs.com/browse/depended/safe-stable-stringify),
like
[pino](https://github.com/search?q=repo%3Apinojs%2Fpino+safe-stable&type=code)
(safety, determinism, fast). We also have a light shim on top of json
serialization to handle displaying custom data representations that
either wouldn't survive serialization (undefined) or we want to present
to users in a custom format (throwing proxies, promises, ...)

On the dev server server, we (bespoke) deserialize, source map, format,
and log. I tried to share as much logic as I could with error dev
overlay to avoid feature drift since they are very similar
implementations other than the render target


# Explicitly covered cases

- console table
  - shows as `[browser]\n<table>\n(<source location>)`
- console trace
- shows as `[browser] arg1 arg2 ...\n<stack trace>\n([source mapped
location of log]`)`
  - trace is source mapped
- ignored frames are shown, incase people explicitly want the full trace
- console dir
  - shows as `[browser] arg1 arg2 ([source mapped location of log])`
- we need to explicitly capture stdout and rewrite it when we call nodes
`console.dir` to prefix and postfix with [browser] and and (`<source
mapped location of log>`) without adding newlines (we could do this for
console.table but it makes sense to keep the prefix and postfix on new
lines)

- console error
- `[browser] arg1 arg2 \n codeblock + source mapped stack of
console.error ([source mapped location of console.error])`
- if there are any `Error` values present we wont show the stack and
code block of console.error since it's overwhelming (this is fine since
we still tell the user where the `console.error` is with the appended
location)
- rejected promises that have `Error`'s
- behave identical to console.error, but is prepended with `⨯
unhandledRejection`
	- the `Error`'s render with their source mapped stack + ignored frames
- no error stack can be automatically appended where the promise
rejected
- rejected promises that have non `Error` values
- prepended with `⨯ unhandledRejection: ${error.name}: ${error.message}`
	- everything is logged in red
- no error stack can be automatically appended where the promise
rejected
- on caught error
	- prepended with `Uncaught ${errorName}: ${errorMessage}`
- stack attached to error is source mapped + ignored frames are not
shown
- everything is logged in red but the code block of where the error
orginated from
- all other console cases
  - shows as `[browser] arg1 arg2 ([source mapped location of log])`
- if an error is passed, we show the error name, message, source mapped
stack (colored white, ignored frames not shown), and code block if
available (syntax highlighted)
  - we apply util.format to handle formatted strings
- logs captured during RSC rendering
  - not piped to server, ignored on client


Closes NEXT-4534",2626,125,2751,7,14,9,0.64
697fc32efb3c2cc8a76c94d607d63eafa2ad2784,nextjs-bot,2025-07-08 23:25:00+00:00,v15.4.0-canary.119,34,34,68,38,0,0,
5ac55fc899fa71b1ad0dd74a0fbbf767926e2740,padmaia,2025-07-08 22:46:49+00:00,"Check if target workflow is enabled before triggering front sync (#81432)

This change adds a check to ensure the front sync workflow is enabled
before attempting to trigger it. Previously, when the workflow was
disabled, the dispatch would fail and cause false alerts about
deployment test failures.

Now, if the workflow is disabled, the sync trigger is skipped with clear
logging. The on-call person should be aware that the workflow is
disabled and can manually rerun the sync once the workflow is
re-enabled.

I tested this by commenting out the tests and just running the check if
workflow is enabled step and it worked:
![CleanShot 2025-07-08 at 14 57
48](https://github.com/user-attachments/assets/e56e3e2c-61c2-4c56-935a-025d508d3fa2)",29,0,29,3,96,83,0.86
bbe2786b5e3d7968380f15c80595a8191afb4a85,unstubbable,2025-07-08 22:21:51+00:00,Unflake `segment cache (CDN cache busting)` redirect test (#80967),18,0,18,25,331,294,0.89
8c15302158a9fe219c0d81b373a774d243c9fc7e,huozhi,2025-07-08 20:31:55+00:00,"[segment explorer] trigger the actual same level boundary (#81268)

When you click trigger boundary is not triggering the upper layer boundary but the defined boundaries in the current layer.

https://github.com/user-attachments/assets/6c24caa5-36fc-46db-9e0f-f8753391c541",30,14,44,24,1020,896,0.88
2503c19dd068a99c82ec02691b22c323a884614f,huozhi,2025-07-08 20:13:03+00:00,"[segment explorer] capture defined boundaries (#81232)

Capture defined boundaries (not-found / error / loading) and used to filter which one is available for boundary triggers

The trie will now hold all the defined boundaries, but what's different from the existing rendered boundaries is:

Here's the difference of new defined boundary trie nodes:
```
{
  type: ""boundary:<type>""
  pagePath: ""<pagePath>@boundary""
}
```
We add a `boundary:` prefix to determine if it's node representing existence;
We add a `@boundary` suffix to the filename cause the <pagePath> part is still need to use for indexing in the trie, but the `@boundary` doesn't matter yet. We'll remove it once we start using the file name in the dropdown panel

Closes NEXT-4330

### Example

When there's only one not-found.tsx, allow to trigger the not-found boundary and disable the rest.

https://github.com/user-attachments/assets/eb5c49a7-4fd2-496b-b778-fb66581908b3",145,32,177,24,1020,896,0.88
d9a774117cfef44c173c961c5e1699734eb7f62a,eps1lon,2025-07-08 19:38:47+00:00,"[test] Skip flaky cdn-cache-busting test (#81429)

https://vercel.slack.com/archives/C07UCHRBWGK/p1752001887137129",2,1,3,32,540,451,0.84
b9ed008915297e68966993cb52824507693ed463,nextjs-bot,2025-07-08 19:23:48+00:00,v15.4.0-canary.118,34,34,68,38,0,0,
9bbcfa2c14716448a81aa278c39da9fb520de354,nextjs-bot,2025-07-08 19:09:00+00:00,"Upgrade React from `5d87cd22-20250704` to `a7a11657-20250708` (#81428)

Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>",10590,8090,18680,38,0,0,
656271b21033cdb7f835a8ffe48813a298a9d898,gnoff,2025-07-08 18:37:34+00:00,"[use-cache] track cache read earlier when encrypting bound args (#81427)

bound args need to be encrypted for use cache functions and currently we
track the read slightly later than will be necessary when we sync the
latest React. This change moves the tracking to be as early as possible
(as soon as the input signal is aborted or when the bound args are
finished being serialized, whichever is first).",47,10,57,7,162,136,0.84
bdb87a1851bbf62778f422002aca45fbb0e9566e,SyMind,2025-07-08 17:57:38+00:00,"chore: update rspack to 1.4.5 (#81216)

<!-- Thanks for opening a PR! Your contribution is much appreciated.
To make sure your PR is handled as smoothly as possible we request that
you follow the checklist sections below.
Choose the right checklist for the change(s) that you're making:

## For Contributors

### Improving Documentation

- Run `pnpm prettier-fix` to fix formatting issues before opening the
PR.
- Read the Docs Contribution Guide to ensure your contribution follows
the docs guidelines:
https://nextjs.org/docs/community/contribution-guide

### Adding or Updating Examples

- The ""examples guidelines"" are followed from our contributing doc
https://github.com/vercel/next.js/blob/canary/contributing/examples/adding-examples.md
- Make sure the linting passes by running `pnpm build && pnpm lint`. See
https://github.com/vercel/next.js/blob/canary/contributing/repository/linting.md

### Fixing a bug

- Related issues linked using `fixes #number`
- Tests added. See:
https://github.com/vercel/next.js/blob/canary/contributing/core/testing.md#writing-tests-for-nextjs
- Errors have a helpful link attached, see
https://github.com/vercel/next.js/blob/canary/contributing.md

### Adding a feature

- Implements an existing feature request or RFC. Make sure the feature
request has been accepted for implementation before opening a PR. (A
discussion must be opened, see
https://github.com/vercel/next.js/discussions/new?category=ideas)
- Related issues/discussions are linked using `fixes #number`
- e2e tests added
(https://github.com/vercel/next.js/blob/canary/contributing/core/testing.md#writing-tests-for-nextjs)
- Documentation added
- Telemetry added. In case of a feature if it's used or not.
- Errors have a helpful link attached, see
https://github.com/vercel/next.js/blob/canary/contributing.md


## For Maintainers

- Minimal description (aim for explaining to someone not on the team to
understand the PR)
- When linking to a Slack thread, you might want to share details of the
conclusion
- Link both the Linear (Fixes NEXT-xxx) and the GitHub issues
- Add review comments if necessary to explain to the reviewer the logic
behind a change

### What?

### Why?

### How?

Closes NEXT-
Fixes #

-->

update Rspack to 1.4.2, in this version we fix bugs when using Rspack
persistent cache in next.js.

Now user can try Rspack persistent cache by follow way:

```js
const config = {
    webpack: (config) => {
        config.experiments.cache = {
            type: 'persistent'
        };
        return config;
    },
};
```",218,167,385,2,23,18,0.78
b81f9892b3f5216e8c40a413f840f6ce8e00f1f4,raunofreiberg,2025-07-08 17:13:11+00:00,"[dev-tools] Custom keyboard shortcut to toggle visibility (#81064)

This PR implements a `<ShortcutRecorder>` component to assign custom
keyboard shortcuts. For now, we can use this to let engineers choose a
shortcut to hide (and show) the Dev Tools badge:


https://github.com/user-attachments/assets/2366271d-b9e6-4577-bfe5-e21705c88f8c

`ShortcutRecorder` stores the shortcut in `localStorage` and supports
assigning keybinds with up to 3 keys, and automatically reorders the
pressed keys in the order in which they would be registered by a browser
`keydown` event:



https://github.com/user-attachments/assets/aa7b0119-9a03-4fd3-8a81-bd8cb2500054

---------

Co-authored-by: graphite-app[bot] <96075541+graphite-app[bot]@users.noreply.github.com>",640,23,663,2,35,30,0.86
71c87179a8494ba42a11b66579149f6bdf52c457,bgw,2025-07-08 17:12:18+00:00,"refactor(turbopack/napi): Add a NextTurbopackContext type, rename VcArc to DetachedVc (#80881)

- Introduce `NextTurbopackContext` for use later in https://github.com/vercel/next.js/pull/81272 . In this PR, it's just a thin single-field wrapper, but we add callbacks to it in the next PR.
- Wrap all the places we pass around `NextTurboTasks` in this new `NextTurbopackContext` type.
- `VcArc` was a bit vague of a name, the important thing its that the `Vc` is detached from the turbo-tasks graph. `DetachedVc` matches the prefixed naming of `ResolvedVc` and `OperationVc`.",261,192,453,11,335,315,0.94
bab62242883150c5267fae8a2c42535374c11911,lukesandberg,2025-07-08 17:03:41+00:00,"[turbopack] Install late loaded script and link tags at the end of the `head` instead of the end of the `body` (#81425)

### What?
Append CSS and JS chunks to `document.head` instead of `document.body` in the Turbopack runtime.

### Why?
This change improves webpack compatibility by ensuring that dynamically loaded CSS and JS resources are appended to the document head rather than the body, matching webpack's behavior.   We don't believe this should have a performance or behavior impact, however aligning with webpack should eliminate rare incompatibilities with applications that might be confused by the presence of these script tags in the body.

One delta with webpack does remain, webpack removes the added script tags from the DOM after they load apparently to workaround a memory leak in IE.  We are not bothering with this.

See also: https://github.com/webpack/webpack/blob/a11302288d2a8851ff89405a122c1d04709574ea/lib/runtime/LoadScriptRuntimeModule.js#L167",10,6,16,7,83,69,0.83
7a09a67d3287220d651e569755d2bbf40bb39aeb,eps1lon,2025-07-08 16:55:49+00:00,Fix auth preflight check when triggering Front sync (#81166),4,0,4,32,540,451,0.84
9170aca93ad678abc573a6b71fb775e8ebb4c8d6,sokra,2025-07-08 14:36:35+00:00,"Turbopack: improve var names, add some unit tests (#81412)

### What?

* improve variables names
* add unit tests",206,18,224,12,957,847,0.89
a9c3206cccc9e018da623d2fe0a89ff016c5feda,kristian240,2025-07-08 14:07:08+00:00,"feat: make typed routes output deterministic (#80432)

### What?

This PR makes changes to the next plugin for typed routes. The issue
here is that the output of the plugin, specifically the part where
static and dynamic routes are defined changes constantly. This PR makes
the output of the plugin deterministic.

### Why?

We work in a monorepo with multiple Next.js projects. We encountered
multiple issues with git and git hooks. If you had a stale `.next`
output the routes type would also be stale and caused issues on commit
when you want to sync your work with an upbranch causing either to
rebuild the app you are not developing or completly removing the `.next`
folder. As a solution we choose to commit `.next/types/link.d.ts` (the
output file of the mentioned next.js plugin) and that solved the issue.

Now we have a smaller issue regarding the un-deterministic file output
which I want to solve with this MR.

### How?

Before writing the routes in the file, the routes are sorted using
native `sort` method on the array instance. The actual sort order is not
relevant here, the fact that the output is in the same order everytime
is the key.

---------

Co-authored-by: Steven <steven@ceriously.com>",38,21,59,1,4,2,0.5
3e598fdbaaec331f8c1e89a2be6a0eefcea8d3b8,sokra,2025-07-08 13:52:09+00:00,"Turbopack: remove unused code (#81411)

### What?

Remove unused code. Also improves performance by avoid unnecessary checks",5,14,19,12,957,847,0.89
5248e1576632ea82d6f3cbc932ec73d1f6a401d6,Cy-Tek,2025-07-08 13:16:40+00:00,"fix(turbopack) Adjust tree loader to respect parent module overrides (#81139)

## Fix not-found page inheritance in nested layouts

### What?
This PR fixes an issue where custom not-found pages weren't properly
inherited in nested layouts. Previously, when a page within a route
group threw a `notFound()` error, it wouldn't correctly use the group's
custom not-found page if there was also a custom layout.

### How?
- Added a new `check_and_update_module_references` helper function to
manage module inheritance
- Implemented proper parent-child relationship for special pages
(not-found, forbidden, unauthorized, global-error)
- Added test cases for not-found pages with nested layouts and route
groups
- Ensured custom not-found pages are properly rendered when notFound()
is thrown from pages in nested layouts

Fixes #PACK-4496",184,29,213,3,16,16,1.0
d118f071fc2b4fcf985bab68d8fed6ddf4ac75ac,RobPruzan,2025-07-08 12:25:51+00:00,chore: align css loader in storybook (#81403),45,1,46,7,14,9,0.64
259f9a62203a2af128d429e34742fbe847c5d7a4,eps1lon,2025-07-08 10:32:36+00:00,[test] Avoid flaky assertions due to dynamic metadata (#81373),30,16,46,32,540,451,0.84
6ae87df4ba6d0e0ea016200fb17434344ce4ca42,huozhi,2025-07-08 10:29:19+00:00,[build] remove devtool from client chunks in prod (#81376),50,49,99,24,1020,896,0.88
2dbc947cdeebce7fbfc91240d71473395e961616,sokra,2025-07-08 07:02:06+00:00,"Turbopack: fix incorrect graph state bug (#81202)

### What?

Technically a task should start with `Dirty` flag set and propagate that info through the aggregation graph. But that would be very expensive to do in the initial compilation. So we have the extra check of tasks not having Output set.

But there is this rare case where a task A calls a task B purely for side effects without `await`ing the output. In this case A would become clean, while B is in its initial computation and don't have Dirty set. This would lead to the subgraph being incorrectly considered as clean.

To fix that case, we eagerly mark all children as Dirty when they don't have Output set, once the parent task gets its Output set.

But there was a bug in that implementation where we early exit when Output is set to something equal the previous Output.",229,73,302,12,957,847,0.89
c8976ee2121b02b26e089e1854e2b1ad43a3436e,mischnic,2025-07-08 07:00:17+00:00,"Turbopack: don't emit `blurDataURL: null` (#81387)

Do what Webpack does and don't generate `blurDataUrl: null`, just omit that property.",11,5,16,34,340,285,0.84
51e4382d973fb8b560eaaeb070229cb55e0cec44,vercel-release-bot,2025-07-08 00:34:56+00:00,"Update Rspack production test manifest (#81364)

This auto-generated PR updates the production integration test manifest
used when testing Rspack.

Co-authored-by: nextjs-bot <it+nextjs-bot@vercel.com>",50,44,94,18,0,0,
33720a3be2e6f161723e747659888dabf044af06,dnhn,2025-07-08 00:33:19+00:00,"Add Biome example (#81334)

Add a Next.js example configured with Biome toolchain.",169,0,169,2,5,5,1.0
e4b6c8e2c3fa38551d26326141fe85b618f6df8f,fireairforce,2025-07-08 00:26:02+00:00,"fix(turbopack): external script should under async module (#81362)

Follow up: https://github.com/vercel/next.js/pull/80768

Sorry i miss something, script external should under async module
because it needs to execute loadurl function(which is async)",7,3,10,3,8,8,1.0
ff5707b95e43cb7f2c99475fa1ab98fcd2821e8c,bgw,2025-07-07 23:32:41+00:00,"fix(CI): Update llvm when building native musl targets (#81392)

Tested locally with

```
podman run --platform=linux/amd64 -t -i ghcr.io/napi-rs/napi-rs/nodejs-rust:stable-2023-09-17-alpine bash
```

We must ensure llvm16 is removed before installing llvm20 and
llvm20-dev, as there's a file conflict between llvm16 and llvm20-dev.

Full build-and-deploy run:
[https://github.com/vercel/next.js/actions/runs/16128142342](https://github.com/vercel/next.js/actions/runs/16128189670)",4,2,6,11,335,315,0.94
cacd2e45d51696e5beab22b23d0db485c557e0ca,nextjs-bot,2025-07-07 23:24:39+00:00,v15.4.0-canary.117,34,34,68,38,0,0,
e938366489b2cd426b1578ec4d757f6e2ca308f3,ztanner,2025-07-07 21:39:11+00:00,"chore: cleanup unused workflows (#81391)

Cleans up unused workflows & scripts

- bankrupt workflow is superseded by the [stale
workflow](https://github.com/vercel/next.js/blob/canary/.github/workflows/issue_stale.yml)
- filtering issues by version hasn't been used in 9 months and can be
accomplished with a GH search
- the AI triaging tool has largely been more noise than signal. the
existing alerts that have been surfaced in the triage channel have been
sufficient",13,4162,4175,7,633,579,0.91
7bcd46a9a96f65244cf1f84a09dae1421f9b3f11,gnoff,2025-07-07 20:57:09+00:00,"[dynamicIO] Track module loading in dev always (#81388)

In dev we prerender and render concurrently. The former to validate
dynamicIO rules. The latter to stream a response as soon as possible. If
we only track module loading during prerenders it is possible to kick
off loading a chunk during the render and then not observe that chunk
load during prerender, leading to an early abort before all modules have
had a chance to load.

To solve this we simply always track module loading in dev.",3,0,3,7,162,136,0.84
f4f0c449968facd4e9a4f3fc5cbfcacd5a3972e7,mischnic,2025-07-07 20:34:16+00:00,"Turbopack: make stats.json useable (#81318)

Make the `.next/server/webpack-stats.json` file that was already getting generated with `TURBOPACK_STATS=1` actually usable with https://statoscope.tech/.

Not the most efficient implementation, but definitely works for small apps.

- Chunks have the parent/child connection (though I can't see that in the UI)
- Modules have the `reasons` set, so the module graph traversal works now. Note that this all ignores scope hoisting though, so there are some modules missing right now in some views

![Bildschirmfoto 2025-07-04 um 22 44 42](https://github.com/user-attachments/assets/b51c93fd-fd6d-404c-b8db-26de4500beb2)",251,45,296,34,340,285,0.84
ea9585ae73323a19236f644f58bd307c9ca26662,vercel-release-bot,2025-07-07 19:43:02+00:00,"Update Rspack development test manifest (#81365)

This auto-generated PR updates the development integration test manifest used when testing Rspack.",36,14,50,18,0,0,
5d6be0a4d9aefedc2c1f78c991d888cd5490f3e4,raunofreiberg,2025-07-07 18:02:09+00:00,"[dev-tools] Consistent focus states for buttons (#81114)

Trivial PR. Just makes sure we use our `--focus-ring` CSS variable for
focus states.

![CleanShot 2025-07-01 at 13 18
05@2x](https://github.com/user-attachments/assets/c3f7aded-0644-4a46-850d-8d5e4e379084)",5,4,9,2,35,30,0.86
7a05d5d2a1710ac2589f369448d621b1bf7b56c2,wyattjoh,2025-07-07 16:47:57+00:00,"fix(build): improve static path generation performance and fix parameter collisions (#81254)

## Summary

• **Performance**: Replace O(n²) parameter deduplication with O(n)
Map-based approach
• **Architecture**: Rewrite `assignErrorIfEmpty` using [Trie data
structure](https://en.wikipedia.org/wiki/Trie)
• **Testing**: Add comprehensive test coverage for edge cases including
parameter collisions and complex route hierarchies

## Technical Details

### Performance Optimization
- **Before**: O(n²) nested loops comparing each parameter combination
against all previous ones
- **After**: O(n) Map-based deduplication using unique string keys for
each parameter combination
- **Impact**: Significant performance improvement for routes with many
parameter combinations

### Trie-Based Route Analysis
Replaces linear route comparison with efficient Trie data structure:

- **Nodes**: Represent unique parameter combinations 
- **Edges**: Represent parameter values with collision-safe keys
- **Algorithm**: [DFS
traversal](https://en.wikipedia.org/wiki/Depth-first_search) determines
`throwOnEmptyStaticShell` based on child relationships

**Example**: For routes `/blog/[slug]` and `/blog/first-post`:
- Trie identifies `/blog/[slug]` as parent to concrete route
`/blog/first-post`
- Sets `throwOnEmptyStaticShell = false` for parent, `true` for concrete
route",452,89,541,6,307,243,0.79
be0cc7ade5951a55de7da00b11530a3db14535e0,eps1lon,2025-07-07 15:04:33+00:00,"[sync-react] Set correct PR author (#81369)

Follow-up to https://github.com/vercel/next.js/pull/81134

We checkout and commit with nextjs-bot but then opened the PR as vercel-release-bot. Now we use nextjs-bot for both.",1,1,2,32,540,451,0.84
4b850b2f8f2fe21e7f221e14aed14b1617f220bd,RobPruzan,2025-07-07 14:09:57+00:00,"feat: resizable panel (#81233)

Closes NEXT-4599

This pr introduces the ability to resize panels in devtools

### Details
- we dynamically show a drag area on the sides of the panels to make it
easier to find the drag target of the panel
- remove all media queries for panel sizing and rely on resizing +
min/max heights as source of truth
- handles vertical, horizontal, diagonal resizing
- clamp panel width/height to viewport incase user resizes

### Example

https://github.com/user-attachments/assets/9053f716-ca79-440b-add4-a841ff84427d",780,156,936,7,14,9,0.64
76d9ab8e4e2f7ab63217020beb9e6a063e3aeae3,eps1lon,2025-07-07 14:04:53+00:00,[test] Improve React performance track tests (#81359),104,15,119,32,540,451,0.84
17c05b67bdea952b1d39b0eb46d87920f40b38df,unstubbable,2025-07-07 13:53:21+00:00,"Always consider `captureOwnerStack` optional (#81370)

When running `next build` with a custom `NODE_ENV` (e.g. `test` or
`development`), the `captureOwnerStack` method is not defined and may
lead to errors if called. This change ensures that we only call
`captureOwnerStack` if it is defined, preventing potential runtime
errors.",9,3,12,25,331,294,0.89
1a31db0335e1d853fddf7f5d187ca161773ffe01,vercel-release-bot,2025-07-07 13:47:28+00:00,"Upgrade React from `73aa744b-20250702` to `5d87cd22-20250704` (#81308)

Co-authored-by: nextjs-bot <it+nextjs-bot@vercel.com>",7838,5452,13290,18,0,0,
33973b104afd387ede021e2473f0d381eb1c6b10,carloitaben,2025-07-07 11:07:31+00:00,"Fix duplicates in `optimizePackageImports` `effect` packages (#81253)

Co-authored-by: Jiachi Liu <inbox@huozhi.im>",4,5,9,1,1,1,1.0
cb1aed8d8fdb050e82ff1d8b696231df836b6308,huozhi,2025-07-06 23:46:09+00:00,"[devtool] inject css as styleTag rather than singletonStyleTag (#81297)

Change the style-loader injection for devtool from `singletonStyleTag` to `styleTag` (which is also default).
The original setting was configured in #81236 , @mischnic a case where the style is inserted but not applied.

Using `styleTag` will insert multi styleTag which can force it layout again when the style is added",4,1,5,24,1020,896,0.88
16ed7eed1ff18aa74e59c8534f7296fe66b0c22a,nextjs-bot,2025-07-06 23:24:32+00:00,v15.4.0-canary.116,34,34,68,38,0,0,
a47cd4ff20b7cbe5dff698f98829b134c07741cc,huozhi,2025-07-06 23:12:03+00:00,"[devtool] handle click outscope child element (#81296)

Improve the DX of close by clicking outside of the of the UI, if it's children it also shouldn't close it.
Since devtool is under the shadow dom, we need to attach the listeners onto `ownerDocument` rather than the `document` itself

### Diff

| After | Before |
|:--|:--|
| <video src=""https://github.com/user-attachments/assets/617d79f8-f093-4c17-9588-633331a416bc""> | <video src=""https://github.com/user-attachments/assets/94626f7e-6f2f-450a-aa73-f9cb5548820d""> |

<!-- https://github.com/user-attachments/assets/617d79f8-f093-4c17-9588-633331a416bc -->
<!-- https://github.com/user-attachments/assets/94626f7e-6f2f-450a-aa73-f9cb5548820d -->",11,4,15,24,1020,896,0.88
2c6b7dcd28edb749b8016dbafe9f9a8cf10b160e,gnoff,2025-07-06 22:15:23+00:00,"reverts test copy change in dynamicIO tests (#81358)

test copy was accidentally changed in #81258. this reverts it",15,31,46,7,162,136,0.84
39f5d0f32c0b8f4066e4e7cb23ce25c75d7e6dcd,eps1lon,2025-07-06 09:47:17+00:00,"[test] Dedicate suite for React's Server Request performance track (#81312)

We're testing this here since framework integration via `filterStackTrace` determines what React uses to determine the name of the Performance entry.",110,0,110,32,540,451,0.84
05ec5674c2d1d6cf3493287a37661f8468bbb1f9,eps1lon,2025-07-06 09:27:33+00:00,"[sourcemaps] Improve ignore-listing performance (#81311)

This improves performance of finding the relevant section in Index Source Maps by using binary search (O(N) -> O(log N)).

This allows us to improve the performance of the fast path for checking if a source is ignore-listed in Index Source Maps:
Instead of checking if every section in Index Source Maps ignores everything, we just find the relevant section (now O(log N) instead of O(N)) and check if that section ignores everything.",76,49,125,32,540,451,0.84
3a41715c1fc9cd27cd45ac5220e734868e7435bf,eps1lon,2025-07-06 09:10:14+00:00,"[refactor] Move sourcemapping logic to dedicated file (#81310)

Resolves https://github.com/vercel/next.js/pull/81231#discussion_r2185437480",290,288,578,32,540,451,0.84
09c8af1c4bad0e995b2fc329f2fdc978065609d2,dnhn,2025-07-05 23:33:09+00:00,"Remove duplicate CSS properties (#81333)

### What?
This PR removes duplicate CSS properties in the App Router templates
generated by `create-next-app`.

Co-authored-by: JJ Kasper <jj@jjsweb.site>",0,2,2,2,5,5,1.0
6e316e8a8b41461787c3c907c51ceafd1b6dac92,nextjs-bot,2025-07-05 23:24:36+00:00,v15.4.0-canary.115,34,34,68,38,0,0,
de7e13e5eb66c24d6174d85e4590b8c00e0c6b7e,kidonng,2025-07-05 23:17:10+00:00,"Remove incorrect PostCSS config type (#81338)

### What?

Currently the docs is incorrectly suggesting to type the PostCSS config
with types from Tailwind CSS. This pull request removed the wrong types.

If desired one can correctly type the config with the
[`postcss-load-config`](https://github.com/postcss/postcss-load-config/blob/main/src/index.d.ts#L52-L60)
package:

```js
/** @type {import('postcss-load-config').Config} */
const config = {
    plugins: {
        '@tailwindcss/postcss': {},
    },
}

export default config
```

However if your package manager does not hoist the package, you need to
install it separately just for the types, which does not seem to be
worth it.

### Why?

### How?

Co-authored-by: JJ Kasper <jj@jjsweb.site>",1,2,3,1,2,2,1.0
6b5c9548f6f08ea25c37bbdf516e846fd2227522,rajrawat37,2025-07-05 23:14:14+00:00,"fix(docs): correct section count from 4 to 3 in intro (#81323)

The docs mention 4 sections but only list 3: Getting Started, Guides,
and API Reference.

This updates the ""How to use the docs"" section to correctly reflect that
only 3 sections are listed, not 4.

**Before:**
The docs are organized into 4 sections:

**After:**
The docs are organized into 3 sections:

Let me know if a fourth section was intended to be included instead.


<!-- Thanks for opening a PR! Your contribution is much appreciated.
To make sure your PR is handled as smoothly as possible we request that
you follow the checklist sections below.
Choose the right checklist for the change(s) that you're making:

## For Contributors

### Improving Documentation

- Run `pnpm prettier-fix` to fix formatting issues before opening the
PR.
- Read the Docs Contribution Guide to ensure your contribution follows
the docs guidelines:
https://nextjs.org/docs/community/contribution-guide

### Adding or Updating Examples

- The ""examples guidelines"" are followed from our contributing doc
https://github.com/vercel/next.js/blob/canary/contributing/examples/adding-examples.md
- Make sure the linting passes by running `pnpm build && pnpm lint`. See
https://github.com/vercel/next.js/blob/canary/contributing/repository/linting.md

### Fixing a bug

- Related issues linked using `fixes #number`
- Tests added. See:
https://github.com/vercel/next.js/blob/canary/contributing/core/testing.md#writing-tests-for-nextjs
- Errors have a helpful link attached, see
https://github.com/vercel/next.js/blob/canary/contributing.md

### Adding a feature

- Implements an existing feature request or RFC. Make sure the feature
request has been accepted for implementation before opening a PR. (A
discussion must be opened, see
https://github.com/vercel/next.js/discussions/new?category=ideas)
- Related issues/discussions are linked using `fixes #number`
- e2e tests added
(https://github.com/vercel/next.js/blob/canary/contributing/core/testing.md#writing-tests-for-nextjs)
- Documentation added
- Telemetry added. In case of a feature if it's used or not.
- Errors have a helpful link attached, see
https://github.com/vercel/next.js/blob/canary/contributing.md


## For Maintainers

- Minimal description (aim for explaining to someone not on the team to
understand the PR)
- When linking to a Slack thread, you might want to share details of the
conclusion
- Link both the Linear (Fixes NEXT-xxx) and the GitHub issues
- Add review comments if necessary to explain to the reviewer the logic
behind a change

### What?

### Why?

### How?

Closes NEXT-
Fixes #

-->

Co-authored-by: JJ Kasper <jj@jjsweb.site>",1,1,2,1,1,1,1.0
6ba9c21d29d8f3786fcb0ad4c419819ea0ffbd4d,sajadtorkamani,2025-07-05 22:54:02+00:00,"fix typo (#81336)

<!-- Thanks for opening a PR! Your contribution is much appreciated.
To make sure your PR is handled as smoothly as possible we request that
you follow the checklist sections below.
Choose the right checklist for the change(s) that you're making:

## For Contributors

### Improving Documentation

- Run `pnpm prettier-fix` to fix formatting issues before opening the
PR.
- Read the Docs Contribution Guide to ensure your contribution follows
the docs guidelines:
https://nextjs.org/docs/community/contribution-guide

### Adding or Updating Examples

- The ""examples guidelines"" are followed from our contributing doc
https://github.com/vercel/next.js/blob/canary/contributing/examples/adding-examples.md
- Make sure the linting passes by running `pnpm build && pnpm lint`. See
https://github.com/vercel/next.js/blob/canary/contributing/repository/linting.md

### Fixing a bug

- Related issues linked using `fixes #number`
- Tests added. See:
https://github.com/vercel/next.js/blob/canary/contributing/core/testing.md#writing-tests-for-nextjs
- Errors have a helpful link attached, see
https://github.com/vercel/next.js/blob/canary/contributing.md

### Adding a feature

- Implements an existing feature request or RFC. Make sure the feature
request has been accepted for implementation before opening a PR. (A
discussion must be opened, see
https://github.com/vercel/next.js/discussions/new?category=ideas)
- Related issues/discussions are linked using `fixes #number`
- e2e tests added
(https://github.com/vercel/next.js/blob/canary/contributing/core/testing.md#writing-tests-for-nextjs)
- Documentation added
- Telemetry added. In case of a feature if it's used or not.
- Errors have a helpful link attached, see
https://github.com/vercel/next.js/blob/canary/contributing.md


## For Maintainers

- Minimal description (aim for explaining to someone not on the team to
understand the PR)
- When linking to a Slack thread, you might want to share details of the
conclusion
- Link both the Linear (Fixes NEXT-xxx) and the GitHub issues
- Add review comments if necessary to explain to the reviewer the logic
behind a change

### What?

### Why?

### How?

Closes NEXT-
Fixes #

-->",1,1,2,1,11,5,0.45
65df0c37c1edd746e9d83bd6d48fd152c8f5b192,nextjs-bot,2025-07-04 23:24:30+00:00,v15.4.0-canary.114,34,34,68,38,0,0,
f261039200d92b2796dc04f45814457994458c64,gnoff,2025-07-04 21:53:09+00:00,"[dynamicIO] Don't abort prospective render on sync access during SSR (#81258)

When filling caches we never want to let sync IO interrupt the cache
filling render. We already handled this for the react-server render
where most caches live. But modules are a form of caches and they
similarly rely on the prospective render to ""fill"" their entry. Prior to
this change during SSR prerenders a sync IO could cause the prospective
render to abort early. This led to the case where the final render would
also potentially abort early for something like a serial sync IO in
module scope.",107,20,127,7,162,136,0.84
2d19dc626babcaf28665c270e1b58d717846bbb9,unstubbable,2025-07-04 20:09:23+00:00,"[dynamicIO] Use owner stacks for dynamic validation errors (#81277)

With recent improvements in React, and after switching to the React
builds for Node.js in #81048, we can now generate better dynamic
validation error stacks in dev mode by utilizing owner stacks instead of
component stacks.

For async I/O, we're using the owner stack exclusively. For sync I/O
we're appending the owner stack to the call stack. In a future iteration
we might instead log the original error as-is where it occurs, and let
`patchErrorInspectNodeJS` handle the owner stack appending as a general
solution.

Additionally, we're now guiding users in the build-time error messages
to using `next dev` for further debugging of dynamic validation errors –
or, alternatively, using `next build --debug-prerender`.

closes NAR-149",339,157,496,25,331,294,0.89
8d789925573d8ac092703a65f6ce372b0c573eda,eps1lon,2025-07-04 19:23:50+00:00,"[sourcemaps] Ignore-list sources whose sourcemaps ignore-list everything (#81231)

webpack-only at the moment since I have no easy stack to test this on in Turbopack until we sourcemap the Turbopack runtime.

This applies the same heuristic Chrome uses. For sources whose associated sourcemap ignores everyone of its sources, we ignore-list that source even if we didn't find a mapping. This is similar to other common heuristic where the closest mapping is used when no exact mapping exists.",213,147,360,32,540,451,0.84
05d179cb16eee28437ee72fdd4886f2278c8d925,unstubbable,2025-07-04 18:41:21+00:00,"Allow `pnpm build` to be run when offline (#81273)

When running `pnpm build` in the Next.js repo without an internet
connection, this currently fails while trying to download the AMP
`validator_wasm.js` file. We can fix this, and thus enable offline
support for `pnpm build`, by moving the download of this file from the
`precompile` task to the `ncc_amphtml_validator` task. The file is then
committed to `src/compiled/amphtml-validator`, and later copied into
`dist/compiled/amphtml-validator` as part of the build command, without
the need to trigger a request.",2689,17,2706,25,331,294,0.89
383e000d380e60567a946ef820bd2af1e7459f9e,eps1lon,2025-07-04 16:47:54+00:00,"[sourcemaps] ignore-list Webpack runtime (#81229)

The way this works in dev is by assigning a dummy sourcemap to the Webpack runtime that ignore-lists everything. The mappings will will be incorrect in development. Production sourcemaps will be correct since those emit real sourcemaps for the webpack runtime where we just start ignore-listing modules that look like Webpack runtime.

Chrome already has this heuristic where it ignore-lists a source if its sourcemap ignore-lists every source. We'll use the same heuristic in the terminal and Redbox in a follow-up. We'll implement this heuristic for the Redbox and terminal in a follow-up.


https://github.com/user-attachments/assets/b250e61d-c6f9-49b6-85c4-8bdd54275a01

Closes https://linear.app/vercel/issue/NEXT-4409/",66,4,70,32,540,451,0.84
a0a882e063b95302c6f14f7428005f8cb60175ad,eps1lon,2025-07-04 16:21:10+00:00,"Current behavior for module evaluation sourcemapping (#73737)

Looks pretty bad. Most of it is due to added functions by bundlers that aren't sourcemapped.",178,72,250,32,540,451,0.84
dc48e551fa956d6c992f59aaf76b033c656d6ec7,mischnic,2025-07-04 16:14:48+00:00,"Turbopack: fix instrumentation-edge layer name (#81304)

A typo

Regression from https://github.com/vercel/next.js/pull/80388",1,1,2,34,340,285,0.84
e574dcb2e11ec80daa68015540f7b53cf5694675,mischnic,2025-07-04 14:53:06+00:00," Turbopack: sourceMappingURL for Node.js runtime chunk (#81300)

The file was generated, but the comment referencing it was missing.
Copy the logic over from the browser runtime chunk",21,5,26,34,340,285,0.84
999035c772d879ef3b633695858fc4bddd579b33,kdy1,2025-07-04 13:43:06+00:00,"perf(turbopack): Make `File` => json faster (#81279)

### What?

Considering the way `serde_json` works, I expect this to be faster.
Also, a JSON string is very likely to be a single `bytes::Bytes` already, so it would not regress the memory usage.

### Why?

<img width=""843"" alt=""image""
src=""https://github.com/user-attachments/assets/2c5ebb0b-335c-4ca1-aebd-64a6da9e0671""
/>",2,1,3,3,669,541,0.81
c12c9c1f78ad384270902f0890dc4cd341408105,eps1lon,2025-07-04 08:24:02+00:00,[test] Keep Playwright stackframes out of tests (#81240),16,62,78,32,540,451,0.84
0dada4a10425bfdc83bb6e7301ff756fe8ce8f48,kdy1,2025-07-04 06:51:44+00:00,"build: Update `swc_core` to `v30.1.1` (#81276)

### What?

ChangeLog: http://github.com/swc-project/swc/compare/swc_core%40v30.0.1...swc_core%40v30.1.1

### Why?

To apply

 - https://github.com/swc-project/swc/pull/10772
 - https://github.com/swc-project/swc/pull/10773

### How?

Closes PACK-4995",26,35,61,3,669,541,0.81
ed892f70c388cc71ec588d2cfd71a446eff79f89,gaojude,2025-07-04 01:44:24+00:00,"Add regression test for conflicting search and route params (#81249)

Follow-up to https://github.com/vercel/next.js/pull/81209",91,0,91,2,134,108,0.81
f5c9910881a1547074ef035dfc41d40667975c71,lukesandberg,2025-07-04 00:24:06+00:00,"[turbopack] Remove unused no_move_vec code (#81141)

A `pub use` statement was obscuring that half the code is dead.",0,108,108,7,83,69,0.83
250f008b8a94d889391ff9a838409c46d9352b0d,vercel-release-bot,2025-07-04 00:19:57+00:00,"Update Rspack development test manifest (#81219)

This auto-generated PR updates the development integration test manifest used when testing Rspack.",37,39,76,18,0,0,
9f99743ef8aee158bc1c086cfedbec35ce771b22,nextjs-bot,2025-07-03 23:25:49+00:00,v15.4.0-canary.113,34,34,68,38,0,0,
5c59feb79757d7416f977d66f53f7cc0d456d458,ijjk,2025-07-03 23:21:32+00:00,"Ensure resolvedPathname normalizes trailing slash (#81265)

Fixes case with trailing slash from refactoring done in
https://github.com/vercel/next.js/pull/81144",6,1,7,13,1020,947,0.93
45a5405de21fe158e93aec6441e3ed70399323dd,ztanner,2025-07-03 21:58:27+00:00,"bugfix: propagate staleTime to seeded prefetch entry (#81263)

In #71280, we hooked up the server-side `staleTime` header to the
client-side prefetch cache. This means that if the server responds with
a staleTime value, the client router will use that rather than the
previous heuristic when determining if a prefetch entry can be reused.

However, there was missing functionality to set a proper staleTime value
for the initially seeded prefetch entry (aka the first page visit). In
the case of customizing staleTimes, this meant that navigations back to
the original page would defer back to the old stale heuristic, which
would differ from subsequent navigations that were properly seeded with
a staleTime.

Separately, I believe that it's problematic that if the `staleTime`
header is present, that we honor that and only set a fresh/stale cache
status, because the newer heuristic doesn't consider the `reusable`
cache status. This should probably be flagged to the clientSegmentCache
flag. However, to minimize the changes here, I've only addressed this
particular case.",65,6,71,7,633,579,0.91
c450cd83d1ad34e7906582573584956f401feb2a,lukesandberg,2025-07-03 21:09:48+00:00,"[turbopack] Remove a vec clone from `primary_chunkable_referenced_modules`  (#81206)

Remove a vec clone when resolving module primary references.  Since it is stored in a turbotask we can just pass around a ReadRef to the Vec.

By avoiding the copy we make the `ModulesWithRefData` type a little smaller and should speed up the loop, the cost is some additional indirection when iterating, however all callers only iterate once so this ends up as a win in all cases.",3,5,8,7,83,69,0.83
b4698a74ae05ca856c88b56b49ce214cb2e3679d,ijjk,2025-07-03 20:26:24+00:00,"Update matching query and route param handling (#81209)

Validated this is un-necessary and handling an edge case we don't need
to be worried about and it's better to leave the query param for this
case instead

Deploy tests checked
https://github.com/vercel/vercel/actions/runs/16058085256/job/45317414336?pr=13522
and
https://github.com/vercel/next.js/actions/runs/16059083218/job/45320691422",37,29,66,13,1020,947,0.93
1c677a233b50d71d9f428dfcd5f4b343b3dcb2cd,mischnic,2025-07-03 20:16:16+00:00,"Turbopack: prevent ParseResult recomputation (#81244)

There was a mistake here: `process_parse_result` consumes the `ParseResult` via `ReadRef::try_unwrap`, but then inside of that, `EsmExports ::code_gen` does another read of the same cell with `parse_result.await?`. That required a recomputation because the cell was destroyed shortly before.
Don't do that anymore.

Now, this is the only remaining recomputation, but that is somewhat expected (multiple facade modules have the same empty `ParseResult`):

![Bildschirmfoto 2025-07-03 um 16 18 15](https://github.com/user-attachments/assets/468e1ef6-3e5a-4508-be48-da037bd44263)",57,46,103,34,340,285,0.84
d888428df0ebd0d2ee3c5914373864dc6b298736,huozhi,2025-07-03 20:01:07+00:00,[devtool] css imports and share css variables (#81236),315,118,433,24,1020,896,0.88
fb9334d0db8e49888c530fdb6c4e61aa2aa3a7dd,ijjk,2025-07-03 19:41:50+00:00,"Ensure default run name is correct for deploy tests (#81255)

Looks like when the retry workflow is triggered from the release
workflow it doesn't have the default input like it should so this adds
the fallback inline for the run-name.",1,1,2,13,1020,947,0.93
1296528038a0c1aa011c4b7bb406f3f090c0c6e8,mischnic,2025-07-03 18:47:53+00:00,"Turbopack: delete module_context.remove_unused_exports (#81239)

#81238 moved this into the chunking context.",23,84,107,34,340,285,0.84
5557bdda5173e75c1337452cc71a720aa0dee46b,acdlite,2025-07-03 18:03:33+00:00,"[Segment Cache] Support third-party redirects in output: ""export"" mode (#81247)

In output: ""export"" mode, we can't use headers to request a particular
segment. Instead, we encode the extra request information into the URL.
This is not part of the ""public"" interface of the app; it's an internal
Next.js implementation detail that the app developer should not need to
concern themselves with.

For example, to request a segment:

- Path passed to <Link>:   /path/to/page
- Path passed to fetch:    /path/to/page/__next-segments/_tree

*(This is not the exact protocol, just an illustration.)*

Before we do that, though, we need to account for redirects. Even in
output: ""export"" mode, a proxy might redirect the page to a different
location, but we shouldn't assume or expect that they also redirect all
the segment files, too.

To check whether the page is redirected, we perform a range request of
the first N bytes of the HTML document, just enough to verify the
document comes from the same build. The canonical URL is determined from
the response.

Then we can use the canonical URL to request the route tree.

Note: We could embed the route tree into the HTML document, to avoid a
second request. We're not doing that currently because it would make the
HTML document larger and affect normal page loads.",264,75,339,3,145,131,0.9
f5376f422362f9c312a8e84ad258e866d12d2ee2,mischnic,2025-07-03 17:50:07+00:00,"Turbopack: codegen modules without module graph (#81238)

- We didn't actually need the module graph in the chunk item, so this now ensures that we only codegen modules once, regardless on how many pages they are (in dev, nothing changes about builds).
- For that, move the export usage information onto the chunking context, just like the module id functionality.",530,461,991,34,340,285,0.84
b60f614ed9da0799b49b91179660937dd6708718,nextjs-bot,2025-07-03 17:48:46+00:00,v15.4.0-canary.112,34,34,68,38,0,0,
b8d5f262429f6543e975fd11255297883dace1d6,mischnic,2025-07-03 17:12:11+00:00,"Turbopack: move write_version feature to env var (#81250)

This is useful for debugging infinite file write loop situations. Put it behind the env var `TURBO_ENGINE_WRITE_VERSION=1` to be able to debug this if other people want to debug this without recompiling Next.js",7,5,12,34,340,285,0.84
7c048e337883c172b7a5ff8685426c7d838da6d7,nextjs-bot,2025-07-03 17:05:43+00:00,v15.4.0-canary.111,34,34,68,38,0,0,
f5f559220a09880ed8d8d55e73c4bd65dcc89af1,timneutkens,2025-07-03 17:02:13+00:00,"Fix NEXT_CPU_PROF during development (#81248)

## What?

`next dev` spawns a forked process that wouldn't be instrumented because
`cpu-profile.ts` only runs in `cli/next-dev.ts` which is the process
that boots the forked process. This adds the initialization to the
forked process too.",2,0,2,2,1020,933,0.91
e2422f4c94685e040d868033a6d666ccc183d6fd,lukesandberg,2025-07-03 15:43:01+00:00,"[turbopack] Add FileSystemPath.has_extension and optimize module graph operations (#81205)

## Optimize file extension checks and module graph traversal

### What?
This PR introduces several optimizations:

1. Added a new `has_extension()` method to `FileSystemPath` for more efficient extension checking
2. Improved module graph traversal with a dedicated `has_entry_module()` method
3. Reordered code in `AppProject` to avoid unnecessary clones
4. Simplified CSS resource handling in client reference manifest generation

### Why?
These changes improve performance by:
- Replacing string comparisons with more efficient suffix matching for file extensions
- Providing a direct way to check if a module is an entry point without iterating all entries
- Avoiding unnecessary clones operations when possible",101,98,199,7,83,69,0.83
8ecf21e59f219d4f91ba19eafd3f32bdc11a841d,fireairforce,2025-07-03 15:24:20+00:00,"perf(next-napi): optimize output assets collection using flat_map (#81222)

<!-- Thanks for opening a PR! Your contribution is much appreciated.
To make sure your PR is handled as smoothly as possible we request that you follow the checklist sections below.
Choose the right checklist for the change(s) that you're making:

## For Contributors

### Improving Documentation

- Run `pnpm prettier-fix` to fix formatting issues before opening the PR.
- Read the Docs Contribution Guide to ensure your contribution follows the docs guidelines: https://nextjs.org/docs/community/contribution-guide

### Adding or Updating Examples

- The ""examples guidelines"" are followed from our contributing doc https://github.com/vercel/next.js/blob/canary/contributing/examples/adding-examples.md
- Make sure the linting passes by running `pnpm build && pnpm lint`. See https://github.com/vercel/next.js/blob/canary/contributing/repository/linting.md

### Fixing a bug

- Related issues linked using `fixes #number`
- Tests added. See: https://github.com/vercel/next.js/blob/canary/contributing/core/testing.md#writing-tests-for-nextjs
- Errors have a helpful link attached, see https://github.com/vercel/next.js/blob/canary/contributing.md

### Adding a feature

- Implements an existing feature request or RFC. Make sure the feature request has been accepted for implementation before opening a PR. (A discussion must be opened, see https://github.com/vercel/next.js/discussions/new?category=ideas)
- Related issues/discussions are linked using `fixes #number`
- e2e tests added (https://github.com/vercel/next.js/blob/canary/contributing/core/testing.md#writing-tests-for-nextjs)
- Documentation added
- Telemetry added. In case of a feature if it's used or not.
- Errors have a helpful link attached, see https://github.com/vercel/next.js/blob/canary/contributing.md


## For Maintainers

- Minimal description (aim for explaining to someone not on the team to understand the PR)
- When linking to a Slack thread, you might want to share details of the conclusion
- Link both the Linear (Fixes NEXT-xxx) and the GitHub issues
- Add review comments if necessary to explain to the reviewer the logic behind a change

### What?

### Why?

### How?

Closes NEXT-
Fixes #

-->

Replace manual loop with `extend()` calls with a single `flat_map().collect()` operation to reduce function call overhead and improve memory allocation efficiency when collecting output assets from multiple endpoints.",4,4,8,3,8,8,1.0
7ed2d23ae59f557e99c0e512a986e1c4fe2fb5e9,eps1lon,2025-07-03 13:23:27+00:00,[devtools] Omit line/col numbers for anonymous sources (#81223),206,192,398,32,540,451,0.84
c28261568f50c47595b06dce631ac89c07338d07,MichalMoravik,2025-07-03 10:45:47+00:00,"Update caching.mdx (#81185)

Updating caching guide to be more specific on fetch API. Solves
https://github.com/vercel/next.js/issues/81183

<!-- Thanks for opening a PR! Your contribution is much appreciated.
To make sure your PR is handled as smoothly as possible we request that
you follow the checklist sections below.
Choose the right checklist for the change(s) that you're making:

## For Contributors

### Improving Documentation

- Run `pnpm prettier-fix` to fix formatting issues before opening the
PR.
- Read the Docs Contribution Guide to ensure your contribution follows
the docs guidelines:
https://nextjs.org/docs/community/contribution-guide

### Adding or Updating Examples

- The ""examples guidelines"" are followed from our contributing doc
https://github.com/vercel/next.js/blob/canary/contributing/examples/adding-examples.md
- Make sure the linting passes by running `pnpm build && pnpm lint`. See
https://github.com/vercel/next.js/blob/canary/contributing/repository/linting.md

### Fixing a bug

- Related issues linked using `fixes #number`
- Tests added. See:
https://github.com/vercel/next.js/blob/canary/contributing/core/testing.md#writing-tests-for-nextjs
- Errors have a helpful link attached, see
https://github.com/vercel/next.js/blob/canary/contributing.md

### Adding a feature

- Implements an existing feature request or RFC. Make sure the feature
request has been accepted for implementation before opening a PR. (A
discussion must be opened, see
https://github.com/vercel/next.js/discussions/new?category=ideas)
- Related issues/discussions are linked using `fixes #number`
- e2e tests added
(https://github.com/vercel/next.js/blob/canary/contributing/core/testing.md#writing-tests-for-nextjs)
- Documentation added
- Telemetry added. In case of a feature if it's used or not.
- Errors have a helpful link attached, see
https://github.com/vercel/next.js/blob/canary/contributing.md


## For Maintainers

- Minimal description (aim for explaining to someone not on the team to
understand the PR)
- When linking to a Slack thread, you might want to share details of the
conclusion
- Link both the Linear (Fixes NEXT-xxx) and the GitHub issues
- Add review comments if necessary to explain to the reviewer the logic
behind a change

### What?

### Why?

### How?

Closes NEXT-
Fixes #

-->

---------

Co-authored-by: Joseph <sephxd1234@gmail.com>
Co-authored-by: Joseph <joseph.chamochumbi@vercel.com>",19,19,38,1,2,1,0.5
81f0c7645b360d4056976ada0dc2e81de49e08e8,huozhi,2025-07-03 10:15:31+00:00,"[devtool] styling fixes (#81228)

### Styling fixes

* The overlay needs to have the highiest index, it's regressed from the change in #80974 while tweaking around new panel UI
* Noticed the route info needs to be set as nowrap when pathname is super long

| After | Before |
|:-- |:-- |
| ![image](https://github.com/user-attachments/assets/0b4b2583-9b71-4a42-9255-ccd555afb3af) |  ![image](https://github.com/user-attachments/assets/16f5c3ae-2f68-4f53-aaef-983a1e4c88f6)  |
| ![image](https://github.com/user-attachments/assets/8f6f234a-a29b-4c4d-abf9-f75b0cb0b294) | ![image](https://github.com/user-attachments/assets/2aef4bb4-320e-43c3-984e-45d1b28bf0fc) |",3,1,4,24,1020,896,0.88
4551373c972d0a9c49874258f66ffff73d7109c3,ethanniser,2025-07-03 09:38:48+00:00,"Docs: include effect in docs for default optimized libraries (#81203)

This PR updates the docs for `optimizePackageImports` default optimized
packages to include `effect` and the `@effect/*` packages

These were added by 9f647f311fc051ca65a3fd810533ed1d5254020b 

<!-- Thanks for opening a PR! Your contribution is much appreciated.
To make sure your PR is handled as smoothly as possible we request that
you follow the checklist sections below.
Choose the right checklist for the change(s) that you're making:

## For Contributors

### Improving Documentation

- Run `pnpm prettier-fix` to fix formatting issues before opening the
PR.
- Read the Docs Contribution Guide to ensure your contribution follows
the docs guidelines:
https://nextjs.org/docs/community/contribution-guide

### Adding or Updating Examples

- The ""examples guidelines"" are followed from our contributing doc
https://github.com/vercel/next.js/blob/canary/contributing/examples/adding-examples.md
- Make sure the linting passes by running `pnpm build && pnpm lint`. See
https://github.com/vercel/next.js/blob/canary/contributing/repository/linting.md

### Fixing a bug

- Related issues linked using `fixes #number`
- Tests added. See:
https://github.com/vercel/next.js/blob/canary/contributing/core/testing.md#writing-tests-for-nextjs
- Errors have a helpful link attached, see
https://github.com/vercel/next.js/blob/canary/contributing.md

### Adding a feature

- Implements an existing feature request or RFC. Make sure the feature
request has been accepted for implementation before opening a PR. (A
discussion must be opened, see
https://github.com/vercel/next.js/discussions/new?category=ideas)
- Related issues/discussions are linked using `fixes #number`
- e2e tests added
(https://github.com/vercel/next.js/blob/canary/contributing/core/testing.md#writing-tests-for-nextjs)
- Documentation added
- Telemetry added. In case of a feature if it's used or not.
- Errors have a helpful link attached, see
https://github.com/vercel/next.js/blob/canary/contributing.md


## For Maintainers

- Minimal description (aim for explaining to someone not on the team to
understand the PR)
- When linking to a Slack thread, you might want to share details of the
conclusion
- Link both the Linear (Fixes NEXT-xxx) and the GitHub issues
- Add review comments if necessary to explain to the reviewer the logic
behind a change

### What?

### Why?

### How?

Closes NEXT-
Fixes #

-->

Co-authored-by: Joseph <joseph.chamochumbi@vercel.com>",2,0,2,1,1,1,1.0
2212ea72dd1dd87df95d9b5090d42157daea24cd,mischnic,2025-07-03 09:04:28+00:00,"Turbopack: exclude resolve-rewrites if possible (#80939)

Implement this
https://github.com/vercel/next.js/blob/6c4ca1cb12a36d23ddd86fd13e0c87c72d628317/packages/next/src/build/create-compiler-aliases.ts#L174-L181
in Turbopack as well.

This would not be necessary if we consumed Next.js internal files in ESM and they were marked as `sideEffects: free`...",7,16,23,34,340,285,0.84
82115d6e5e3bb746846af35dfe61169d00cb8f70,icyJoseph,2025-07-03 08:44:21+00:00,"Docs/after function mdx fix (#81174)

The current formatting caused the mdx parser to do `details > p >
summary` - which caused a hydration error for invalid HTML, but also
just rendered `> Details`

<img width=""501"" alt=""Screenshot 2025-07-02 at 10 38 51""
src=""https://github.com/user-attachments/assets/61819edc-75bb-4824-a000-71a4dc880905""
/>

After:

<img width=""481"" alt=""Screenshot 2025-07-02 at 10 47 23""
src=""https://github.com/user-attachments/assets/d42c2087-ce78-4944-a580-e4630cfa864d""
/>",2,1,3,7,70,54,0.77
0bad0e5d87aa2d40afdc6c8e8bde2fde0122daee,mischnic,2025-07-03 08:03:34+00:00,"chore(turbopack): Remove unused dependencies reported by cargo-shear (#81221)

<!-- Thanks for opening a PR! Your contribution is much appreciated.
To make sure your PR is handled as smoothly as possible we request that you follow the checklist sections below.
Choose the right checklist for the change(s) that you're making:

## For Contributors

### Improving Documentation

- Run `pnpm prettier-fix` to fix formatting issues before opening the PR.
- Read the Docs Contribution Guide to ensure your contribution follows the docs guidelines: https://nextjs.org/docs/community/contribution-guide

### Adding or Updating Examples

- The ""examples guidelines"" are followed from our contributing doc https://github.com/vercel/next.js/blob/canary/contributing/examples/adding-examples.md
- Make sure the linting passes by running `pnpm build && pnpm lint`. See https://github.com/vercel/next.js/blob/canary/contributing/repository/linting.md

### Fixing a bug

- Related issues linked using `fixes #number`
- Tests added. See: https://github.com/vercel/next.js/blob/canary/contributing/core/testing.md#writing-tests-for-nextjs
- Errors have a helpful link attached, see https://github.com/vercel/next.js/blob/canary/contributing.md

### Adding a feature

- Implements an existing feature request or RFC. Make sure the feature request has been accepted for implementation before opening a PR. (A discussion must be opened, see https://github.com/vercel/next.js/discussions/new?category=ideas)
- Related issues/discussions are linked using `fixes #number`
- e2e tests added (https://github.com/vercel/next.js/blob/canary/contributing/core/testing.md#writing-tests-for-nextjs)
- Documentation added
- Telemetry added. In case of a feature if it's used or not.
- Errors have a helpful link attached, see https://github.com/vercel/next.js/blob/canary/contributing.md


## For Maintainers

- Minimal description (aim for explaining to someone not on the team to understand the PR)
- When linking to a Slack thread, you might want to share details of the conclusion
- Link both the Linear (Fixes NEXT-xxx) and the GitHub issues
- Add review comments if necessary to explain to the reviewer the logic behind a change

### What?

### Why?

### How?

Closes NEXT-
Fixes #

-->",4,9,13,34,340,285,0.84
36764b9916f317d5d5bd1c430e44802906abe82a,mischnic,2025-07-03 07:54:42+00:00,"Turbopack: fix source map panic (#81212)

Fix a panic, related to scope hoisting.
```
An error occurred while generating the chunk item X
Caused by:
- Cannot decode dummy BytePos
```

```
thread 'tokio-runtime-worker' panicked at turbopack/crates/turbopack-ecmascript/src/lib.rs:2431:13:
Cannot decode dummy BytePos
stack backtrace:
   0: __rustc::rust_begin_unwind
             at /rustc/59aa1e873028948faaf8b97e5e02d4db340ad7b1/library/std/src/panicking.rs:697:5
   1: core::panicking::panic_fmt
             at /rustc/59aa1e873028948faaf8b97e5e02d4db340ad7b1/library/core/src/panicking.rs:75:14
   2: <turbopack_ecmascript::CodeGenResultComments>::decode_bytepos
             at next.js/turbopack/crates/turbopack-ecmascript/src/lib.rs:2431:13
   3: <turbopack_ecmascript::CodeGenResultCommentsConsumable as swc_common::comments::Comments>::has_leading
             at next.js/turbopack/crates/turbopack-ecmascript/src/lib.rs:2499:21
   4: <swc_ecma_codegen::Emitter<swc_ecma_codegen::text_writer::basic_impl::JsWriter<&mut alloc::vec::Vec<u8>>, turbopack_ecmascript::CodeGenResultSourceMap>>::has_leading_comment
             at .cargo/registry/src/index.crates.io-1949cf8c6b5b557f/swc_ecma_codegen-15.0.1/src/lib.rs:839:24
   5: <swc_ecma_codegen::Emitter<swc_ecma_codegen::text_writer::basic_impl::JsWriter<&mut alloc::vec::Vec<u8>>, turbopack_ecmascript::CodeGenResultSourceMap>>::has_leading_comment
             at .cargo/registry/src/index.crates.io-1949cf8c6b5b557f/swc_ecma_codegen-15.0.1/src/lib.rs:830:29
```",25,7,32,34,340,285,0.84
97958668025bedbc51e188cc01143e9be80f764f,mischnic,2025-07-03 07:37:57+00:00,"Fix future Rust warnings (#81217)

I tried to upgrade to nightly-2025-07-02, but rust-analyzer is just completely broken:

![Bildschirmfoto 2025-07-03 um 08.52.48.png](https://graphite-user-uploaded-assets-prod.s3.amazonaws.com/sjZSbv6AFeuDg7Gb9rma/56c6fece-893c-41fb-98e6-fa225b325225.png)

So I reverted that again but here are all fixes to the new compiler warnings:
```
warning: lifetime flowing from input to output with different syntax can be confusing
  --> turbopack/crates/turbo-tasks/src/read_ref.rs:89:27
   |
89 |     fn value_debug_format(&self, depth: usize) -> ValueDebugFormatString {
   |                           ^^^^^                   ---------------------- the lifetime gets resolved as `'_`
   |                           |
   |                           this lifetime flows to the output
   |
   = note: `#[warn(mismatched_lifetime_syntaxes)]` on by default
help: one option is to remove the lifetime for references and use the anonymous lifetime for paths
   |
89 |     fn value_debug_format(&self, depth: usize) -> ValueDebugFormatString<'_> {
   |                                                                         ++++

```",38,34,72,34,340,285,0.84
fbc988d042e7a421d1e2aaf993eb6671d8614cf0,icyJoseph,2025-07-03 07:07:29+00:00,"docs: Getting started pages and search params (#80616)

Closes:
https://linear.app/vercel/issue/DOC-4789/getting-started-layout-and-pages-search-params

---------

Co-authored-by: Delba de Oliveira <32464864+delbaoliveira@users.noreply.github.com>",105,2,107,7,70,54,0.77
289f5d55f3514b362e416a168341812a00b1c23b,mischnic,2025-07-03 06:44:15+00:00,"Sync NFT test suite from upstream (#81189)

Prompted by https://github.com/vercel/next.js/pull/81186


zeromq fails with:
```
2025-07-02T18:18:18.6796394Z         FAIL [   2.187s] turbopack::node-file-trace node_file_trace_noop_backing_storage::case_109_zeromq
Error: Failed to load zeromq.js addon.node: Error: ENOENT: no such file or directory,
open '/private/var/folders/s5/952zt8mn6ms05__7r749hkjm0000gn/T/tests_output/persistent_cache_node-file-trace/integration/zeromq.js/tests/node-file-trace/node_modules/.pnpm/zeromq@6.4.2/node_modules/zeromq/build/manifest.json'
```
probably because of `__importDefault` here
```js
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { ""default"": mod };
};
const fs_1 = __importDefault(require(""fs""));
const path_1 = __importDefault(require(""path""));
const manifest = JSON.parse(fs_1.default.readFileSync(path_1.default.resolve(buildDir, ""manifest.json""), ""utf-8""));
```
Created PACK-4987 to track that",3350,1077,4427,34,340,285,0.84
ee1026494618291b62a23be57546dc41e17aff3e,mischnic,2025-07-03 06:36:36+00:00,"Turbopack: add `EcmascriptExports::Unknown` (#81214)

Closes PACK-4881

Previously, you'd get both a `Parsing ecmascript source code failed`
error and a `export Abc was not found in module` error if anything
imported from the module with the parse error (because it had
`EcmascriptExports::None` in that case).",48,2,50,34,340,285,0.84
e358e301dc00e4d18e00da4bb80e53c9087af423,mischnic,2025-07-03 05:19:33+00:00,"Format Turbopack NFT tests (#81199)

<!-- Thanks for opening a PR! Your contribution is much appreciated.
To make sure your PR is handled as smoothly as possible we request that you follow the checklist sections below.
Choose the right checklist for the change(s) that you're making:

## For Contributors

### Improving Documentation

- Run `pnpm prettier-fix` to fix formatting issues before opening the PR.
- Read the Docs Contribution Guide to ensure your contribution follows the docs guidelines: https://nextjs.org/docs/community/contribution-guide

### Adding or Updating Examples

- The ""examples guidelines"" are followed from our contributing doc https://github.com/vercel/next.js/blob/canary/contributing/examples/adding-examples.md
- Make sure the linting passes by running `pnpm build && pnpm lint`. See https://github.com/vercel/next.js/blob/canary/contributing/repository/linting.md

### Fixing a bug

- Related issues linked using `fixes #number`
- Tests added. See: https://github.com/vercel/next.js/blob/canary/contributing/core/testing.md#writing-tests-for-nextjs
- Errors have a helpful link attached, see https://github.com/vercel/next.js/blob/canary/contributing.md

### Adding a feature

- Implements an existing feature request or RFC. Make sure the feature request has been accepted for implementation before opening a PR. (A discussion must be opened, see https://github.com/vercel/next.js/discussions/new?category=ideas)
- Related issues/discussions are linked using `fixes #number`
- e2e tests added (https://github.com/vercel/next.js/blob/canary/contributing/core/testing.md#writing-tests-for-nextjs)
- Documentation added
- Telemetry added. In case of a feature if it's used or not.
- Errors have a helpful link attached, see https://github.com/vercel/next.js/blob/canary/contributing.md


## For Maintainers

- Minimal description (aim for explaining to someone not on the team to understand the PR)
- When linking to a Slack thread, you might want to share details of the conclusion
- Link both the Linear (Fixes NEXT-xxx) and the GitHub issues
- Add review comments if necessary to explain to the reviewer the logic behind a change

### What?

### Why?

### How?

Closes NEXT-
Fixes #

-->",790,736,1526,34,340,285,0.84
c66739e60fbd3d119e18ae00354e2dfcbb2a50bd,ijjk,2025-07-03 03:07:42+00:00,"Fix if condition in retry workflow (#81211)

Fixes: https://github.com/vercel/next.js/actions/runs/16040442318",1,1,2,13,1020,947,0.93
2db64b485eb684212109a8e464382522c36db70a,ijjk,2025-07-03 02:57:07+00:00,"Skip alert as well for non-canary e2e deploy (#81210)

Follow-up to https://github.com/vercel/next.js/pull/81207",1,0,1,13,1020,947,0.93
ca8a0662356ec3064b4c577e8ce7af5656366014,ijjk,2025-07-03 02:46:25+00:00,"Only retry deploy tests for canary (#81207)

This avoids retrying/alerting if triggering the deploy tests with a
custom next tarball. The `run_name` is available as `display_title` [per
docs
here](https://docs.github.com/en/webhooks/webhook-events-and-payloads#workflow_run:~:text=The%20event%2Dspecific%20title%20associated%20with%20the%20run%20or%20the%20run%2Dname%20if%20set%2C%20or%20the%20value%20of%20run%2Dname%20if%20it%20is%20set%20in%20the%20workflow)

x-ref: [slack
thread](https://vercel.slack.com/archives/C04KC8A53T7/p1751485507582049)",3,0,3,13,1020,947,0.93
4cf90059c3ca91e8b2a4f718c98972b48aa08c2e,ijjk,2025-07-03 02:21:09+00:00,"Reuse resolvedPathname from prepare (#81194)

This applies the fixed `resolvedPathname` from
https://github.com/vercel/next.js/pull/81144 to the other route handlers
that were trying to build this value as well so we use single source of
truth.

Validated against our deploy tests
https://github.com/vercel/vercel/actions/runs/16038359282/job/45254959257?pr=13520
and
https://github.com/vercel/next.js/actions/runs/16038663582/job/45255920639",7,53,60,13,1020,947,0.93
ac393c2658ea12a579a5c89d903696d104e3a6fc,nextjs-bot,2025-07-02 23:24:48+00:00,v15.4.0-canary.110,34,34,68,38,0,0,
084825c2a548634cf660e98d8631d841f6b995a7,huozhi,2025-07-02 23:10:08+00:00,"[segment explorer] fix route path in top navbar (#81195)

* Remove the `app` prefix in top bar of route info as we only need to know the pathname. It's also removed in the new design
* `state.page` was only passed for panel ui but missing in segment explorer of dock indicator",5,4,9,24,1020,896,0.88
799b1be6652438dfd6ec71b25d51ac784f492aca,Cy-Tek,2025-07-02 20:39:14+00:00,"cleanup(turbopack) Show users an error message when Webpack loaders have a glob in only the extension (#81084)

This PR adds validation for webpack loader rules in Next.js
configuration to prevent a common issue where users define wildcard
extensions without corresponding wildcard patterns in the `as` option.
This situation causes all modules to be transformed into the same name,
resulting in duplicate module errors.

The changes:
- Add a new `InvalidLoaderRuleError` issue type that provides clear
error messages when this misconfiguration is detected
- Check if an extension contains a wildcard (`*`) but the `rename_as`
option does not
- Display helpful error messages with links to documentation when this
issue is found
- Update the `webpack_rules` function to accept the project path for
error reporting

This validation helps users avoid confusing duplicate module errors by
providing clear guidance on how to properly configure webpack loaders in
Next.js.


![image.png](https://graphite-user-uploaded-assets-prod.s3.amazonaws.com/IhNrutw2qOTgYcgE6MlR/6bae20b6-34b0-4643-9a5c-f580ba32c550.png)",88,6,94,3,16,16,1.0
6111192f4ad08c79856497942d48028a604dc0e5,fireairforce,2025-07-02 20:31:19+00:00,"feat(turbopack): turbo-esregex support captures method (#81119)

EsRegex support captures method, in utoo situation, we need Esregexp to
support captures the match string from user's regex config item.",46,0,46,3,8,8,1.0
21cae09ddfc898adf434e5844f0e966c1aada4f0,mischnic,2025-07-02 19:04:57+00:00,"Turbopack: lazily create syntax contexts for scope hoisting (#81193)

Previously, if 10k modules are merged together, it would create 10k syntax context for each of the 10k modules. That involves a TLS and a `Mutex`.
Most of these are never used, so instead create the contexts lazily with some interior mutability.
Now this step doesn't show up in the trace at all anymore (in one case, cutting build time from 10s to 5s)

https://vercel.slack.com/archives/C06PPGZ0FD3/p1751475796580989?thread_ts=1751302539.808369&cid=C06PPGZ0FD3",94,72,166,34,340,285,0.84
6ad8a1ecc3ecc3ca92a3e54a58b8a3ab6ebdd3b0,mischnic,2025-07-02 18:33:32+00:00,Bump lightningcss to not include browserslist-rs twice (#81184),10,30,40,34,340,285,0.84
52b185d81339820651fec76a67f5d4f73b8ca4ab,vercel-release-bot,2025-07-02 18:16:23+00:00,"Upgrade React from `7216c0f0-20250630` to `73aa744b-20250702` (#81192)


Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>",2694,2662,5356,18,0,0,
aef6ddc069323e17418c167f670b9a9350d5162b,bgw,2025-07-02 17:49:37+00:00,"Turbopack: Rewrite IntervalMap using a BTreeMap (#81095)

Changes:
- Rewrote using a `BTreeMap`. This makes `update` `O(log n)`. It was previously `O(n)` which could give accidentally-quadratic time complexity when inserting `n` intervals. We don't think we have enough SST files for this to have been an issue, but how this data structure is used could change over time, and it was a bit risky.
- There was some implicit `Option<T>` behavior in `IntervalMap` making it act like a sparse array. This made the type signature and behavior of some of its methods confusing. Removed that from `IntervalMap` and made the few callsites that actually need it explicitly use `Option<T>`.
- Added a small `NaiveIntervalMap` implementation along with a narrowly bounded `TinyInt` type, and prove the correctness of `replace`, `update`, and `iter` by exhaustively comparing against it.
- Added logic to merge adjacent intervals. This isn't really needed given how the map is currently used, but it's a possible optimization for some use-cases, and it helped align the behavior with `NaiveIntervalMap`.
- Use `RangeInclusive<T>` or `impl RangeBounds<T>` instead of just `(u64, u64)` so that the inclusive/exclusive behaviors are always as explicit as possible.

The implementation is not entirely optimal, but in part that's because it avoids using the nightly `btree_cursors` feature. However, the big-O time complexity should still be optimal.

Some additional minor changes to `turbopack/crates/turbo-persistence/src/compaction/selector.rs`:

- Avoid implicitly-overflowing `as u64` casts, prefer `from` and `try_from`.
- Make `spread` return a `u128`, since that's slightly more correct than a `saturating_add`, the callsites were casting it to a `u128` anyways.
- Add some more comments that are hopefully correct.",613,229,842,11,335,315,0.94
58bc2f112c0df424c2c9fe3f5c01bd9c7fe888a2,ijjk,2025-07-02 17:18:13+00:00,"Migrate usage of web-server in edge-ssr (#80915)

This continues the work for the `handlers` interface for the edge
runtime and re-uses the existing `route-module` interface we have
instead of initializing and using `web-server`/`base-server`.

Validated against our deploy tests
https://github.com/vercel/vercel/actions/runs/15987684940/job/45095833866?pr=13505
https://github.com/vercel/next.js/actions/runs/15987664161/job/45095390463",654,303,957,13,1020,947,0.93
1e9f598ba6b234442b0ff788598fa21096e7d4c9,huozhi,2025-07-02 16:48:03+00:00,[segment explorer] refactor boundary trigger with ui primitives (#81147),91,153,244,24,1020,896,0.88
543edced207fd65ffda70d6fe3af77fdd8b8093e,lukesandberg,2025-07-02 16:42:14+00:00,"[turbopack] Move global names onto the NativeFunction object (#81143)

### What?

Instead of a global `&'static NativeFunction`->`&'static str` map, just put the names onto the `NativeFunction` struct and delete the global map.

### Why?

Using a RwLock means every read requires a `fetch_add` to update the reader count, so if lookups are performed on multiple threads we can expect contention on the RwLock reader count.

Using a OnceLock instead just means we need to perform a consistent read which shouldn't trigger cross processor cache traffic.

I don't know that this is a problem, and if it is it would only show up during PC serialization.",24,24,48,7,83,69,0.83
af0dd9eef47676f0539f963ed9e28006bf5a9a78,huozhi,2025-07-02 15:58:26+00:00,"[segment explorer] custom tooltip (#80974)

## Feature

Add a custom tooltip for DevTool, it can position based on `direction`, `arrowSize` and `offset`.

### Segment Explorer Case
https://github.com/user-attachments/assets/dcdce824-8731-4546-a3d4-ba847fb3b86a

### Storybook
https://github.com/user-attachments/assets/70cd7cba-4fd4-4401-b69d-a0c38e54772d",554,15,569,24,1020,896,0.88
07a6e5b588d1f8aea55b78c9abab076206fae3f5,xusd320,2025-07-02 14:49:17+00:00,"perf(turbopack): let some Clone be conditional in insert_alias_option (#81175)

## What
As the title described.",7,9,16,1,12,5,0.42
5dac44820cdb54bcffeb31fdf534bed75db93649,sokra,2025-07-02 13:18:41+00:00,"Turbopack: fix and finish immutable tasks (#80996)

### What?

Fixes the problems with the implementation of immutable tasks, adds tests and debug asserts to ensure it's working.

* There was some confusion between children and dependencies. Children are not involved with immutablility, only dependencies are.
* Opt out of immutablility for reading collectibles and for getting an invalidator.
* Removed `#[turbo_tasks::function(invalidator)]` and the logic of discovering statically immutable with macro code. It won't work as local tasks are invisible and can cause dependencies


Follow-up changes:
* Technically immutability could be per cell instead of per task. A task produces immutable cells until it does something that depends on mutable cells or other opt-outs. It could be `RawVc::ImmutableCell` and the immutable flag would be only in `InProgressState` and not on a task.",312,218,530,12,957,847,0.89
cd3f86815f3ffefff8bb2143a7339655fd93621a,mischnic,2025-07-02 12:47:33+00:00,"Disable Turbopack manifest (#81170)

- Don't create update PRs anymore for the manifests
- Don't read the manifest when running tests",3,11,14,34,340,285,0.84
1eb5a426e23e96e4be3303da4a58effff552ae55,mischnic,2025-07-02 12:07:40+00:00,Turbopack: rename simple tree shaking (#81181),6,6,12,34,340,285,0.84
fa3e45ea158effc2e98800d349dfbddcbf21792d,kdy1,2025-07-02 12:02:12+00:00,"build(turbopack): Update `swc_core` to `v30.0.1` (#81179)

### What?

ChangeLog: https://github.com/swc-project/swc/compare/swc_core%40v29.4.2...swc_core%40v30.0.1

### Why?

Apply https://github.com/swc-project/swc/pull/10754 to fix preset-env",142,132,274,3,669,541,0.81
5efef452262235a19baee2e35c9acdb0c1cbd7e7,maral,2025-07-02 07:56:02+00:00,"Update caching.mdx (#81129)

### What?

Fix misleading information in the docs about mixing cached and uncached
`fetch` calls during dynamic rendering.

### Why?

I followed the guide (using Next.js 15.3.2) and tried it out with this
code:
```ts
  const joke = await fetch(""https://api.chucknorris.io/jokes/random"", {
    cache: ""no-cache"",
  });
  const jokeData = await joke.json();

  console.log(""Fetched joke:"", jokeData.value);

  const joke2 = await fetch(
    ""https://api.chucknorris.io/jokes/random?category=dev""
  );
  const jokeData2 = await joke2.json();
  console.log(""Fetched joke2:"", jokeData2.value);
```

After building and starting the production server, when I refresh the
page, both `jokeData.value` and `jokeData2.value` are different,
uncached. If I want the other `fetch` to be cached, I need to explicitly
enable caching, e.g.

```ts
  const joke = await fetch(""https://api.chucknorris.io/jokes/random"", {
    cache: ""no-cache"",
  });
  const jokeData = await joke.json();

  console.log(""Fetched joke:"", jokeData.value);

  const joke2 = await fetch(
    ""https://api.chucknorris.io/jokes/random?category=dev"",
    {
      cache: ""force-cache"",
    }
  );
  const jokeData2 = await joke2.json();
  console.log(""Fetched joke2:"", jokeData2.value);
```

This way the first fetch is not cached while the second one is.

### How?

The previous version claimed:
> Other `fetch` requests that do not opt out of caching will still be
cached in the Data Cache.

But below in the guide, we can see this:
> The default caching behavior of fetch (e.g., when the cache option is
not specified) is equal to setting the cache option to no-store:

So the first citation is misleading - the fetch requests are not cached
by default (with dynamic rendering - static rendering would cache the
single call it into the output), so we actually need to explicitly
enable caching to have them cached.

Co-authored-by: Joseph <joseph.chamochumbi@vercel.com>",1,1,2,1,1,1,1.0
d41950dc96761d4b5f85e50462cd84ec3b35f498,nextjs-bot,2025-07-02 07:32:43+00:00,v15.4.0-canary.109,34,34,68,38,0,0,
f546aa9516715d33c9eb67a6f75c014270def2a7,vercel-release-bot,2025-07-02 05:54:43+00:00,Upgrade React from `65c4decb-20250630` to `7216c0f0-20250630` (#81133),418,404,822,18,0,0,
16e1e1455ece2a198e7b83793a1455f87aab9293,eps1lon,2025-07-02 05:53:34+00:00,"[node-webstreams] Use React builds for Node.js (#81048)

Closes https://linear.app/vercel/issue/NEXT-4560/

React now exposes Web stream APIs in their Node.js builds so we can use the Node.js builds.

That enable us to use some of the Node.js goodies like `async_hooks` which is required for the React's experimental Server Requests track.

## Test plan

`next-server` runtimes did not increase bundle size. We even saved some in the `app-page` entries since we no longer have to bundle Edge and Node.js versions of React Server. We can rely solely on the Node.js variant of React Server.

A build of `test/e2e/app-dir/hello-world` shows no significant bundle size changes",512,708,1220,32,540,451,0.84
343c83807fd53a2052fce6f7ddccf8461edee8b8,eps1lon,2025-07-02 05:28:36+00:00,"[node-webstreams] Exhaustive React aliases in App Router (#81040)

The previous logic relied heavily on default-fallthroughs which makes it hard to follow what alias we end up using in which bundle.

The new logic has more duplication which is intended so that you think about each entrypoint. With the new factoring, some bad combinations are more obvious (e.g. `react-dom/server` in product code not using the vendored version or `react-server-dom-webpack/server` not throwing in a Client environment). Compare changing aliases to .node in https://github.com/vercel/next.js/pull/81048/ (based on this refactor) vs changing it without the refactor: https://github.com/vercel/next.js/pull/80941

Fixing the bad combinations is not part of this work. We probably need to finish `react-markup` first before we get more strict with `react-dom/server` usage in Server code.",450,176,626,32,540,451,0.84
3e022577f2cacfc5c5bb0553327b3e116a58f68d,ijjk,2025-07-02 03:53:54+00:00,"Fix resolvedPathname for middleware rewrite (#81144)

This updates the handling of `resolvedPathname` to handle the case we
don't know the `rewroteURL` for example when it's a middleware rewrite
and we can't derive it since it's fully dynamic. Since we always know
the `srcPage` we can always recreate the final URL using the params
which this does as it's more reliable than relying on the parsed URL as
a backup.

Validated against our deploy tests
https://github.com/vercel/next.js/actions/runs/16014327609/job/45178072108
and
https://github.com/vercel/vercel/actions/runs/16014347060/job/45178081995?pr=13509

x-ref: [slack thread](https://vercel.slack.com/archives/C093RLQ7RGC)",206,12,218,13,1020,947,0.93
3cb2f2737a48883f8c6de9f8d7013c5cd5a6554e,padmaia,2025-07-02 03:48:16+00:00,"Remove unneccesary step that's making workflow fail (#81164)

This step was causing the front-sync job to fail. I'm not totally sure
how it was working before, some other workflow must have logged logged
in at some point. This is just a debug step anyway, so I think we can
delete it. **I confirmed that the next step worked just fine.** We could
also add a step that runs `gh login` if we think it would actually be
useful.",0,4,4,3,96,83,0.86
e52d8c71f180a0791dec1b57f1129ee4571b14c4,gnoff,2025-07-02 02:59:22+00:00,"[dynamicIO] recognize prerender interrupted errors as well known (#81160)

all Next.js errors should pass through the RSC boundary with an in tact
digest",4,0,4,7,162,136,0.84
0a67d1c701e1881a567b2ac226e7fb4938441e66,unstubbable,2025-07-02 02:54:49+00:00,[dynamicIO] Don't abort on sync request data access (#81162),1212,4897,6109,25,331,294,0.89

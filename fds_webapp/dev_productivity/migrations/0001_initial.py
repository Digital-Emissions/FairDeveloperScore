# Generated by Django 5.2.4 on 2025-08-19 06:05

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True, validators=[django.core.validators.EmailValidator()])),
                ('first_name', models.CharField(max_length=30)),
                ('last_name', models.CharField(max_length=30)),
                ('github_username', models.CharField(blank=True, max_length=100, null=True)),
                ('github_access_token', models.CharField(blank=True, help_text='Personal GitHub access token', max_length=200, null=True)),
                ('organization', models.CharField(blank=True, max_length=200, null=True)),
                ('job_title', models.CharField(blank=True, max_length=100, null=True)),
                ('default_commit_limit', models.IntegerField(default=300, help_text='Default number of commits to analyze')),
                ('email_notifications', models.BooleanField(default=True)),
                ('analysis_notifications', models.BooleanField(default=True)),
                ('email_verified', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('last_login_ip', models.GenericIPAddressField(blank=True, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'auth_user',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='EmailVerificationToken',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('token', models.CharField(max_length=100, unique=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('expires_at', models.DateTimeField()),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='verification_token', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='FDSAnalysis',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('repo_url', models.URLField(help_text='GitHub repository URL', max_length=500)),
                ('access_token', models.CharField(blank=True, help_text='GitHub access token', max_length=200)),
                ('commit_limit', models.IntegerField(default=300, help_text='Number of commits to analyze')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('running', 'Running'), ('completed', 'Completed'), ('failed', 'Failed')], default='pending', max_length=20)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('total_commits', models.IntegerField(blank=True, null=True)),
                ('total_batches', models.IntegerField(blank=True, null=True)),
                ('total_developers', models.IntegerField(blank=True, null=True)),
                ('execution_time', models.FloatField(blank=True, help_text='Execution time in seconds', null=True)),
                ('error_message', models.TextField(blank=True, null=True)),
                ('is_public', models.BooleanField(default=False, help_text='Make analysis results publicly viewable')),
                ('shared_with', models.ManyToManyField(blank=True, related_name='shared_analyses', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='analyses', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'FDS Analysis',
                'verbose_name_plural': 'FDS Analyses',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ActivityLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action', models.CharField(choices=[('login', 'User Login'), ('logout', 'User Logout'), ('analysis_create', 'Analysis Created'), ('analysis_view', 'Analysis Viewed'), ('analysis_delete', 'Analysis Deleted'), ('analysis_share', 'Analysis Shared'), ('settings_update', 'Settings Updated'), ('token_update', 'GitHub Token Updated')], max_length=30)),
                ('description', models.TextField(blank=True)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('user_agent', models.TextField(blank=True)),
                ('metadata', models.JSONField(blank=True, default=dict)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='activity_logs', to=settings.AUTH_USER_MODEL)),
                ('analysis', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='dev_productivity.fdsanalysis')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='PasswordResetToken',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('token', models.CharField(max_length=100, unique=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('expires_at', models.DateTimeField()),
                ('used', models.BooleanField(default=False)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='password_reset_tokens', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='UserPreference',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('default_repo_privacy', models.BooleanField(default=False, help_text='Make analyses public by default')),
                ('auto_share_with_team', models.BooleanField(default=False)),
                ('theme', models.CharField(choices=[('light', 'Light'), ('dark', 'Dark'), ('auto', 'Auto')], default='light', max_length=20)),
                ('items_per_page', models.IntegerField(choices=[(10, '10'), (20, '20'), (50, '50'), (100, '100')], default=20)),
                ('dashboard_layout', models.CharField(choices=[('grid', 'Grid'), ('list', 'List')], default='grid', max_length=20)),
                ('email_on_completion', models.BooleanField(default=True)),
                ('email_on_failure', models.BooleanField(default=True)),
                ('email_weekly_summary', models.BooleanField(default=False)),
                ('auto_delete_failed', models.BooleanField(default=False, help_text='Auto-delete failed analyses after 30 days')),
                ('keep_analysis_data_days', models.IntegerField(default=365, help_text='Days to keep analysis data')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='preferences', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='UserSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('session_key', models.CharField(max_length=40, unique=True)),
                ('ip_address', models.GenericIPAddressField()),
                ('user_agent', models.TextField()),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('last_activity', models.DateTimeField(default=django.utils.timezone.now)),
                ('preferences', models.JSONField(blank=True, default=dict)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sessions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-last_activity'],
            },
        ),
        migrations.CreateModel(
            name='DeveloperScore',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('author_email', models.EmailField(max_length=254)),
                ('fds_score', models.FloatField(help_text='Fair Developer Score')),
                ('avg_effort', models.FloatField(default=0.0)),
                ('avg_importance', models.FloatField(default=0.0)),
                ('total_commits', models.IntegerField(default=0)),
                ('unique_batches', models.IntegerField(default=0)),
                ('total_churn', models.IntegerField(default=0)),
                ('total_files', models.IntegerField(default=0)),
                ('share_mean', models.FloatField(default=0.0)),
                ('scale_z_mean', models.FloatField(default=0.0)),
                ('reach_z_mean', models.FloatField(default=0.0)),
                ('centrality_z_mean', models.FloatField(default=0.0)),
                ('dominance_z_mean', models.FloatField(default=0.0)),
                ('novelty_z_mean', models.FloatField(default=0.0)),
                ('speed_z_mean', models.FloatField(default=0.0)),
                ('first_commit_date', models.DateTimeField(blank=True, null=True)),
                ('last_commit_date', models.DateTimeField(blank=True, null=True)),
                ('activity_span_days', models.FloatField(default=0.0)),
                ('analysis', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='developer_scores', to='dev_productivity.fdsanalysis')),
            ],
            options={
                'ordering': ['-fds_score'],
                'unique_together': {('analysis', 'author_email')},
            },
        ),
        migrations.CreateModel(
            name='BatchMetrics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('batch_id', models.IntegerField()),
                ('unique_authors', models.IntegerField(default=0)),
                ('total_contribution', models.FloatField(default=0.0)),
                ('avg_contribution', models.FloatField(default=0.0)),
                ('max_contribution', models.FloatField(default=0.0)),
                ('avg_effort', models.FloatField(default=0.0)),
                ('importance', models.FloatField(default=0.0)),
                ('total_churn', models.IntegerField(default=0)),
                ('total_files', models.IntegerField(default=0)),
                ('commit_count', models.IntegerField(default=0)),
                ('start_date', models.DateTimeField()),
                ('end_date', models.DateTimeField()),
                ('duration_hours', models.FloatField(default=0.0)),
                ('analysis', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='batch_metrics', to='dev_productivity.fdsanalysis')),
            ],
            options={
                'ordering': ['-importance'],
                'unique_together': {('analysis', 'batch_id')},
            },
        ),
    ]
